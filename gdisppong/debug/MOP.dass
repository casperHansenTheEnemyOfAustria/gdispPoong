
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 ffec 	bl	20000fe0 <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:
#include "ascii.h"
#include "startup.h"
#include "delay.h"

void ascii_ctrl_bit_set(char x){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
        char c;
        c = *GPIO_E_ODR_LOW;
2000001c:	4a09      	ldr	r2, [pc, #36]	; (20000044 <ascii_ctrl_bit_set+0x34>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7812      	ldrb	r2, [r2, #0]
20000024:	701a      	strb	r2, [r3, #0]
        *GPIO_E_ODR_LOW = B_SELECT | x | c;
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2db      	uxtb	r3, r3
20000032:	4a04      	ldr	r2, [pc, #16]	; (20000044 <ascii_ctrl_bit_set+0x34>)
20000034:	2104      	movs	r1, #4
20000036:	430b      	orrs	r3, r1
20000038:	b2db      	uxtb	r3, r3
2000003a:	7013      	strb	r3, [r2, #0]
}
2000003c:	46c0      	nop			; (mov r8, r8)
2000003e:	46bd      	mov	sp, r7
20000040:	b004      	add	sp, #16
20000042:	bd80      	pop	{r7, pc}
20000044:	40021014 	andmi	r1, r2, r4, lsl r0

20000048 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(char x){
20000048:	b580      	push	{r7, lr}
2000004a:	b084      	sub	sp, #16
2000004c:	af00      	add	r7, sp, #0
2000004e:	0002      	movs	r2, r0
20000050:	1dfb      	adds	r3, r7, #7
20000052:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
20000054:	4a0d      	ldr	r2, [pc, #52]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000056:	210f      	movs	r1, #15
20000058:	187b      	adds	r3, r7, r1
2000005a:	7812      	ldrb	r2, [r2, #0]
2000005c:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
2000005e:	1dfb      	adds	r3, r7, #7
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	b25b      	sxtb	r3, r3
20000064:	43db      	mvns	r3, r3
20000066:	b25b      	sxtb	r3, r3
20000068:	187a      	adds	r2, r7, r1
2000006a:	7812      	ldrb	r2, [r2, #0]
2000006c:	b252      	sxtb	r2, r2
2000006e:	4013      	ands	r3, r2
20000070:	b25a      	sxtb	r2, r3
20000072:	187b      	adds	r3, r7, r1
20000074:	701a      	strb	r2, [r3, #0]
	*GPIO_E_ODR_LOW = B_SELECT | c;
20000076:	4a05      	ldr	r2, [pc, #20]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000078:	187b      	adds	r3, r7, r1
2000007a:	781b      	ldrb	r3, [r3, #0]
2000007c:	2104      	movs	r1, #4
2000007e:	430b      	orrs	r3, r1
20000080:	b2db      	uxtb	r3, r3
20000082:	7013      	strb	r3, [r2, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	b004      	add	sp, #16
2000008a:	bd80      	pop	{r7, pc}
2000008c:	40021014 	andmi	r1, r2, r4, lsl r0

20000090 <ascii_read_controller>:


char  ascii_read_controller(){
20000090:	b580      	push	{r7, lr}
20000092:	b082      	sub	sp, #8
20000094:	af00      	add	r7, sp, #0
        
        char c;
        ascii_ctrl_bit_set(B_E);
20000096:	2040      	movs	r0, #64	; 0x40
20000098:	f7ff ffba 	bl	20000010 <ascii_ctrl_bit_set>

        delay_250ns();
2000009c:	f000 fae5 	bl	2000066a <delay_250ns>
        delay_250ns();
200000a0:	f000 fae3 	bl	2000066a <delay_250ns>


        c = *GPIO_E_IDR_HIGH;
200000a4:	4a06      	ldr	r2, [pc, #24]	; (200000c0 <ascii_read_controller+0x30>)
200000a6:	1dfb      	adds	r3, r7, #7
200000a8:	7812      	ldrb	r2, [r2, #0]
200000aa:	701a      	strb	r2, [r3, #0]

        ascii_ctrl_bit_clear(B_E);
200000ac:	2040      	movs	r0, #64	; 0x40
200000ae:	f7ff ffcb 	bl	20000048 <ascii_ctrl_bit_clear>
        
        return c;
200000b2:	1dfb      	adds	r3, r7, #7
200000b4:	781b      	ldrb	r3, [r3, #0]
    }
200000b6:	0018      	movs	r0, r3
200000b8:	46bd      	mov	sp, r7
200000ba:	b002      	add	sp, #8
200000bc:	bd80      	pop	{r7, pc}
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	40021011 	andmi	r1, r2, r1, lsl r0

200000c4 <ascii_read_status>:
char  ascii_read_status(){
200000c4:	b590      	push	{r4, r7, lr}
200000c6:	b083      	sub	sp, #12
200000c8:	af00      	add	r7, sp, #0
	*GPIO_E_MODER = 0x00005555;
200000ca:	4b0b      	ldr	r3, [pc, #44]	; (200000f8 <ascii_read_status+0x34>)
200000cc:	4a0b      	ldr	r2, [pc, #44]	; (200000fc <ascii_read_status+0x38>)
200000ce:	601a      	str	r2, [r3, #0]
        char c;

        // vilket kommando vil vi göra
      
        ascii_ctrl_bit_clear(B_RS);
200000d0:	2001      	movs	r0, #1
200000d2:	f7ff ffb9 	bl	20000048 <ascii_ctrl_bit_clear>
		  ascii_ctrl_bit_set(B_RW);
200000d6:	2002      	movs	r0, #2
200000d8:	f7ff ff9a 	bl	20000010 <ascii_ctrl_bit_set>
        // kicka ingång det hela
        c = ascii_read_controller();
200000dc:	1dfc      	adds	r4, r7, #7
200000de:	f7ff ffd7 	bl	20000090 <ascii_read_controller>
200000e2:	0003      	movs	r3, r0
200000e4:	7023      	strb	r3, [r4, #0]
		*GPIO_E_MODER = 0x55555555;
200000e6:	4b04      	ldr	r3, [pc, #16]	; (200000f8 <ascii_read_status+0x34>)
200000e8:	4a05      	ldr	r2, [pc, #20]	; (20000100 <ascii_read_status+0x3c>)
200000ea:	601a      	str	r2, [r3, #0]
        return c;
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	781b      	ldrb	r3, [r3, #0]
    }
200000f0:	0018      	movs	r0, r3
200000f2:	46bd      	mov	sp, r7
200000f4:	b003      	add	sp, #12
200000f6:	bd90      	pop	{r4, r7, pc}
200000f8:	40021000 	andmi	r1, r2, r0
200000fc:	00005555 	andeq	r5, r0, r5, asr r5
20000100:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000104 <ascii_read_data>:

char ascii_read_data(){
20000104:	b590      	push	{r4, r7, lr}
20000106:	b083      	sub	sp, #12
20000108:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = *GPIO_E_MODER & 0x00005555;
2000010a:	4b0e      	ldr	r3, [pc, #56]	; (20000144 <ascii_read_data+0x40>)
2000010c:	681a      	ldr	r2, [r3, #0]
2000010e:	4b0d      	ldr	r3, [pc, #52]	; (20000144 <ascii_read_data+0x40>)
20000110:	490d      	ldr	r1, [pc, #52]	; (20000148 <ascii_read_data+0x44>)
20000112:	400a      	ands	r2, r1
20000114:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000116:	2002      	movs	r0, #2
20000118:	f7ff ff7a 	bl	20000010 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
2000011c:	2001      	movs	r0, #1
2000011e:	f7ff ff77 	bl	20000010 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
20000122:	1dfc      	adds	r4, r7, #7
20000124:	f7ff ffb4 	bl	20000090 <ascii_read_controller>
20000128:	0003      	movs	r3, r0
2000012a:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER = *GPIO_E_MODER & 0x55555555;
2000012c:	4b05      	ldr	r3, [pc, #20]	; (20000144 <ascii_read_data+0x40>)
2000012e:	681a      	ldr	r2, [r3, #0]
20000130:	4b04      	ldr	r3, [pc, #16]	; (20000144 <ascii_read_data+0x40>)
20000132:	4906      	ldr	r1, [pc, #24]	; (2000014c <ascii_read_data+0x48>)
20000134:	400a      	ands	r2, r1
20000136:	601a      	str	r2, [r3, #0]
	return c;
20000138:	1dfb      	adds	r3, r7, #7
2000013a:	781b      	ldrb	r3, [r3, #0]

}
2000013c:	0018      	movs	r0, r3
2000013e:	46bd      	mov	sp, r7
20000140:	b003      	add	sp, #12
20000142:	bd90      	pop	{r4, r7, pc}
20000144:	40021000 	andmi	r1, r2, r0
20000148:	00005555 	andeq	r5, r0, r5, asr r5
2000014c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000150 <ascii_write_controller>:
    void ascii_write_controller(char command){
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
        char c;
        ascii_ctrl_bit_set(B_E);
2000015c:	2040      	movs	r0, #64	; 0x40
2000015e:	f7ff ff57 	bl	20000010 <ascii_ctrl_bit_set>
        *GPIO_E_ODR_HIGH = command;
20000162:	4a07      	ldr	r2, [pc, #28]	; (20000180 <ascii_write_controller+0x30>)
20000164:	1dfb      	adds	r3, r7, #7
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	7013      	strb	r3, [r2, #0]
        delay_250ns();
2000016a:	f000 fa7e 	bl	2000066a <delay_250ns>
        ascii_ctrl_bit_clear(B_E);
2000016e:	2040      	movs	r0, #64	; 0x40
20000170:	f7ff ff6a 	bl	20000048 <ascii_ctrl_bit_clear>
        delay_250ns();
20000174:	f000 fa79 	bl	2000066a <delay_250ns>
        
        
    }
20000178:	46c0      	nop			; (mov r8, r8)
2000017a:	46bd      	mov	sp, r7
2000017c:	b002      	add	sp, #8
2000017e:	bd80      	pop	{r7, pc}
20000180:	40021015 	andmi	r1, r2, r5, lsl r0

20000184 <ascii_write_cmd>:
void ascii_write_cmd(char command){
20000184:	b580      	push	{r7, lr}
20000186:	b082      	sub	sp, #8
20000188:	af00      	add	r7, sp, #0
2000018a:	0002      	movs	r2, r0
2000018c:	1dfb      	adds	r3, r7, #7
2000018e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RW);
20000190:	2002      	movs	r0, #2
20000192:	f7ff ff59 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RS);
20000196:	2001      	movs	r0, #1
20000198:	f7ff ff56 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	781b      	ldrb	r3, [r3, #0]
200001a0:	0018      	movs	r0, r3
200001a2:	f7ff ffd5 	bl	20000150 <ascii_write_controller>
}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	46bd      	mov	sp, r7
200001aa:	b002      	add	sp, #8
200001ac:	bd80      	pop	{r7, pc}

200001ae <ascii_write_data>:
void ascii_write_data(char command){
200001ae:	b580      	push	{r7, lr}
200001b0:	b082      	sub	sp, #8
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
		ascii_ctrl_bit_set(B_RS);
200001ba:	2001      	movs	r0, #1
200001bc:	f7ff ff28 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200001c0:	2002      	movs	r0, #2
200001c2:	f7ff ff41 	bl	20000048 <ascii_ctrl_bit_clear>

	ascii_write_controller(command);
200001c6:	1dfb      	adds	r3, r7, #7
200001c8:	781b      	ldrb	r3, [r3, #0]
200001ca:	0018      	movs	r0, r3
200001cc:	f7ff ffc0 	bl	20000150 <ascii_write_controller>
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	b002      	add	sp, #8
200001d6:	bd80      	pop	{r7, pc}

200001d8 <ascii_command>:

void ascii_command(char command){
200001d8:	b580      	push	{r7, lr}
200001da:	b082      	sub	sp, #8
200001dc:	af00      	add	r7, sp, #0
200001de:	0002      	movs	r2, r0
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	f7ff ff6d 	bl	200000c4 <ascii_read_status>
200001ea:	0003      	movs	r3, r0
200001ec:	001a      	movs	r2, r3
200001ee:	2380      	movs	r3, #128	; 0x80
200001f0:	4013      	ands	r3, r2
200001f2:	2b80      	cmp	r3, #128	; 0x80
200001f4:	d0f7      	beq.n	200001e6 <ascii_command+0xe>
	}
	ascii_write_cmd(command);
200001f6:	1dfb      	adds	r3, r7, #7
200001f8:	781b      	ldrb	r3, [r3, #0]
200001fa:	0018      	movs	r0, r3
200001fc:	f7ff ffc2 	bl	20000184 <ascii_write_cmd>
	delay_mili(2);
20000200:	2002      	movs	r0, #2
20000202:	f000 fa17 	bl	20000634 <delay_mili>
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}

2000020e <ascii_write_char>:

void ascii_write_char(char command){
2000020e:	b580      	push	{r7, lr}
20000210:	b082      	sub	sp, #8
20000212:	af00      	add	r7, sp, #0
20000214:	0002      	movs	r2, r0
20000216:	1dfb      	adds	r3, r7, #7
20000218:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	f7ff ff52 	bl	200000c4 <ascii_read_status>
20000220:	0003      	movs	r3, r0
20000222:	001a      	movs	r2, r3
20000224:	2380      	movs	r3, #128	; 0x80
20000226:	4013      	ands	r3, r2
20000228:	2b80      	cmp	r3, #128	; 0x80
2000022a:	d0f7      	beq.n	2000021c <ascii_write_char+0xe>
	}
	ascii_write_data(command);
2000022c:	1dfb      	adds	r3, r7, #7
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	0018      	movs	r0, r3
20000232:	f7ff ffbc 	bl	200001ae <ascii_write_data>
	delay_mili(2);
20000236:	2002      	movs	r0, #2
20000238:	f000 f9fc 	bl	20000634 <delay_mili>
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	b002      	add	sp, #8
20000242:	bd80      	pop	{r7, pc}

20000244 <ascii_init>:

void ascii_init(){
20000244:	b580      	push	{r7, lr}
20000246:	af00      	add	r7, sp, #0
	// functions set
	ascii_command(0x38);
20000248:	2038      	movs	r0, #56	; 0x38
2000024a:	f7ff ffc5 	bl	200001d8 <ascii_command>
	//display init blinking cursor
	ascii_command(0xC);
2000024e:	200c      	movs	r0, #12
20000250:	f7ff ffc2 	bl	200001d8 <ascii_command>
	//clear display
	ascii_command(1);
20000254:	2001      	movs	r0, #1
20000256:	f7ff ffbf 	bl	200001d8 <ascii_command>
	// entry mode left, no increment
	ascii_command(0x6);
2000025a:	2006      	movs	r0, #6
2000025c:	f7ff ffbc 	bl	200001d8 <ascii_command>
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	bd80      	pop	{r7, pc}

20000266 <ascii_clear_screen>:

void ascii_clear_screen(){
20000266:	b580      	push	{r7, lr}
20000268:	af00      	add	r7, sp, #0
    ascii_command(1);
2000026a:	2001      	movs	r0, #1
2000026c:	f7ff ffb4 	bl	200001d8 <ascii_command>
}
20000270:	46c0      	nop			; (mov r8, r8)
20000272:	46bd      	mov	sp, r7
20000274:	bd80      	pop	{r7, pc}

20000276 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y ){
20000276:	b580      	push	{r7, lr}
20000278:	b084      	sub	sp, #16
2000027a:	af00      	add	r7, sp, #0
2000027c:	6078      	str	r0, [r7, #4]
2000027e:	6039      	str	r1, [r7, #0]
	int adress = x-1;
20000280:	687b      	ldr	r3, [r7, #4]
20000282:	3b01      	subs	r3, #1
20000284:	60fb      	str	r3, [r7, #12]
	if(y == 2){
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	2b02      	cmp	r3, #2
2000028a:	d102      	bne.n	20000292 <ascii_gotoxy+0x1c>
		adress = adress + 0x40;
2000028c:	68fb      	ldr	r3, [r7, #12]
2000028e:	3340      	adds	r3, #64	; 0x40
20000290:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80 | adress);
20000292:	68fb      	ldr	r3, [r7, #12]
20000294:	b25b      	sxtb	r3, r3
20000296:	2280      	movs	r2, #128	; 0x80
20000298:	4252      	negs	r2, r2
2000029a:	4313      	orrs	r3, r2
2000029c:	b25b      	sxtb	r3, r3
2000029e:	b2db      	uxtb	r3, r3
200002a0:	0018      	movs	r0, r3
200002a2:	f7ff ff6f 	bl	20000184 <ascii_write_cmd>

}
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	46bd      	mov	sp, r7
200002aa:	b004      	add	sp, #16
200002ac:	bd80      	pop	{r7, pc}

200002ae <ascii_write_text_at>:

void ascii_write_text_at(char num, int x, int y){
200002ae:	b590      	push	{r4, r7, lr}
200002b0:	b089      	sub	sp, #36	; 0x24
200002b2:	af00      	add	r7, sp, #0
200002b4:	60b9      	str	r1, [r7, #8]
200002b6:	607a      	str	r2, [r7, #4]
200002b8:	240f      	movs	r4, #15
200002ba:	193b      	adds	r3, r7, r4
200002bc:	1c02      	adds	r2, r0, #0
200002be:	701a      	strb	r2, [r3, #0]
	
	int moder_save = *GPIO_E_MODER;
200002c0:	4b16      	ldr	r3, [pc, #88]	; (2000031c <ascii_write_text_at+0x6e>)
200002c2:	681b      	ldr	r3, [r3, #0]
200002c4:	61fb      	str	r3, [r7, #28]
	int otyper_save = *GPIO_E_OTYPER;
200002c6:	4b16      	ldr	r3, [pc, #88]	; (20000320 <ascii_write_text_at+0x72>)
200002c8:	881b      	ldrh	r3, [r3, #0]
200002ca:	b29b      	uxth	r3, r3
200002cc:	61bb      	str	r3, [r7, #24]
	int ospeedr_save = *GPIO_E_OSPEEDR;
200002ce:	4b15      	ldr	r3, [pc, #84]	; (20000324 <ascii_write_text_at+0x76>)
200002d0:	681b      	ldr	r3, [r3, #0]
200002d2:	617b      	str	r3, [r7, #20]
	*GPIO_E_MODER = 0x55555555;
200002d4:	4b11      	ldr	r3, [pc, #68]	; (2000031c <ascii_write_text_at+0x6e>)
200002d6:	4a14      	ldr	r2, [pc, #80]	; (20000328 <ascii_write_text_at+0x7a>)
200002d8:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
200002da:	4b11      	ldr	r3, [pc, #68]	; (20000320 <ascii_write_text_at+0x72>)
200002dc:	2200      	movs	r2, #0
200002de:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
200002e0:	4b10      	ldr	r3, [pc, #64]	; (20000324 <ascii_write_text_at+0x76>)
200002e2:	2201      	movs	r2, #1
200002e4:	4252      	negs	r2, r2
200002e6:	601a      	str	r2, [r3, #0]
	ascii_gotoxy(x,y);
200002e8:	687a      	ldr	r2, [r7, #4]
200002ea:	68bb      	ldr	r3, [r7, #8]
200002ec:	0011      	movs	r1, r2
200002ee:	0018      	movs	r0, r3
200002f0:	f7ff ffc1 	bl	20000276 <ascii_gotoxy>
	ascii_write_char(num);
200002f4:	193b      	adds	r3, r7, r4
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	0018      	movs	r0, r3
200002fa:	f7ff ff88 	bl	2000020e <ascii_write_char>

	*GPIO_E_MODER = moder_save;
200002fe:	4b07      	ldr	r3, [pc, #28]	; (2000031c <ascii_write_text_at+0x6e>)
20000300:	69fa      	ldr	r2, [r7, #28]
20000302:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = otyper_save;
20000304:	4b06      	ldr	r3, [pc, #24]	; (20000320 <ascii_write_text_at+0x72>)
20000306:	69ba      	ldr	r2, [r7, #24]
20000308:	b292      	uxth	r2, r2
2000030a:	801a      	strh	r2, [r3, #0]
	*GPIO_E_OSPEEDR = ospeedr_save;
2000030c:	4b05      	ldr	r3, [pc, #20]	; (20000324 <ascii_write_text_at+0x76>)
2000030e:	697a      	ldr	r2, [r7, #20]
20000310:	601a      	str	r2, [r3, #0]
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b009      	add	sp, #36	; 0x24
20000318:	bd90      	pop	{r4, r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40021000 	andmi	r1, r2, r0
20000320:	40021004 	andmi	r1, r2, r4
20000324:	40021008 	andmi	r1, r2, r8
20000328:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000032c <draw_ballobject>:
    {4,7},{4,6},{4,5},{4,4},{4,3},{4,2},{4,1},
    {2,3},{2,4},{2,5}}
};


void draw_ballobject(OBJECT* object){
2000032c:	b580      	push	{r7, lr}
2000032e:	b084      	sub	sp, #16
20000330:	af00      	add	r7, sp, #0
20000332:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < object->geo->numpoints; i++){
20000334:	2300      	movs	r3, #0
20000336:	60fb      	str	r3, [r7, #12]
20000338:	e01d      	b.n	20000376 <draw_ballobject+0x4a>
        graphic_pixel_set(object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy);
2000033a:	687b      	ldr	r3, [r7, #4]
2000033c:	681a      	ldr	r2, [r3, #0]
2000033e:	68fb      	ldr	r3, [r7, #12]
20000340:	3304      	adds	r3, #4
20000342:	005b      	lsls	r3, r3, #1
20000344:	18d3      	adds	r3, r2, r3
20000346:	3304      	adds	r3, #4
20000348:	781b      	ldrb	r3, [r3, #0]
2000034a:	001a      	movs	r2, r3
2000034c:	687b      	ldr	r3, [r7, #4]
2000034e:	68db      	ldr	r3, [r3, #12]
20000350:	18d0      	adds	r0, r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	681a      	ldr	r2, [r3, #0]
20000356:	68fb      	ldr	r3, [r7, #12]
20000358:	3304      	adds	r3, #4
2000035a:	005b      	lsls	r3, r3, #1
2000035c:	18d3      	adds	r3, r2, r3
2000035e:	3305      	adds	r3, #5
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	001a      	movs	r2, r3
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	691b      	ldr	r3, [r3, #16]
20000368:	18d3      	adds	r3, r2, r3
2000036a:	0019      	movs	r1, r3
2000036c:	f000 fe8d 	bl	2000108a <graphic_pixel_set>
    for(int i = 0; i < object->geo->numpoints; i++){
20000370:	68fb      	ldr	r3, [r7, #12]
20000372:	3301      	adds	r3, #1
20000374:	60fb      	str	r3, [r7, #12]
20000376:	687b      	ldr	r3, [r7, #4]
20000378:	681b      	ldr	r3, [r3, #0]
2000037a:	681b      	ldr	r3, [r3, #0]
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	429a      	cmp	r2, r3
20000380:	dbdb      	blt.n	2000033a <draw_ballobject+0xe>
    }
}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	46c0      	nop			; (mov r8, r8)
20000386:	46bd      	mov	sp, r7
20000388:	b004      	add	sp, #16
2000038a:	bd80      	pop	{r7, pc}

2000038c <clear_ballobject>:

void clear_ballobject(OBJECT* object){
2000038c:	b580      	push	{r7, lr}
2000038e:	b084      	sub	sp, #16
20000390:	af00      	add	r7, sp, #0
20000392:	6078      	str	r0, [r7, #4]
      for(int i = 0; i < object->geo->numpoints; i++){
20000394:	2300      	movs	r3, #0
20000396:	60fb      	str	r3, [r7, #12]
20000398:	e01d      	b.n	200003d6 <clear_ballobject+0x4a>
        graphic_pixel_clear(object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy);
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	681a      	ldr	r2, [r3, #0]
2000039e:	68fb      	ldr	r3, [r7, #12]
200003a0:	3304      	adds	r3, #4
200003a2:	005b      	lsls	r3, r3, #1
200003a4:	18d3      	adds	r3, r2, r3
200003a6:	3304      	adds	r3, #4
200003a8:	781b      	ldrb	r3, [r3, #0]
200003aa:	001a      	movs	r2, r3
200003ac:	687b      	ldr	r3, [r7, #4]
200003ae:	68db      	ldr	r3, [r3, #12]
200003b0:	18d0      	adds	r0, r2, r3
200003b2:	687b      	ldr	r3, [r7, #4]
200003b4:	681a      	ldr	r2, [r3, #0]
200003b6:	68fb      	ldr	r3, [r7, #12]
200003b8:	3304      	adds	r3, #4
200003ba:	005b      	lsls	r3, r3, #1
200003bc:	18d3      	adds	r3, r2, r3
200003be:	3305      	adds	r3, #5
200003c0:	781b      	ldrb	r3, [r3, #0]
200003c2:	001a      	movs	r2, r3
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	691b      	ldr	r3, [r3, #16]
200003c8:	18d3      	adds	r3, r2, r3
200003ca:	0019      	movs	r1, r3
200003cc:	f000 fe60 	bl	20001090 <graphic_pixel_clear>
      for(int i = 0; i < object->geo->numpoints; i++){
200003d0:	68fb      	ldr	r3, [r7, #12]
200003d2:	3301      	adds	r3, #1
200003d4:	60fb      	str	r3, [r7, #12]
200003d6:	687b      	ldr	r3, [r7, #4]
200003d8:	681b      	ldr	r3, [r3, #0]
200003da:	681b      	ldr	r3, [r3, #0]
200003dc:	68fa      	ldr	r2, [r7, #12]
200003de:	429a      	cmp	r2, r3
200003e0:	dbdb      	blt.n	2000039a <clear_ballobject+0xe>
    }
}
200003e2:	46c0      	nop			; (mov r8, r8)
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b004      	add	sp, #16
200003ea:	bd80      	pop	{r7, pc}

200003ec <move_ballobject>:
void move_ballobject(OBJECT* object){
200003ec:	b580      	push	{r7, lr}
200003ee:	b082      	sub	sp, #8
200003f0:	af00      	add	r7, sp, #0
200003f2:	6078      	str	r0, [r7, #4]
    clear_ballobject(object);
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	0018      	movs	r0, r3
200003f8:	f7ff ffc8 	bl	2000038c <clear_ballobject>
    object->posx+= object->dirx;
200003fc:	687b      	ldr	r3, [r7, #4]
200003fe:	68da      	ldr	r2, [r3, #12]
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	685b      	ldr	r3, [r3, #4]
20000404:	18d2      	adds	r2, r2, r3
20000406:	687b      	ldr	r3, [r7, #4]
20000408:	60da      	str	r2, [r3, #12]
    object->posy+= object->diry;
2000040a:	687b      	ldr	r3, [r7, #4]
2000040c:	691a      	ldr	r2, [r3, #16]
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	689b      	ldr	r3, [r3, #8]
20000412:	18d2      	adds	r2, r2, r3
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	611a      	str	r2, [r3, #16]

    if(object->posx >127){
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	68db      	ldr	r3, [r3, #12]
2000041c:	2b7f      	cmp	r3, #127	; 0x7f
2000041e:	dd04      	ble.n	2000042a <move_ballobject+0x3e>
        object->dirx = -object->dirx;
20000420:	687b      	ldr	r3, [r7, #4]
20000422:	685b      	ldr	r3, [r3, #4]
20000424:	425a      	negs	r2, r3
20000426:	687b      	ldr	r3, [r7, #4]
20000428:	605a      	str	r2, [r3, #4]
    }
    if(object->posx <1){
2000042a:	687b      	ldr	r3, [r7, #4]
2000042c:	68db      	ldr	r3, [r3, #12]
2000042e:	2b00      	cmp	r3, #0
20000430:	dc04      	bgt.n	2000043c <move_ballobject+0x50>
        object->dirx = -object->dirx;
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	685b      	ldr	r3, [r3, #4]
20000436:	425a      	negs	r2, r3
20000438:	687b      	ldr	r3, [r7, #4]
2000043a:	605a      	str	r2, [r3, #4]
    }
    if(object->posy >64){
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	691b      	ldr	r3, [r3, #16]
20000440:	2b40      	cmp	r3, #64	; 0x40
20000442:	dd04      	ble.n	2000044e <move_ballobject+0x62>
        object->diry = -object->diry;
20000444:	687b      	ldr	r3, [r7, #4]
20000446:	689b      	ldr	r3, [r3, #8]
20000448:	425a      	negs	r2, r3
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	609a      	str	r2, [r3, #8]
    }
    if(object->posy <1){
2000044e:	687b      	ldr	r3, [r7, #4]
20000450:	691b      	ldr	r3, [r3, #16]
20000452:	2b00      	cmp	r3, #0
20000454:	dc04      	bgt.n	20000460 <move_ballobject+0x74>
        object->diry = -object->diry;
20000456:	687b      	ldr	r3, [r7, #4]
20000458:	689b      	ldr	r3, [r3, #8]
2000045a:	425a      	negs	r2, r3
2000045c:	687b      	ldr	r3, [r7, #4]
2000045e:	609a      	str	r2, [r3, #8]
    }
    draw_ballobject(object);
20000460:	687b      	ldr	r3, [r7, #4]
20000462:	0018      	movs	r0, r3
20000464:	f7ff ff62 	bl	2000032c <draw_ballobject>
}
20000468:	46c0      	nop			; (mov r8, r8)
2000046a:	46bd      	mov	sp, r7
2000046c:	b002      	add	sp, #8
2000046e:	bd80      	pop	{r7, pc}

20000470 <move_paddleobject>:

void move_paddleobject(OBJECT* object){
20000470:	b580      	push	{r7, lr}
20000472:	b082      	sub	sp, #8
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
    clear_ballobject(object);
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ff86 	bl	2000038c <clear_ballobject>
    object->posy+= object->diry;
20000480:	687b      	ldr	r3, [r7, #4]
20000482:	691a      	ldr	r2, [r3, #16]
20000484:	687b      	ldr	r3, [r7, #4]
20000486:	689b      	ldr	r3, [r3, #8]
20000488:	18d2      	adds	r2, r2, r3
2000048a:	687b      	ldr	r3, [r7, #4]
2000048c:	611a      	str	r2, [r3, #16]

    if(object->posy >64){
2000048e:	687b      	ldr	r3, [r7, #4]
20000490:	691b      	ldr	r3, [r3, #16]
20000492:	2b40      	cmp	r3, #64	; 0x40
20000494:	dd05      	ble.n	200004a2 <move_paddleobject+0x32>
        object->diry = 0;
20000496:	687b      	ldr	r3, [r7, #4]
20000498:	2200      	movs	r2, #0
2000049a:	609a      	str	r2, [r3, #8]
        object->posy = 60;
2000049c:	687b      	ldr	r3, [r7, #4]
2000049e:	223c      	movs	r2, #60	; 0x3c
200004a0:	611a      	str	r2, [r3, #16]
    }
    if(object->posy <1){
200004a2:	687b      	ldr	r3, [r7, #4]
200004a4:	691b      	ldr	r3, [r3, #16]
200004a6:	2b00      	cmp	r3, #0
200004a8:	dc05      	bgt.n	200004b6 <move_paddleobject+0x46>
        object->diry = 0;
200004aa:	687b      	ldr	r3, [r7, #4]
200004ac:	2200      	movs	r2, #0
200004ae:	609a      	str	r2, [r3, #8]
        object->posy = 4;
200004b0:	687b      	ldr	r3, [r7, #4]
200004b2:	2204      	movs	r2, #4
200004b4:	611a      	str	r2, [r3, #16]
    }
    draw_ballobject(object);
200004b6:	687b      	ldr	r3, [r7, #4]
200004b8:	0018      	movs	r0, r3
200004ba:	f7ff ff37 	bl	2000032c <draw_ballobject>
}
200004be:	46c0      	nop			; (mov r8, r8)
200004c0:	46bd      	mov	sp, r7
200004c2:	b002      	add	sp, #8
200004c4:	bd80      	pop	{r7, pc}

200004c6 <set_ballobject_speed>:


void set_ballobject_speed(OBJECT* object, int speedx, int speedy){
200004c6:	b580      	push	{r7, lr}
200004c8:	b084      	sub	sp, #16
200004ca:	af00      	add	r7, sp, #0
200004cc:	60f8      	str	r0, [r7, #12]
200004ce:	60b9      	str	r1, [r7, #8]
200004d0:	607a      	str	r2, [r7, #4]
    object->dirx = speedx;
200004d2:	68fb      	ldr	r3, [r7, #12]
200004d4:	68ba      	ldr	r2, [r7, #8]
200004d6:	605a      	str	r2, [r3, #4]
    object->diry = speedy;
200004d8:	68fb      	ldr	r3, [r7, #12]
200004da:	687a      	ldr	r2, [r7, #4]
200004dc:	609a      	str	r2, [r3, #8]
}
200004de:	46c0      	nop			; (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	b004      	add	sp, #16
200004e4:	bd80      	pop	{r7, pc}

200004e6 <create_ballobject>:

OBJECT create_ballobject(int posx, int posy){
200004e6:	b590      	push	{r4, r7, lr}
200004e8:	b08f      	sub	sp, #60	; 0x3c
200004ea:	af00      	add	r7, sp, #0
200004ec:	60f8      	str	r0, [r7, #12]
200004ee:	60b9      	str	r1, [r7, #8]
200004f0:	607a      	str	r2, [r7, #4]
    OBJECT ballobject = {
200004f2:	2114      	movs	r1, #20
200004f4:	187b      	adds	r3, r7, r1
200004f6:	4a13      	ldr	r2, [pc, #76]	; (20000544 <create_ballobject+0x5e>)
200004f8:	601a      	str	r2, [r3, #0]
200004fa:	187b      	adds	r3, r7, r1
200004fc:	2200      	movs	r2, #0
200004fe:	605a      	str	r2, [r3, #4]
20000500:	187b      	adds	r3, r7, r1
20000502:	2200      	movs	r2, #0
20000504:	609a      	str	r2, [r3, #8]
20000506:	187b      	adds	r3, r7, r1
20000508:	68ba      	ldr	r2, [r7, #8]
2000050a:	60da      	str	r2, [r3, #12]
2000050c:	187b      	adds	r3, r7, r1
2000050e:	687a      	ldr	r2, [r7, #4]
20000510:	611a      	str	r2, [r3, #16]
20000512:	187b      	adds	r3, r7, r1
20000514:	4a0c      	ldr	r2, [pc, #48]	; (20000548 <create_ballobject+0x62>)
20000516:	615a      	str	r2, [r3, #20]
20000518:	187b      	adds	r3, r7, r1
2000051a:	4a0c      	ldr	r2, [pc, #48]	; (2000054c <create_ballobject+0x66>)
2000051c:	619a      	str	r2, [r3, #24]
2000051e:	187b      	adds	r3, r7, r1
20000520:	4a0b      	ldr	r2, [pc, #44]	; (20000550 <create_ballobject+0x6a>)
20000522:	61da      	str	r2, [r3, #28]
20000524:	187b      	adds	r3, r7, r1
20000526:	4a0b      	ldr	r2, [pc, #44]	; (20000554 <create_ballobject+0x6e>)
20000528:	621a      	str	r2, [r3, #32]
        draw_ballobject,
        clear_ballobject,
        move_ballobject,
        set_ballobject_speed
    };
    return ballobject;
2000052a:	68fb      	ldr	r3, [r7, #12]
2000052c:	187a      	adds	r2, r7, r1
2000052e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000530:	c313      	stmia	r3!, {r0, r1, r4}
20000532:	ca13      	ldmia	r2!, {r0, r1, r4}
20000534:	c313      	stmia	r3!, {r0, r1, r4}
20000536:	ca13      	ldmia	r2!, {r0, r1, r4}
20000538:	c313      	stmia	r3!, {r0, r1, r4}
}
2000053a:	68f8      	ldr	r0, [r7, #12]
2000053c:	46bd      	mov	sp, r7
2000053e:	b00f      	add	sp, #60	; 0x3c
20000540:	bd90      	pop	{r4, r7, pc}
20000542:	46c0      	nop			; (mov r8, r8)
20000544:	200012d4 	ldrdcs	r1, [r0], -r4
20000548:	2000032d 	andcs	r0, r0, sp, lsr #6
2000054c:	2000038d 	andcs	r0, r0, sp, lsl #7
20000550:	200003ed 	andcs	r0, r0, sp, ror #7
20000554:	200004c7 	andcs	r0, r0, r7, asr #9

20000558 <create_paddleobject>:

OBJECT create_paddleobject(int posx, int posy){
20000558:	b590      	push	{r4, r7, lr}
2000055a:	b08f      	sub	sp, #60	; 0x3c
2000055c:	af00      	add	r7, sp, #0
2000055e:	60f8      	str	r0, [r7, #12]
20000560:	60b9      	str	r1, [r7, #8]
20000562:	607a      	str	r2, [r7, #4]
    OBJECT paddleobject = {
20000564:	2114      	movs	r1, #20
20000566:	187b      	adds	r3, r7, r1
20000568:	4a12      	ldr	r2, [pc, #72]	; (200005b4 <create_paddleobject+0x5c>)
2000056a:	601a      	str	r2, [r3, #0]
2000056c:	187b      	adds	r3, r7, r1
2000056e:	2200      	movs	r2, #0
20000570:	605a      	str	r2, [r3, #4]
20000572:	187b      	adds	r3, r7, r1
20000574:	2200      	movs	r2, #0
20000576:	609a      	str	r2, [r3, #8]
20000578:	187b      	adds	r3, r7, r1
2000057a:	68ba      	ldr	r2, [r7, #8]
2000057c:	60da      	str	r2, [r3, #12]
2000057e:	187b      	adds	r3, r7, r1
20000580:	687a      	ldr	r2, [r7, #4]
20000582:	611a      	str	r2, [r3, #16]
20000584:	187b      	adds	r3, r7, r1
20000586:	4a0c      	ldr	r2, [pc, #48]	; (200005b8 <create_paddleobject+0x60>)
20000588:	615a      	str	r2, [r3, #20]
2000058a:	187b      	adds	r3, r7, r1
2000058c:	4a0b      	ldr	r2, [pc, #44]	; (200005bc <create_paddleobject+0x64>)
2000058e:	619a      	str	r2, [r3, #24]
20000590:	187b      	adds	r3, r7, r1
20000592:	4a0b      	ldr	r2, [pc, #44]	; (200005c0 <create_paddleobject+0x68>)
20000594:	61da      	str	r2, [r3, #28]
20000596:	187b      	adds	r3, r7, r1
20000598:	4a0a      	ldr	r2, [pc, #40]	; (200005c4 <create_paddleobject+0x6c>)
2000059a:	621a      	str	r2, [r3, #32]
        draw_ballobject,
        clear_ballobject,
        move_paddleobject,
        set_ballobject_speed
    };
    return paddleobject;
2000059c:	68fb      	ldr	r3, [r7, #12]
2000059e:	187a      	adds	r2, r7, r1
200005a0:	ca13      	ldmia	r2!, {r0, r1, r4}
200005a2:	c313      	stmia	r3!, {r0, r1, r4}
200005a4:	ca13      	ldmia	r2!, {r0, r1, r4}
200005a6:	c313      	stmia	r3!, {r0, r1, r4}
200005a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200005aa:	c313      	stmia	r3!, {r0, r1, r4}
200005ac:	68f8      	ldr	r0, [r7, #12]
200005ae:	46bd      	mov	sp, r7
200005b0:	b00f      	add	sp, #60	; 0x3c
200005b2:	bd90      	pop	{r4, r7, pc}
200005b4:	2000131c 	andcs	r1, r0, ip, lsl r3
200005b8:	2000032d 	andcs	r0, r0, sp, lsr #6
200005bc:	2000038d 	andcs	r0, r0, sp, lsl #7
200005c0:	20000471 	andcs	r0, r0, r1, ror r4
200005c4:	200004c7 	andcs	r0, r0, r7, asr #9

200005c8 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
200005c8:	b580      	push	{r7, lr}
200005ca:	b082      	sub	sp, #8
200005cc:	af00      	add	r7, sp, #0
200005ce:	0002      	movs	r2, r0
200005d0:	1dfb      	adds	r3, r7, #7
200005d2:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
200005d4:	46c0      	nop			; (mov r8, r8)
200005d6:	4b0b      	ldr	r3, [pc, #44]	; (20000604 <print_char+0x3c>)
200005d8:	881b      	ldrh	r3, [r3, #0]
200005da:	b29b      	uxth	r3, r3
200005dc:	001a      	movs	r2, r3
200005de:	2380      	movs	r3, #128	; 0x80
200005e0:	4013      	ands	r3, r2
200005e2:	d0f8      	beq.n	200005d6 <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
200005e4:	4a07      	ldr	r2, [pc, #28]	; (20000604 <print_char+0x3c>)
200005e6:	1dfb      	adds	r3, r7, #7
200005e8:	781b      	ldrb	r3, [r3, #0]
200005ea:	b29b      	uxth	r3, r3
200005ec:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
200005ee:	1dfb      	adds	r3, r7, #7
200005f0:	781b      	ldrb	r3, [r3, #0]
200005f2:	2b0a      	cmp	r3, #10
200005f4:	d102      	bne.n	200005fc <print_char+0x34>
		print_char('\r');
200005f6:	200d      	movs	r0, #13
200005f8:	f7ff ffe6 	bl	200005c8 <print_char>
	}
}
200005fc:	46c0      	nop			; (mov r8, r8)
200005fe:	46bd      	mov	sp, r7
20000600:	b002      	add	sp, #8
20000602:	bd80      	pop	{r7, pc}
20000604:	40011000 	andmi	r1, r1, r0

20000608 <print>:

void print(char *s) {
20000608:	b580      	push	{r7, lr}
2000060a:	b082      	sub	sp, #8
2000060c:	af00      	add	r7, sp, #0
2000060e:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
20000610:	e006      	b.n	20000620 <print+0x18>
		print_char(*(s++));
20000612:	687b      	ldr	r3, [r7, #4]
20000614:	1c5a      	adds	r2, r3, #1
20000616:	607a      	str	r2, [r7, #4]
20000618:	781b      	ldrb	r3, [r3, #0]
2000061a:	0018      	movs	r0, r3
2000061c:	f7ff ffd4 	bl	200005c8 <print_char>
	while (*s != '\0') {
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	781b      	ldrb	r3, [r3, #0]
20000624:	2b00      	cmp	r3, #0
20000626:	d1f4      	bne.n	20000612 <print+0xa>
	}
}
20000628:	46c0      	nop			; (mov r8, r8)
2000062a:	46c0      	nop			; (mov r8, r8)
2000062c:	46bd      	mov	sp, r7
2000062e:	b002      	add	sp, #8
20000630:	bd80      	pop	{r7, pc}
20000632:	46c0      	nop			; (mov r8, r8)

20000634 <delay_mili>:
#include "delay.h"

void delay_mili(unsigned int ms){
20000634:	b580      	push	{r7, lr}
20000636:	b084      	sub	sp, #16
20000638:	af00      	add	r7, sp, #0
2000063a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i< ms; i++){
2000063c:	2300      	movs	r3, #0
2000063e:	60fb      	str	r3, [r7, #12]
20000640:	e00a      	b.n	20000658 <delay_mili+0x24>
        delay_250ns();
20000642:	f000 f812 	bl	2000066a <delay_250ns>
        delay_250ns();
20000646:	f000 f810 	bl	2000066a <delay_250ns>
        delay_250ns();
2000064a:	f000 f80e 	bl	2000066a <delay_250ns>
        delay_250ns();
2000064e:	f000 f80c 	bl	2000066a <delay_250ns>
    for (int i = 0; i< ms; i++){
20000652:	68fb      	ldr	r3, [r7, #12]
20000654:	3301      	adds	r3, #1
20000656:	60fb      	str	r3, [r7, #12]
20000658:	68fb      	ldr	r3, [r7, #12]
2000065a:	687a      	ldr	r2, [r7, #4]
2000065c:	429a      	cmp	r2, r3
2000065e:	d8f0      	bhi.n	20000642 <delay_mili+0xe>
    }
}
20000660:	46c0      	nop			; (mov r8, r8)
20000662:	46c0      	nop			; (mov r8, r8)
20000664:	46bd      	mov	sp, r7
20000666:	b004      	add	sp, #16
20000668:	bd80      	pop	{r7, pc}

2000066a <delay_250ns>:


void delay_250ns(){
2000066a:	b580      	push	{r7, lr}
2000066c:	af00      	add	r7, sp, #0
	delay_125ns();
2000066e:	f000 f805 	bl	2000067c <delay_125ns>
    delay_125ns();
20000672:	f000 f803 	bl	2000067c <delay_125ns>
}
20000676:	46c0      	nop			; (mov r8, r8)
20000678:	46bd      	mov	sp, r7
2000067a:	bd80      	pop	{r7, pc}

2000067c <delay_125ns>:

void delay_125ns(){
2000067c:	b580      	push	{r7, lr}
2000067e:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000680:	4b0c      	ldr	r3, [pc, #48]	; (200006b4 <delay_125ns+0x38>)
20000682:	2200      	movs	r2, #0
20000684:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168/8 );
20000686:	4b0c      	ldr	r3, [pc, #48]	; (200006b8 <delay_125ns+0x3c>)
20000688:	2215      	movs	r2, #21
2000068a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000068c:	4b0b      	ldr	r3, [pc, #44]	; (200006bc <delay_125ns+0x40>)
2000068e:	2200      	movs	r2, #0
20000690:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000692:	4b08      	ldr	r3, [pc, #32]	; (200006b4 <delay_125ns+0x38>)
20000694:	2205      	movs	r2, #5
20000696:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
20000698:	46c0      	nop			; (mov r8, r8)
2000069a:	4b06      	ldr	r3, [pc, #24]	; (200006b4 <delay_125ns+0x38>)
2000069c:	681a      	ldr	r2, [r3, #0]
2000069e:	2380      	movs	r3, #128	; 0x80
200006a0:	025b      	lsls	r3, r3, #9
200006a2:	4013      	ands	r3, r2
200006a4:	d0f9      	beq.n	2000069a <delay_125ns+0x1e>
	*STK_CTRL = 0;
200006a6:	4b03      	ldr	r3, [pc, #12]	; (200006b4 <delay_125ns+0x38>)
200006a8:	2200      	movs	r2, #0
200006aa:	601a      	str	r2, [r3, #0]
}
200006ac:	46c0      	nop			; (mov r8, r8)
200006ae:	46bd      	mov	sp, r7
200006b0:	bd80      	pop	{r7, pc}
200006b2:	46c0      	nop			; (mov r8, r8)
200006b4:	e000e010 	and	lr, r0, r0, lsl r0
200006b8:	e000e014 	and	lr, r0, r4, lsl r0
200006bc:	e000e018 	and	lr, r0, r8, lsl r0

200006c0 <draw_line_from_points>:
#include "startup.h"
#include "math.h"



void draw_line_from_points(int x0,int x1,int y0,int y1){
200006c0:	b580      	push	{r7, lr}
200006c2:	b08c      	sub	sp, #48	; 0x30
200006c4:	af00      	add	r7, sp, #0
200006c6:	60f8      	str	r0, [r7, #12]
200006c8:	60b9      	str	r1, [r7, #8]
200006ca:	607a      	str	r2, [r7, #4]
200006cc:	603b      	str	r3, [r7, #0]
    char steep;
    int temp;
    if(abs(y1-y0)>abs(x1-x0)){
200006ce:	683a      	ldr	r2, [r7, #0]
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	1ad3      	subs	r3, r2, r3
200006d4:	17d9      	asrs	r1, r3, #31
200006d6:	185a      	adds	r2, r3, r1
200006d8:	404a      	eors	r2, r1
200006da:	68b9      	ldr	r1, [r7, #8]
200006dc:	68fb      	ldr	r3, [r7, #12]
200006de:	1acb      	subs	r3, r1, r3
200006e0:	17d9      	asrs	r1, r3, #31
200006e2:	185b      	adds	r3, r3, r1
200006e4:	404b      	eors	r3, r1
200006e6:	429a      	cmp	r2, r3
200006e8:	dd04      	ble.n	200006f4 <draw_line_from_points+0x34>
        steep = 1;
200006ea:	232f      	movs	r3, #47	; 0x2f
200006ec:	18fb      	adds	r3, r7, r3
200006ee:	2201      	movs	r2, #1
200006f0:	701a      	strb	r2, [r3, #0]
200006f2:	e003      	b.n	200006fc <draw_line_from_points+0x3c>
    }else{
        steep = 0;
200006f4:	232f      	movs	r3, #47	; 0x2f
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	2200      	movs	r2, #0
200006fa:	701a      	strb	r2, [r3, #0]
    }
    if(steep){
200006fc:	232f      	movs	r3, #47	; 0x2f
200006fe:	18fb      	adds	r3, r7, r3
20000700:	781b      	ldrb	r3, [r3, #0]
20000702:	2b00      	cmp	r3, #0
20000704:	d00b      	beq.n	2000071e <draw_line_from_points+0x5e>
        swap(x0, y0);
20000706:	68fb      	ldr	r3, [r7, #12]
20000708:	61bb      	str	r3, [r7, #24]
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	60fb      	str	r3, [r7, #12]
2000070e:	69bb      	ldr	r3, [r7, #24]
20000710:	607b      	str	r3, [r7, #4]

        swap(x1, y1);
20000712:	68bb      	ldr	r3, [r7, #8]
20000714:	61bb      	str	r3, [r7, #24]
20000716:	683b      	ldr	r3, [r7, #0]
20000718:	60bb      	str	r3, [r7, #8]
2000071a:	69bb      	ldr	r3, [r7, #24]
2000071c:	603b      	str	r3, [r7, #0]
    }
    if(x0>x1){
2000071e:	68fa      	ldr	r2, [r7, #12]
20000720:	68bb      	ldr	r3, [r7, #8]
20000722:	429a      	cmp	r2, r3
20000724:	dd0b      	ble.n	2000073e <draw_line_from_points+0x7e>
        swap(x0,x1);
20000726:	68fb      	ldr	r3, [r7, #12]
20000728:	61bb      	str	r3, [r7, #24]
2000072a:	68bb      	ldr	r3, [r7, #8]
2000072c:	60fb      	str	r3, [r7, #12]
2000072e:	69bb      	ldr	r3, [r7, #24]
20000730:	60bb      	str	r3, [r7, #8]
       
        swap(y0,y1);
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	61bb      	str	r3, [r7, #24]
20000736:	683b      	ldr	r3, [r7, #0]
20000738:	607b      	str	r3, [r7, #4]
2000073a:	69bb      	ldr	r3, [r7, #24]
2000073c:	603b      	str	r3, [r7, #0]

    }
    int deltax = x1-x0;
2000073e:	68ba      	ldr	r2, [r7, #8]
20000740:	68fb      	ldr	r3, [r7, #12]
20000742:	1ad3      	subs	r3, r2, r3
20000744:	617b      	str	r3, [r7, #20]
    int deltay = abs(y1-y0);
20000746:	683a      	ldr	r2, [r7, #0]
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	1ad3      	subs	r3, r2, r3
2000074c:	17da      	asrs	r2, r3, #31
2000074e:	189b      	adds	r3, r3, r2
20000750:	4053      	eors	r3, r2
20000752:	613b      	str	r3, [r7, #16]
    int error = 0;
20000754:	2300      	movs	r3, #0
20000756:	62bb      	str	r3, [r7, #40]	; 0x28
    int y = y0;
20000758:	687b      	ldr	r3, [r7, #4]
2000075a:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep;
    if(y0 < y1){
2000075c:	687a      	ldr	r2, [r7, #4]
2000075e:	683b      	ldr	r3, [r7, #0]
20000760:	429a      	cmp	r2, r3
20000762:	da02      	bge.n	2000076a <draw_line_from_points+0xaa>
        ystep = 1;
20000764:	2301      	movs	r3, #1
20000766:	623b      	str	r3, [r7, #32]
20000768:	e002      	b.n	20000770 <draw_line_from_points+0xb0>
    }else{
        ystep = -1;
2000076a:	2301      	movs	r3, #1
2000076c:	425b      	negs	r3, r3
2000076e:	623b      	str	r3, [r7, #32]
    }
    for(int x = x0; x < x1; x++){
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	61fb      	str	r3, [r7, #28]
20000774:	e025      	b.n	200007c2 <draw_line_from_points+0x102>
        if(steep){
20000776:	232f      	movs	r3, #47	; 0x2f
20000778:	18fb      	adds	r3, r7, r3
2000077a:	781b      	ldrb	r3, [r3, #0]
2000077c:	2b00      	cmp	r3, #0
2000077e:	d006      	beq.n	2000078e <draw_line_from_points+0xce>
            graphic_pixel_set(y,x);
20000780:	69fa      	ldr	r2, [r7, #28]
20000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000784:	0011      	movs	r1, r2
20000786:	0018      	movs	r0, r3
20000788:	f000 fc7f 	bl	2000108a <graphic_pixel_set>
2000078c:	e005      	b.n	2000079a <draw_line_from_points+0xda>
        }else{
            graphic_pixel_set(x,y);
2000078e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000790:	69fb      	ldr	r3, [r7, #28]
20000792:	0011      	movs	r1, r2
20000794:	0018      	movs	r0, r3
20000796:	f000 fc78 	bl	2000108a <graphic_pixel_set>
        }
        // graphic_pixel_set(x,y1);
        error = error+deltay;
2000079a:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000079c:	693b      	ldr	r3, [r7, #16]
2000079e:	18d3      	adds	r3, r2, r3
200007a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if(error* 2 >= deltax){
200007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200007a4:	005b      	lsls	r3, r3, #1
200007a6:	697a      	ldr	r2, [r7, #20]
200007a8:	429a      	cmp	r2, r3
200007aa:	dc07      	bgt.n	200007bc <draw_line_from_points+0xfc>
            y = y +ystep;
200007ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200007ae:	6a3b      	ldr	r3, [r7, #32]
200007b0:	18d3      	adds	r3, r2, r3
200007b2:	627b      	str	r3, [r7, #36]	; 0x24
            error = error-deltax;
200007b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
200007b6:	697b      	ldr	r3, [r7, #20]
200007b8:	1ad3      	subs	r3, r2, r3
200007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    for(int x = x0; x < x1; x++){
200007bc:	69fb      	ldr	r3, [r7, #28]
200007be:	3301      	adds	r3, #1
200007c0:	61fb      	str	r3, [r7, #28]
200007c2:	69fa      	ldr	r2, [r7, #28]
200007c4:	68bb      	ldr	r3, [r7, #8]
200007c6:	429a      	cmp	r2, r3
200007c8:	dbd5      	blt.n	20000776 <draw_line_from_points+0xb6>
        }
    }
}
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	46c0      	nop			; (mov r8, r8)
200007ce:	46bd      	mov	sp, r7
200007d0:	b00c      	add	sp, #48	; 0x30
200007d2:	bd80      	pop	{r7, pc}

200007d4 <display_line>:

char display_line(LINE line){
200007d4:	b580      	push	{r7, lr}
200007d6:	b086      	sub	sp, #24
200007d8:	af00      	add	r7, sp, #0
200007da:	1d3b      	adds	r3, r7, #4
200007dc:	6018      	str	r0, [r3, #0]
        int x0 = line.p1.x;
200007de:	1d3b      	adds	r3, r7, #4
200007e0:	781b      	ldrb	r3, [r3, #0]
200007e2:	617b      	str	r3, [r7, #20]
        int x1 = line.p2.x;
200007e4:	1d3b      	adds	r3, r7, #4
200007e6:	789b      	ldrb	r3, [r3, #2]
200007e8:	613b      	str	r3, [r7, #16]

        int y0 = line.p1.y;
200007ea:	1d3b      	adds	r3, r7, #4
200007ec:	785b      	ldrb	r3, [r3, #1]
200007ee:	60fb      	str	r3, [r7, #12]
        int y1 = line.p2.y;
200007f0:	1d3b      	adds	r3, r7, #4
200007f2:	78db      	ldrb	r3, [r3, #3]
200007f4:	60bb      	str	r3, [r7, #8]
    if(y0<= 64 && y1 <= 64){
200007f6:	68fb      	ldr	r3, [r7, #12]
200007f8:	2b40      	cmp	r3, #64	; 0x40
200007fa:	dc0a      	bgt.n	20000812 <display_line+0x3e>
200007fc:	68bb      	ldr	r3, [r7, #8]
200007fe:	2b40      	cmp	r3, #64	; 0x40
20000800:	dc07      	bgt.n	20000812 <display_line+0x3e>
        draw_line_from_points(x0,x1, y0, y1);
20000802:	68bb      	ldr	r3, [r7, #8]
20000804:	68fa      	ldr	r2, [r7, #12]
20000806:	6939      	ldr	r1, [r7, #16]
20000808:	6978      	ldr	r0, [r7, #20]
2000080a:	f7ff ff59 	bl	200006c0 <draw_line_from_points>
        return 1;
2000080e:	2301      	movs	r3, #1
20000810:	e000      	b.n	20000814 <display_line+0x40>
    }
    return 0;    
20000812:	2300      	movs	r3, #0
}
20000814:	0018      	movs	r0, r3
20000816:	46bd      	mov	sp, r7
20000818:	b006      	add	sp, #24
2000081a:	bd80      	pop	{r7, pc}

2000081c <plot_rect>:


char plot_rect(RECT rect){
2000081c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000081e:	b087      	sub	sp, #28
20000820:	af00      	add	r7, sp, #0
20000822:	1d3b      	adds	r3, r7, #4
20000824:	6018      	str	r0, [r3, #0]
    POINT start;
    POINT end;
    POINT point = rect.p;
20000826:	240c      	movs	r4, #12
20000828:	193b      	adds	r3, r7, r4
2000082a:	1d3a      	adds	r2, r7, #4
2000082c:	8812      	ldrh	r2, [r2, #0]
2000082e:	801a      	strh	r2, [r3, #0]
    char x = rect.x;
20000830:	2017      	movs	r0, #23
20000832:	183b      	adds	r3, r7, r0
20000834:	1d3a      	adds	r2, r7, #4
20000836:	7892      	ldrb	r2, [r2, #2]
20000838:	701a      	strb	r2, [r3, #0]
    char y = rect.y;
2000083a:	2516      	movs	r5, #22
2000083c:	197b      	adds	r3, r7, r5
2000083e:	1d3a      	adds	r2, r7, #4
20000840:	78d2      	ldrb	r2, [r2, #3]
20000842:	701a      	strb	r2, [r3, #0]
    LINE line;
    
    start.x = point.x; start.y = point.y; end.x = point.x + x; end.y = point.y ; line.p1 = start; line.p2 = end; display_line(line);
20000844:	193b      	adds	r3, r7, r4
20000846:	781a      	ldrb	r2, [r3, #0]
20000848:	2114      	movs	r1, #20
2000084a:	187b      	adds	r3, r7, r1
2000084c:	701a      	strb	r2, [r3, #0]
2000084e:	193b      	adds	r3, r7, r4
20000850:	785a      	ldrb	r2, [r3, #1]
20000852:	187b      	adds	r3, r7, r1
20000854:	705a      	strb	r2, [r3, #1]
20000856:	193b      	adds	r3, r7, r4
20000858:	781a      	ldrb	r2, [r3, #0]
2000085a:	183b      	adds	r3, r7, r0
2000085c:	781b      	ldrb	r3, [r3, #0]
2000085e:	18d3      	adds	r3, r2, r3
20000860:	b2da      	uxtb	r2, r3
20000862:	2610      	movs	r6, #16
20000864:	19bb      	adds	r3, r7, r6
20000866:	701a      	strb	r2, [r3, #0]
20000868:	193b      	adds	r3, r7, r4
2000086a:	785a      	ldrb	r2, [r3, #1]
2000086c:	19bb      	adds	r3, r7, r6
2000086e:	705a      	strb	r2, [r3, #1]
20000870:	2008      	movs	r0, #8
20000872:	183b      	adds	r3, r7, r0
20000874:	000d      	movs	r5, r1
20000876:	187a      	adds	r2, r7, r1
20000878:	8812      	ldrh	r2, [r2, #0]
2000087a:	801a      	strh	r2, [r3, #0]
2000087c:	183b      	adds	r3, r7, r0
2000087e:	2102      	movs	r1, #2
20000880:	19ba      	adds	r2, r7, r6
20000882:	8812      	ldrh	r2, [r2, #0]
20000884:	525a      	strh	r2, [r3, r1]
20000886:	183b      	adds	r3, r7, r0
20000888:	6818      	ldr	r0, [r3, #0]
2000088a:	f7ff ffa3 	bl	200007d4 <display_line>
    start.x = point.x + x; start.y = point.y; end.x = start.x; end.y = point.y + y; line.p1 = start; line.p2 = end; display_line(line);
2000088e:	193b      	adds	r3, r7, r4
20000890:	781a      	ldrb	r2, [r3, #0]
20000892:	2317      	movs	r3, #23
20000894:	18fb      	adds	r3, r7, r3
20000896:	781b      	ldrb	r3, [r3, #0]
20000898:	18d3      	adds	r3, r2, r3
2000089a:	b2da      	uxtb	r2, r3
2000089c:	197b      	adds	r3, r7, r5
2000089e:	701a      	strb	r2, [r3, #0]
200008a0:	193b      	adds	r3, r7, r4
200008a2:	785a      	ldrb	r2, [r3, #1]
200008a4:	197b      	adds	r3, r7, r5
200008a6:	705a      	strb	r2, [r3, #1]
200008a8:	0029      	movs	r1, r5
200008aa:	197b      	adds	r3, r7, r5
200008ac:	781a      	ldrb	r2, [r3, #0]
200008ae:	19bb      	adds	r3, r7, r6
200008b0:	701a      	strb	r2, [r3, #0]
200008b2:	193b      	adds	r3, r7, r4
200008b4:	785a      	ldrb	r2, [r3, #1]
200008b6:	2516      	movs	r5, #22
200008b8:	197b      	adds	r3, r7, r5
200008ba:	781b      	ldrb	r3, [r3, #0]
200008bc:	18d3      	adds	r3, r2, r3
200008be:	b2da      	uxtb	r2, r3
200008c0:	19bb      	adds	r3, r7, r6
200008c2:	705a      	strb	r2, [r3, #1]
200008c4:	2008      	movs	r0, #8
200008c6:	183b      	adds	r3, r7, r0
200008c8:	000d      	movs	r5, r1
200008ca:	187a      	adds	r2, r7, r1
200008cc:	8812      	ldrh	r2, [r2, #0]
200008ce:	801a      	strh	r2, [r3, #0]
200008d0:	183b      	adds	r3, r7, r0
200008d2:	2102      	movs	r1, #2
200008d4:	19ba      	adds	r2, r7, r6
200008d6:	8812      	ldrh	r2, [r2, #0]
200008d8:	525a      	strh	r2, [r3, r1]
200008da:	183b      	adds	r3, r7, r0
200008dc:	6818      	ldr	r0, [r3, #0]
200008de:	f7ff ff79 	bl	200007d4 <display_line>
    start.x = point.x + x; start.y = point.y+y; end.x = point.x; end.y = point.y + y; line.p1 = start; line.p2 = end; display_line(line );
200008e2:	193b      	adds	r3, r7, r4
200008e4:	781a      	ldrb	r2, [r3, #0]
200008e6:	2317      	movs	r3, #23
200008e8:	18fb      	adds	r3, r7, r3
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	18d3      	adds	r3, r2, r3
200008ee:	b2da      	uxtb	r2, r3
200008f0:	0029      	movs	r1, r5
200008f2:	187b      	adds	r3, r7, r1
200008f4:	701a      	strb	r2, [r3, #0]
200008f6:	193b      	adds	r3, r7, r4
200008f8:	785a      	ldrb	r2, [r3, #1]
200008fa:	2516      	movs	r5, #22
200008fc:	197b      	adds	r3, r7, r5
200008fe:	781b      	ldrb	r3, [r3, #0]
20000900:	18d3      	adds	r3, r2, r3
20000902:	b2da      	uxtb	r2, r3
20000904:	187b      	adds	r3, r7, r1
20000906:	705a      	strb	r2, [r3, #1]
20000908:	193b      	adds	r3, r7, r4
2000090a:	781a      	ldrb	r2, [r3, #0]
2000090c:	19bb      	adds	r3, r7, r6
2000090e:	701a      	strb	r2, [r3, #0]
20000910:	193b      	adds	r3, r7, r4
20000912:	785a      	ldrb	r2, [r3, #1]
20000914:	197b      	adds	r3, r7, r5
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	18d3      	adds	r3, r2, r3
2000091a:	b2da      	uxtb	r2, r3
2000091c:	19bb      	adds	r3, r7, r6
2000091e:	705a      	strb	r2, [r3, #1]
20000920:	2008      	movs	r0, #8
20000922:	183b      	adds	r3, r7, r0
20000924:	000d      	movs	r5, r1
20000926:	187a      	adds	r2, r7, r1
20000928:	8812      	ldrh	r2, [r2, #0]
2000092a:	801a      	strh	r2, [r3, #0]
2000092c:	183b      	adds	r3, r7, r0
2000092e:	2102      	movs	r1, #2
20000930:	19ba      	adds	r2, r7, r6
20000932:	8812      	ldrh	r2, [r2, #0]
20000934:	525a      	strh	r2, [r3, r1]
20000936:	183b      	adds	r3, r7, r0
20000938:	6818      	ldr	r0, [r3, #0]
2000093a:	f7ff ff4b 	bl	200007d4 <display_line>
    return start.x = point.x ; start.y = point.y+y; end.x = point.x; end.y = point.y; line.p1 = start; line.p2 = end; display_line(line);
2000093e:	193b      	adds	r3, r7, r4
20000940:	781a      	ldrb	r2, [r3, #0]
20000942:	197b      	adds	r3, r7, r5
20000944:	701a      	strb	r2, [r3, #0]
20000946:	197b      	adds	r3, r7, r5
20000948:	781b      	ldrb	r3, [r3, #0]
}
2000094a:	0018      	movs	r0, r3
2000094c:	46bd      	mov	sp, r7
2000094e:	b007      	add	sp, #28
20000950:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000952 <plot_polygon>:

char plot_polygon(POLYPOINT polygon1){
20000952:	b5f0      	push	{r4, r5, r6, r7, lr}
20000954:	b087      	sub	sp, #28
20000956:	af00      	add	r7, sp, #0
20000958:	003b      	movs	r3, r7
2000095a:	6018      	str	r0, [r3, #0]
2000095c:	6059      	str	r1, [r3, #4]
    POINT p0;
    POINT p1;
    p0.x = polygon1.x; p0.y = polygon1.y;
2000095e:	003b      	movs	r3, r7
20000960:	781a      	ldrb	r2, [r3, #0]
20000962:	2110      	movs	r1, #16
20000964:	187b      	adds	r3, r7, r1
20000966:	701a      	strb	r2, [r3, #0]
20000968:	003b      	movs	r3, r7
2000096a:	785a      	ldrb	r2, [r3, #1]
2000096c:	187b      	adds	r3, r7, r1
2000096e:	705a      	strb	r2, [r3, #1]
    struct polygonpoint *ptr = polygon1.next;
20000970:	003b      	movs	r3, r7
20000972:	685b      	ldr	r3, [r3, #4]
20000974:	617b      	str	r3, [r7, #20]
    while(ptr != 0){
20000976:	e024      	b.n	200009c2 <plot_polygon+0x70>
        p1.x =   ptr->x;
20000978:	697b      	ldr	r3, [r7, #20]
2000097a:	781a      	ldrb	r2, [r3, #0]
2000097c:	200c      	movs	r0, #12
2000097e:	183b      	adds	r3, r7, r0
20000980:	701a      	strb	r2, [r3, #0]
        p1.y = ptr->y;
20000982:	697b      	ldr	r3, [r7, #20]
20000984:	785a      	ldrb	r2, [r3, #1]
20000986:	183b      	adds	r3, r7, r0
20000988:	705a      	strb	r2, [r3, #1]
        LINE line =  {p0,p1};
2000098a:	2508      	movs	r5, #8
2000098c:	197b      	adds	r3, r7, r5
2000098e:	2610      	movs	r6, #16
20000990:	19ba      	adds	r2, r7, r6
20000992:	8812      	ldrh	r2, [r2, #0]
20000994:	801a      	strh	r2, [r3, #0]
20000996:	197b      	adds	r3, r7, r5
20000998:	2102      	movs	r1, #2
2000099a:	0004      	movs	r4, r0
2000099c:	183a      	adds	r2, r7, r0
2000099e:	8812      	ldrh	r2, [r2, #0]
200009a0:	525a      	strh	r2, [r3, r1]
        display_line(line);
200009a2:	197b      	adds	r3, r7, r5
200009a4:	6818      	ldr	r0, [r3, #0]
200009a6:	f7ff ff15 	bl	200007d4 <display_line>
        p0.x = p1.x;
200009aa:	0020      	movs	r0, r4
200009ac:	183b      	adds	r3, r7, r0
200009ae:	781a      	ldrb	r2, [r3, #0]
200009b0:	19bb      	adds	r3, r7, r6
200009b2:	701a      	strb	r2, [r3, #0]
        p0.y = p1.y;
200009b4:	183b      	adds	r3, r7, r0
200009b6:	785a      	ldrb	r2, [r3, #1]
200009b8:	19bb      	adds	r3, r7, r6
200009ba:	705a      	strb	r2, [r3, #1]
        ptr = ptr->next;
200009bc:	697b      	ldr	r3, [r7, #20]
200009be:	685b      	ldr	r3, [r3, #4]
200009c0:	617b      	str	r3, [r7, #20]
    while(ptr != 0){
200009c2:	697b      	ldr	r3, [r7, #20]
200009c4:	2b00      	cmp	r3, #0
200009c6:	d1d7      	bne.n	20000978 <plot_polygon+0x26>

    }
    return 1;
200009c8:	2301      	movs	r3, #1


}
200009ca:	0018      	movs	r0, r3
200009cc:	46bd      	mov	sp, r7
200009ce:	b007      	add	sp, #28
200009d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

200009d4 <activateRow>:





void activateRow(int row){
200009d4:	b580      	push	{r7, lr}
200009d6:	b082      	sub	sp, #8
200009d8:	af00      	add	r7, sp, #0
200009da:	6078      	str	r0, [r7, #4]

    switch (row) {
200009dc:	687b      	ldr	r3, [r7, #4]
200009de:	2b04      	cmp	r3, #4
200009e0:	d01b      	beq.n	20000a1a <activateRow+0x46>
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	2b04      	cmp	r3, #4
200009e6:	dc1c      	bgt.n	20000a22 <activateRow+0x4e>
200009e8:	687b      	ldr	r3, [r7, #4]
200009ea:	2b03      	cmp	r3, #3
200009ec:	d011      	beq.n	20000a12 <activateRow+0x3e>
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	2b03      	cmp	r3, #3
200009f2:	dc16      	bgt.n	20000a22 <activateRow+0x4e>
200009f4:	687b      	ldr	r3, [r7, #4]
200009f6:	2b01      	cmp	r3, #1
200009f8:	d003      	beq.n	20000a02 <activateRow+0x2e>
200009fa:	687b      	ldr	r3, [r7, #4]
200009fc:	2b02      	cmp	r3, #2
200009fe:	d004      	beq.n	20000a0a <activateRow+0x36>
20000a00:	e00f      	b.n	20000a22 <activateRow+0x4e>
        case 1: *GPIO_D_ODR_HIGH= 0x10; break;
20000a02:	4b0c      	ldr	r3, [pc, #48]	; (20000a34 <activateRow+0x60>)
20000a04:	2210      	movs	r2, #16
20000a06:	701a      	strb	r2, [r3, #0]
20000a08:	e00f      	b.n	20000a2a <activateRow+0x56>
        case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000a0a:	4b0a      	ldr	r3, [pc, #40]	; (20000a34 <activateRow+0x60>)
20000a0c:	2220      	movs	r2, #32
20000a0e:	701a      	strb	r2, [r3, #0]
20000a10:	e00b      	b.n	20000a2a <activateRow+0x56>
        case 3: *GPIO_D_ODR_HIGH= 0x40; break;
20000a12:	4b08      	ldr	r3, [pc, #32]	; (20000a34 <activateRow+0x60>)
20000a14:	2240      	movs	r2, #64	; 0x40
20000a16:	701a      	strb	r2, [r3, #0]
20000a18:	e007      	b.n	20000a2a <activateRow+0x56>
        case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000a1a:	4b06      	ldr	r3, [pc, #24]	; (20000a34 <activateRow+0x60>)
20000a1c:	2280      	movs	r2, #128	; 0x80
20000a1e:	701a      	strb	r2, [r3, #0]
20000a20:	e003      	b.n	20000a2a <activateRow+0x56>
        default: *GPIO_D_ODR_HIGH = 0; break;
20000a22:	4b04      	ldr	r3, [pc, #16]	; (20000a34 <activateRow+0x60>)
20000a24:	2200      	movs	r2, #0
20000a26:	701a      	strb	r2, [r3, #0]
20000a28:	46c0      	nop			; (mov r8, r8)

 }
}
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	46bd      	mov	sp, r7
20000a2e:	b002      	add	sp, #8
20000a30:	bd80      	pop	{r7, pc}
20000a32:	46c0      	nop			; (mov r8, r8)
20000a34:	40020c15 	andmi	r0, r2, r5, lsl ip

20000a38 <readColumn>:

int  readColumn(void){
20000a38:	b580      	push	{r7, lr}
20000a3a:	b082      	sub	sp, #8
20000a3c:	af00      	add	r7, sp, #0

	*GPIO_D_MODER = 0x55005555;
20000a3e:	4b14      	ldr	r3, [pc, #80]	; (20000a90 <readColumn+0x58>)
20000a40:	4a14      	ldr	r2, [pc, #80]	; (20000a94 <readColumn+0x5c>)
20000a42:	601a      	str	r2, [r3, #0]
    char c =  *GPIO_D_IDR_HIGH;
20000a44:	4a14      	ldr	r2, [pc, #80]	; (20000a98 <readColumn+0x60>)
20000a46:	1dfb      	adds	r3, r7, #7
20000a48:	7812      	ldrb	r2, [r2, #0]
20000a4a:	701a      	strb	r2, [r3, #0]
    if(c & 8){
20000a4c:	1dfb      	adds	r3, r7, #7
20000a4e:	781b      	ldrb	r3, [r3, #0]
20000a50:	2208      	movs	r2, #8
20000a52:	4013      	ands	r3, r2
20000a54:	d001      	beq.n	20000a5a <readColumn+0x22>
        return 4;
20000a56:	2304      	movs	r3, #4
20000a58:	e015      	b.n	20000a86 <readColumn+0x4e>
    }
    if(c & 4){
20000a5a:	1dfb      	adds	r3, r7, #7
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	2204      	movs	r2, #4
20000a60:	4013      	ands	r3, r2
20000a62:	d001      	beq.n	20000a68 <readColumn+0x30>
        return 3;
20000a64:	2303      	movs	r3, #3
20000a66:	e00e      	b.n	20000a86 <readColumn+0x4e>
    }
    if(c & 2){
20000a68:	1dfb      	adds	r3, r7, #7
20000a6a:	781b      	ldrb	r3, [r3, #0]
20000a6c:	2202      	movs	r2, #2
20000a6e:	4013      	ands	r3, r2
20000a70:	d001      	beq.n	20000a76 <readColumn+0x3e>
        return 2;
20000a72:	2302      	movs	r3, #2
20000a74:	e007      	b.n	20000a86 <readColumn+0x4e>
    }
    if(c & 1){
20000a76:	1dfb      	adds	r3, r7, #7
20000a78:	781b      	ldrb	r3, [r3, #0]
20000a7a:	2201      	movs	r2, #1
20000a7c:	4013      	ands	r3, r2
20000a7e:	d001      	beq.n	20000a84 <readColumn+0x4c>
        return 1;
20000a80:	2301      	movs	r3, #1
20000a82:	e000      	b.n	20000a86 <readColumn+0x4e>
    }
    return 0;
20000a84:	2300      	movs	r3, #0
}
20000a86:	0018      	movs	r0, r3
20000a88:	46bd      	mov	sp, r7
20000a8a:	b002      	add	sp, #8
20000a8c:	bd80      	pop	{r7, pc}
20000a8e:	46c0      	nop			; (mov r8, r8)
20000a90:	40020c00 	andmi	r0, r2, r0, lsl #24
20000a94:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000a98:	40020c11 	andmi	r0, r2, r1, lsl ip

20000a9c <initKeyb>:

void initKeyb(void){
20000a9c:	b580      	push	{r7, lr}
20000a9e:	af00      	add	r7, sp, #0
        //init init pupd 
       
        *GPIO_D_PUPDR = 0x00AA0000;
20000aa0:	4b09      	ldr	r3, [pc, #36]	; (20000ac8 <initKeyb+0x2c>)
20000aa2:	22aa      	movs	r2, #170	; 0xaa
20000aa4:	0412      	lsls	r2, r2, #16
20000aa6:	601a      	str	r2, [r3, #0]
        // sets otr
       
        *GPIO_D_OTYPER = 0x0;
20000aa8:	4b08      	ldr	r3, [pc, #32]	; (20000acc <initKeyb+0x30>)
20000aaa:	2200      	movs	r2, #0
20000aac:	801a      	strh	r2, [r3, #0]
        
        *GPIO_D_OSPEEDR = 0xffffffff;
20000aae:	4b08      	ldr	r3, [pc, #32]	; (20000ad0 <initKeyb+0x34>)
20000ab0:	2201      	movs	r2, #1
20000ab2:	4252      	negs	r2, r2
20000ab4:	601a      	str	r2, [r3, #0]

            //starts clocks for debug board
    *((unsigned long *) 0x40023830) = 0x18;
20000ab6:	4b07      	ldr	r3, [pc, #28]	; (20000ad4 <initKeyb+0x38>)
20000ab8:	2218      	movs	r2, #24
20000aba:	601a      	str	r2, [r3, #0]
    
	*GPIO_D_MODER = 0x55005555;
20000abc:	4b06      	ldr	r3, [pc, #24]	; (20000ad8 <initKeyb+0x3c>)
20000abe:	4a07      	ldr	r2, [pc, #28]	; (20000adc <initKeyb+0x40>)
20000ac0:	601a      	str	r2, [r3, #0]
}
20000ac2:	46c0      	nop			; (mov r8, r8)
20000ac4:	46bd      	mov	sp, r7
20000ac6:	bd80      	pop	{r7, pc}
20000ac8:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000acc:	40020c04 	andmi	r0, r2, r4, lsl #24
20000ad0:	40020c08 	andmi	r0, r2, r8, lsl #24
20000ad4:	40023830 	andmi	r3, r2, r0, lsr r8
20000ad8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000adc:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000ae0 <return_pressed_key>:
unsigned char return_pressed_key(void)
{
20000ae0:	b590      	push	{r4, r7, lr}
20000ae2:	b089      	sub	sp, #36	; 0x24
20000ae4:	af00      	add	r7, sp, #0

    int temp = *GPIO_D_MODER;
20000ae6:	4b1a      	ldr	r3, [pc, #104]	; (20000b50 <return_pressed_key+0x70>)
20000ae8:	681b      	ldr	r3, [r3, #0]
20000aea:	61bb      	str	r3, [r7, #24]

    initKeyb();
20000aec:	f7ff ffd6 	bl	20000a9c <initKeyb>
    char key[] = 
20000af0:	1d3b      	adds	r3, r7, #4
20000af2:	4a18      	ldr	r2, [pc, #96]	; (20000b54 <return_pressed_key+0x74>)
20000af4:	ca13      	ldmia	r2!, {r0, r1, r4}
20000af6:	c313      	stmia	r3!, {r0, r1, r4}
20000af8:	6812      	ldr	r2, [r2, #0]
20000afa:	601a      	str	r2, [r3, #0]
    {1,2,3,0xa,4,5,6,0xb,7,8,9,0xc,0xe,0,0xf,0xd};
    int column;
    for (int row = 1 ; row <= 4; row++){
20000afc:	2301      	movs	r3, #1
20000afe:	61fb      	str	r3, [r7, #28]
20000b00:	e01a      	b.n	20000b38 <return_pressed_key+0x58>
        activateRow(row);
20000b02:	69fb      	ldr	r3, [r7, #28]
20000b04:	0018      	movs	r0, r3
20000b06:	f7ff ff65 	bl	200009d4 <activateRow>
        column = readColumn();
20000b0a:	f7ff ff95 	bl	20000a38 <readColumn>
20000b0e:	0003      	movs	r3, r0
20000b10:	617b      	str	r3, [r7, #20]
        if (column != 0){
20000b12:	697b      	ldr	r3, [r7, #20]
20000b14:	2b00      	cmp	r3, #0
20000b16:	d00c      	beq.n	20000b32 <return_pressed_key+0x52>
            activateRow(600000000);
20000b18:	4b0f      	ldr	r3, [pc, #60]	; (20000b58 <return_pressed_key+0x78>)
20000b1a:	0018      	movs	r0, r3
20000b1c:	f7ff ff5a 	bl	200009d4 <activateRow>
            return key [4*(row-1)+(column-1)];
20000b20:	69fb      	ldr	r3, [r7, #28]
20000b22:	3b01      	subs	r3, #1
20000b24:	009a      	lsls	r2, r3, #2
20000b26:	697b      	ldr	r3, [r7, #20]
20000b28:	3b01      	subs	r3, #1
20000b2a:	18d3      	adds	r3, r2, r3
20000b2c:	1d3a      	adds	r2, r7, #4
20000b2e:	5cd3      	ldrb	r3, [r2, r3]
20000b30:	e009      	b.n	20000b46 <return_pressed_key+0x66>
    for (int row = 1 ; row <= 4; row++){
20000b32:	69fb      	ldr	r3, [r7, #28]
20000b34:	3301      	adds	r3, #1
20000b36:	61fb      	str	r3, [r7, #28]
20000b38:	69fb      	ldr	r3, [r7, #28]
20000b3a:	2b04      	cmp	r3, #4
20000b3c:	dde1      	ble.n	20000b02 <return_pressed_key+0x22>
        }
    }

    *GPIO_D_MODER = temp;
20000b3e:	4b04      	ldr	r3, [pc, #16]	; (20000b50 <return_pressed_key+0x70>)
20000b40:	69ba      	ldr	r2, [r7, #24]
20000b42:	601a      	str	r2, [r3, #0]
    return  0xFF; 
20000b44:	23ff      	movs	r3, #255	; 0xff
}
20000b46:	0018      	movs	r0, r3
20000b48:	46bd      	mov	sp, r7
20000b4a:	b009      	add	sp, #36	; 0x24
20000b4c:	bd90      	pop	{r4, r7, pc}
20000b4e:	46c0      	nop			; (mov r8, r8)
20000b50:	40020c00 	andmi	r0, r2, r0, lsl #24
20000b54:	20001368 	andcs	r1, r0, r8, ror #6
20000b58:	23c34600 	biccs	r4, r3, #0, 12

20000b5c <out7seg>:




void out7seg( unsigned char c){
20000b5c:	b5b0      	push	{r4, r5, r7, lr}
20000b5e:	b086      	sub	sp, #24
20000b60:	af00      	add	r7, sp, #0
20000b62:	0002      	movs	r2, r0
20000b64:	1dfb      	adds	r3, r7, #7
20000b66:	701a      	strb	r2, [r3, #0]
    // siiIIick table for convertiong to 7 segment codes
    char outputTable[] = {
20000b68:	2008      	movs	r0, #8
20000b6a:	183b      	adds	r3, r7, r0
20000b6c:	4a0b      	ldr	r2, [pc, #44]	; (20000b9c <out7seg+0x40>)
20000b6e:	ca32      	ldmia	r2!, {r1, r4, r5}
20000b70:	c332      	stmia	r3!, {r1, r4, r5}
20000b72:	6812      	ldr	r2, [r2, #0]
20000b74:	601a      	str	r2, [r3, #0]
	0x7C, 
	0x39, 
    0x5E, 
    0x7E, 
    0x21};
 if(c < 15){
20000b76:	1dfb      	adds	r3, r7, #7
20000b78:	781b      	ldrb	r3, [r3, #0]
20000b7a:	2b0e      	cmp	r3, #14
20000b7c:	d806      	bhi.n	20000b8c <out7seg+0x30>
    *GPIO_D_ODR_LOW = outputTable[c];
20000b7e:	1dfb      	adds	r3, r7, #7
20000b80:	781b      	ldrb	r3, [r3, #0]
20000b82:	4907      	ldr	r1, [pc, #28]	; (20000ba0 <out7seg+0x44>)
20000b84:	183a      	adds	r2, r7, r0
20000b86:	5cd3      	ldrb	r3, [r2, r3]
20000b88:	700b      	strb	r3, [r1, #0]
 }
 else{ 
    *GPIO_D_ODR_LOW = 0;
 }
}
20000b8a:	e002      	b.n	20000b92 <out7seg+0x36>
    *GPIO_D_ODR_LOW = 0;
20000b8c:	4b04      	ldr	r3, [pc, #16]	; (20000ba0 <out7seg+0x44>)
20000b8e:	2200      	movs	r2, #0
20000b90:	701a      	strb	r2, [r3, #0]
}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	46bd      	mov	sp, r7
20000b96:	b006      	add	sp, #24
20000b98:	bdb0      	pop	{r4, r5, r7, pc}
20000b9a:	46c0      	nop			; (mov r8, r8)
20000b9c:	20001378 	andcs	r1, r0, r8, ror r3
20000ba0:	40020c14 	andmi	r0, r2, r4, lsl ip

20000ba4 <collision>:
char points_player2 = 0;
char winning_score = 5;
char* winner_name;
// char timer_flag = 0;

char collision(POBJECT object1, POBJECT object2){
20000ba4:	b084      	sub	sp, #16
20000ba6:	b5b0      	push	{r4, r5, r7, lr}
20000ba8:	b082      	sub	sp, #8
20000baa:	af00      	add	r7, sp, #0
20000bac:	2518      	movs	r5, #24
20000bae:	197c      	adds	r4, r7, r5
20000bb0:	6020      	str	r0, [r4, #0]
20000bb2:	6061      	str	r1, [r4, #4]
20000bb4:	60a2      	str	r2, [r4, #8]
20000bb6:	60e3      	str	r3, [r4, #12]
	int deltax = abs(object1.posx - object2.posx);
20000bb8:	0029      	movs	r1, r5
20000bba:	187b      	adds	r3, r7, r1
20000bbc:	68da      	ldr	r2, [r3, #12]
20000bbe:	2324      	movs	r3, #36	; 0x24
20000bc0:	185b      	adds	r3, r3, r1
20000bc2:	19db      	adds	r3, r3, r7
20000bc4:	68db      	ldr	r3, [r3, #12]
20000bc6:	1ad3      	subs	r3, r2, r3
20000bc8:	17da      	asrs	r2, r3, #31
20000bca:	189b      	adds	r3, r3, r2
20000bcc:	4053      	eors	r3, r2
20000bce:	607b      	str	r3, [r7, #4]
	int deltay = abs(object1.posy - object2.posy);
20000bd0:	187b      	adds	r3, r7, r1
20000bd2:	691a      	ldr	r2, [r3, #16]
20000bd4:	2324      	movs	r3, #36	; 0x24
20000bd6:	185b      	adds	r3, r3, r1
20000bd8:	19db      	adds	r3, r3, r7
20000bda:	691b      	ldr	r3, [r3, #16]
20000bdc:	1ad3      	subs	r3, r2, r3
20000bde:	17da      	asrs	r2, r3, #31
20000be0:	189b      	adds	r3, r3, r2
20000be2:	4053      	eors	r3, r2
20000be4:	603b      	str	r3, [r7, #0]
	if(deltax<5 && deltay<9){
20000be6:	687b      	ldr	r3, [r7, #4]
20000be8:	2b04      	cmp	r3, #4
20000bea:	dc04      	bgt.n	20000bf6 <collision+0x52>
20000bec:	683b      	ldr	r3, [r7, #0]
20000bee:	2b08      	cmp	r3, #8
20000bf0:	dc01      	bgt.n	20000bf6 <collision+0x52>
		return 1;
20000bf2:	2301      	movs	r3, #1
20000bf4:	e000      	b.n	20000bf8 <collision+0x54>
	}
	return 0;
20000bf6:	2300      	movs	r3, #0
}
20000bf8:	0018      	movs	r0, r3
20000bfa:	46bd      	mov	sp, r7
20000bfc:	b002      	add	sp, #8
20000bfe:	bcb0      	pop	{r4, r5, r7}
20000c00:	bc08      	pop	{r3}
20000c02:	b004      	add	sp, #16
20000c04:	4718      	bx	r3

20000c06 <winning_routine>:

void winning_routine(){
20000c06:	b580      	push	{r7, lr}
20000c08:	b082      	sub	sp, #8
20000c0a:	af00      	add	r7, sp, #0
	char *s = "The epic winner is: ";
20000c0c:	4b18      	ldr	r3, [pc, #96]	; (20000c70 <winning_routine+0x6a>)
20000c0e:	607b      	str	r3, [r7, #4]
	ascii_clear_screen();
20000c10:	f7ff fb29 	bl	20000266 <ascii_clear_screen>
	graphic_clear_screen();
20000c14:	f000 fa36 	bl	20001084 <graphic_clear_screen>
	ascii_gotoxy(1,1);
20000c18:	2101      	movs	r1, #1
20000c1a:	2001      	movs	r0, #1
20000c1c:	f7ff fb2b 	bl	20000276 <ascii_gotoxy>
	while(*s != 0){
20000c20:	e007      	b.n	20000c32 <winning_routine+0x2c>
		ascii_write_char(*s);
20000c22:	687b      	ldr	r3, [r7, #4]
20000c24:	781b      	ldrb	r3, [r3, #0]
20000c26:	0018      	movs	r0, r3
20000c28:	f7ff faf1 	bl	2000020e <ascii_write_char>
		s++;
20000c2c:	687b      	ldr	r3, [r7, #4]
20000c2e:	3301      	adds	r3, #1
20000c30:	607b      	str	r3, [r7, #4]
	while(*s != 0){
20000c32:	687b      	ldr	r3, [r7, #4]
20000c34:	781b      	ldrb	r3, [r3, #0]
20000c36:	2b00      	cmp	r3, #0
20000c38:	d1f3      	bne.n	20000c22 <winning_routine+0x1c>
	}
	ascii_gotoxy(1,2);
20000c3a:	2102      	movs	r1, #2
20000c3c:	2001      	movs	r0, #1
20000c3e:	f7ff fb1a 	bl	20000276 <ascii_gotoxy>
	while(*winner_name != 0){
20000c42:	e00a      	b.n	20000c5a <winning_routine+0x54>
		ascii_write_char(*winner_name);
20000c44:	4b0b      	ldr	r3, [pc, #44]	; (20000c74 <winning_routine+0x6e>)
20000c46:	681b      	ldr	r3, [r3, #0]
20000c48:	781b      	ldrb	r3, [r3, #0]
20000c4a:	0018      	movs	r0, r3
20000c4c:	f7ff fadf 	bl	2000020e <ascii_write_char>
		winner_name++;
20000c50:	4b08      	ldr	r3, [pc, #32]	; (20000c74 <winning_routine+0x6e>)
20000c52:	681b      	ldr	r3, [r3, #0]
20000c54:	1c5a      	adds	r2, r3, #1
20000c56:	4b07      	ldr	r3, [pc, #28]	; (20000c74 <winning_routine+0x6e>)
20000c58:	601a      	str	r2, [r3, #0]
	while(*winner_name != 0){
20000c5a:	4b06      	ldr	r3, [pc, #24]	; (20000c74 <winning_routine+0x6e>)
20000c5c:	681b      	ldr	r3, [r3, #0]
20000c5e:	781b      	ldrb	r3, [r3, #0]
20000c60:	2b00      	cmp	r3, #0
20000c62:	d1ef      	bne.n	20000c44 <winning_routine+0x3e>
	}
}
20000c64:	46c0      	nop			; (mov r8, r8)
20000c66:	46c0      	nop			; (mov r8, r8)
20000c68:	46bd      	mov	sp, r7
20000c6a:	b002      	add	sp, #8
20000c6c:	bd80      	pop	{r7, pc}
20000c6e:	46c0      	nop			; (mov r8, r8)
20000c70:	20001388 	andcs	r1, r0, r8, lsl #7
20000c74:	200012bc 			; <UNDEFINED> instruction: 0x200012bc

20000c78 <print_scores>:

void print_scores(){
20000c78:	b580      	push	{r7, lr}
20000c7a:	b082      	sub	sp, #8
20000c7c:	af00      	add	r7, sp, #0
	char * string_points_player1 = "P1: ";
20000c7e:	4b1c      	ldr	r3, [pc, #112]	; (20000cf0 <print_scores+0x78>)
20000c80:	607b      	str	r3, [r7, #4]
	char * string_points_player2 = "P2: ";
20000c82:	4b1c      	ldr	r3, [pc, #112]	; (20000cf4 <print_scores+0x7c>)
20000c84:	603b      	str	r3, [r7, #0]

	ascii_gotoxy(1,1);
20000c86:	2101      	movs	r1, #1
20000c88:	2001      	movs	r0, #1
20000c8a:	f7ff faf4 	bl	20000276 <ascii_gotoxy>
	while (*string_points_player1 != 0) {
20000c8e:	e007      	b.n	20000ca0 <print_scores+0x28>
		ascii_write_char(*string_points_player1);
20000c90:	687b      	ldr	r3, [r7, #4]
20000c92:	781b      	ldrb	r3, [r3, #0]
20000c94:	0018      	movs	r0, r3
20000c96:	f7ff faba 	bl	2000020e <ascii_write_char>
		string_points_player1++;
20000c9a:	687b      	ldr	r3, [r7, #4]
20000c9c:	3301      	adds	r3, #1
20000c9e:	607b      	str	r3, [r7, #4]
	while (*string_points_player1 != 0) {
20000ca0:	687b      	ldr	r3, [r7, #4]
20000ca2:	781b      	ldrb	r3, [r3, #0]
20000ca4:	2b00      	cmp	r3, #0
20000ca6:	d1f3      	bne.n	20000c90 <print_scores+0x18>
	}
	ascii_write_char(points_player1+0x30);
20000ca8:	4b13      	ldr	r3, [pc, #76]	; (20000cf8 <print_scores+0x80>)
20000caa:	781b      	ldrb	r3, [r3, #0]
20000cac:	3330      	adds	r3, #48	; 0x30
20000cae:	b2db      	uxtb	r3, r3
20000cb0:	0018      	movs	r0, r3
20000cb2:	f7ff faac 	bl	2000020e <ascii_write_char>

	ascii_gotoxy(8,1);
20000cb6:	2101      	movs	r1, #1
20000cb8:	2008      	movs	r0, #8
20000cba:	f7ff fadc 	bl	20000276 <ascii_gotoxy>
	while(*string_points_player2 != 0){
20000cbe:	e007      	b.n	20000cd0 <print_scores+0x58>
		ascii_write_char(*string_points_player2);
20000cc0:	683b      	ldr	r3, [r7, #0]
20000cc2:	781b      	ldrb	r3, [r3, #0]
20000cc4:	0018      	movs	r0, r3
20000cc6:	f7ff faa2 	bl	2000020e <ascii_write_char>
		string_points_player2++;
20000cca:	683b      	ldr	r3, [r7, #0]
20000ccc:	3301      	adds	r3, #1
20000cce:	603b      	str	r3, [r7, #0]
	while(*string_points_player2 != 0){
20000cd0:	683b      	ldr	r3, [r7, #0]
20000cd2:	781b      	ldrb	r3, [r3, #0]
20000cd4:	2b00      	cmp	r3, #0
20000cd6:	d1f3      	bne.n	20000cc0 <print_scores+0x48>
	}
	ascii_write_char(points_player2+0x30);
20000cd8:	4b08      	ldr	r3, [pc, #32]	; (20000cfc <print_scores+0x84>)
20000cda:	781b      	ldrb	r3, [r3, #0]
20000cdc:	3330      	adds	r3, #48	; 0x30
20000cde:	b2db      	uxtb	r3, r3
20000ce0:	0018      	movs	r0, r3
20000ce2:	f7ff fa94 	bl	2000020e <ascii_write_char>

	// ascii_write_text_at(points_player1, 1, 1);
	// ascii_write_text_at(string_points_player2, 1, 7);
}
20000ce6:	46c0      	nop			; (mov r8, r8)
20000ce8:	46bd      	mov	sp, r7
20000cea:	b002      	add	sp, #8
20000cec:	bd80      	pop	{r7, pc}
20000cee:	46c0      	nop			; (mov r8, r8)
20000cf0:	200013a0 	andcs	r1, r0, r0, lsr #7
20000cf4:	200013a8 	andcs	r1, r0, r8, lsr #7
20000cf8:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
20000cfc:	200012b9 			; <UNDEFINED> instruction: 0x200012b9

20000d00 <app_init>:

void app_init(){
20000d00:	b580      	push	{r7, lr}
20000d02:	af00      	add	r7, sp, #0
	ascii_init();
20000d04:	f7ff fa9e 	bl	20000244 <ascii_init>
	*GPIO_E_MODER = 0x55555555;
20000d08:	4b08      	ldr	r3, [pc, #32]	; (20000d2c <app_init+0x2c>)
20000d0a:	4a09      	ldr	r2, [pc, #36]	; (20000d30 <app_init+0x30>)
20000d0c:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
20000d0e:	4b09      	ldr	r3, [pc, #36]	; (20000d34 <app_init+0x34>)
20000d10:	2200      	movs	r2, #0
20000d12:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
20000d14:	4b08      	ldr	r3, [pc, #32]	; (20000d38 <app_init+0x38>)
20000d16:	2201      	movs	r2, #1
20000d18:	4252      	negs	r2, r2
20000d1a:	601a      	str	r2, [r3, #0]
	graphic_initialize();
20000d1c:	f000 f9af 	bl	2000107e <graphic_initialize>
	graphic_clear_screen();
20000d20:	f000 f9b0 	bl	20001084 <graphic_clear_screen>
}
20000d24:	46c0      	nop			; (mov r8, r8)
20000d26:	46bd      	mov	sp, r7
20000d28:	bd80      	pop	{r7, pc}
20000d2a:	46c0      	nop			; (mov r8, r8)
20000d2c:	40021000 	andmi	r1, r2, r0
20000d30:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000d34:	40021004 	andmi	r1, r2, r4
20000d38:	40021008 	andmi	r1, r2, r8

20000d3c <singleGame>:

void singleGame(POBJECT paddle1, POBJECT paddle2){
20000d3c:	b084      	sub	sp, #16
20000d3e:	b5b0      	push	{r4, r5, r7, lr}
20000d40:	b098      	sub	sp, #96	; 0x60
20000d42:	af0e      	add	r7, sp, #56	; 0x38
20000d44:	2438      	movs	r4, #56	; 0x38
20000d46:	193c      	adds	r4, r7, r4
20000d48:	6020      	str	r0, [r4, #0]
20000d4a:	6061      	str	r1, [r4, #4]
20000d4c:	60a2      	str	r2, [r4, #8]
20000d4e:	60e3      	str	r3, [r4, #12]
	unsigned char c = 0xff;
20000d50:	2327      	movs	r3, #39	; 0x27
20000d52:	18fb      	adds	r3, r7, r3
20000d54:	22ff      	movs	r2, #255	; 0xff
20000d56:	701a      	strb	r2, [r3, #0]
	POBJECT ball = create_ballobject(1,1);
20000d58:	003b      	movs	r3, r7
20000d5a:	2201      	movs	r2, #1
20000d5c:	2101      	movs	r1, #1
20000d5e:	0018      	movs	r0, r3
20000d60:	f7ff fbc1 	bl	200004e6 <create_ballobject>
	ball.set_speed(&ball, 4,1);
20000d64:	003b      	movs	r3, r7
20000d66:	6a1b      	ldr	r3, [r3, #32]
20000d68:	0038      	movs	r0, r7
20000d6a:	2201      	movs	r2, #1
20000d6c:	2104      	movs	r1, #4
20000d6e:	4798      	blx	r3
	// POBJECT paddle1 = create_paddleobject(100, 32);
	// POBJECT paddle2 = create_paddleobject(28, 32);
	print_scores();
20000d70:	f7ff ff82 	bl	20000c78 <print_scores>
	while(1){
		paddle1.move(&paddle1);
20000d74:	2438      	movs	r4, #56	; 0x38
20000d76:	193b      	adds	r3, r7, r4
20000d78:	69da      	ldr	r2, [r3, #28]
20000d7a:	193b      	adds	r3, r7, r4
20000d7c:	0018      	movs	r0, r3
20000d7e:	4790      	blx	r2
		paddle2.move(&paddle2);
20000d80:	2324      	movs	r3, #36	; 0x24
20000d82:	191b      	adds	r3, r3, r4
20000d84:	19db      	adds	r3, r3, r7
20000d86:	69db      	ldr	r3, [r3, #28]
20000d88:	225c      	movs	r2, #92	; 0x5c
20000d8a:	18ba      	adds	r2, r7, r2
20000d8c:	0010      	movs	r0, r2
20000d8e:	4798      	blx	r3
		ball.move(&ball);
20000d90:	003b      	movs	r3, r7
20000d92:	69db      	ldr	r3, [r3, #28]
20000d94:	003a      	movs	r2, r7
20000d96:	0010      	movs	r0, r2
20000d98:	4798      	blx	r3
		c = return_pressed_key();
20000d9a:	2527      	movs	r5, #39	; 0x27
20000d9c:	197c      	adds	r4, r7, r5
20000d9e:	f7ff fe9f 	bl	20000ae0 <return_pressed_key>
20000da2:	0003      	movs	r3, r0
20000da4:	7023      	strb	r3, [r4, #0]
		switch(c){
20000da6:	197b      	adds	r3, r7, r5
20000da8:	781b      	ldrb	r3, [r3, #0]
20000daa:	2b09      	cmp	r3, #9
20000dac:	dc08      	bgt.n	20000dc0 <singleGame+0x84>
20000dae:	2b00      	cmp	r3, #0
20000db0:	dd58      	ble.n	20000e64 <singleGame+0x128>
20000db2:	2b09      	cmp	r3, #9
20000db4:	d856      	bhi.n	20000e64 <singleGame+0x128>
20000db6:	009a      	lsls	r2, r3, #2
20000db8:	4b82      	ldr	r3, [pc, #520]	; (20000fc4 <singleGame+0x288>)
20000dba:	18d3      	adds	r3, r2, r3
20000dbc:	681b      	ldr	r3, [r3, #0]
20000dbe:	469f      	mov	pc, r3
20000dc0:	2bff      	cmp	r3, #255	; 0xff
20000dc2:	d046      	beq.n	20000e52 <singleGame+0x116>
20000dc4:	e04e      	b.n	20000e64 <singleGame+0x128>
			case 1: paddle2.set_speed(&paddle2, 0,-3); break;
20000dc6:	2324      	movs	r3, #36	; 0x24
20000dc8:	2238      	movs	r2, #56	; 0x38
20000dca:	189b      	adds	r3, r3, r2
20000dcc:	19db      	adds	r3, r3, r7
20000dce:	6a1b      	ldr	r3, [r3, #32]
20000dd0:	2203      	movs	r2, #3
20000dd2:	4252      	negs	r2, r2
20000dd4:	215c      	movs	r1, #92	; 0x5c
20000dd6:	1878      	adds	r0, r7, r1
20000dd8:	2100      	movs	r1, #0
20000dda:	4798      	blx	r3
20000ddc:	e042      	b.n	20000e64 <singleGame+0x128>
			case 7: paddle2.set_speed(&paddle2,0,3);break;
20000dde:	2324      	movs	r3, #36	; 0x24
20000de0:	2238      	movs	r2, #56	; 0x38
20000de2:	189b      	adds	r3, r3, r2
20000de4:	19db      	adds	r3, r3, r7
20000de6:	6a1b      	ldr	r3, [r3, #32]
20000de8:	225c      	movs	r2, #92	; 0x5c
20000dea:	18b8      	adds	r0, r7, r2
20000dec:	2203      	movs	r2, #3
20000dee:	2100      	movs	r1, #0
20000df0:	4798      	blx	r3
20000df2:	e037      	b.n	20000e64 <singleGame+0x128>
			case 3: paddle1.set_speed(&paddle1, 0,-3); break;
20000df4:	2138      	movs	r1, #56	; 0x38
20000df6:	187b      	adds	r3, r7, r1
20000df8:	6a1c      	ldr	r4, [r3, #32]
20000dfa:	2303      	movs	r3, #3
20000dfc:	425a      	negs	r2, r3
20000dfe:	187b      	adds	r3, r7, r1
20000e00:	2100      	movs	r1, #0
20000e02:	0018      	movs	r0, r3
20000e04:	47a0      	blx	r4
20000e06:	e02d      	b.n	20000e64 <singleGame+0x128>
			case 9: paddle1.set_speed(&paddle1,0,3);break;
20000e08:	2238      	movs	r2, #56	; 0x38
20000e0a:	18bb      	adds	r3, r7, r2
20000e0c:	6a1c      	ldr	r4, [r3, #32]
20000e0e:	18bb      	adds	r3, r7, r2
20000e10:	2203      	movs	r2, #3
20000e12:	2100      	movs	r1, #0
20000e14:	0018      	movs	r0, r3
20000e16:	47a0      	blx	r4
20000e18:	e024      	b.n	20000e64 <singleGame+0x128>
			case 6: singleGame(paddle1, paddle2); break;
20000e1a:	2138      	movs	r1, #56	; 0x38
20000e1c:	187b      	adds	r3, r7, r1
20000e1e:	2224      	movs	r2, #36	; 0x24
20000e20:	1852      	adds	r2, r2, r1
20000e22:	19d1      	adds	r1, r2, r7
20000e24:	2214      	movs	r2, #20
20000e26:	446a      	add	r2, sp
20000e28:	c931      	ldmia	r1!, {r0, r4, r5}
20000e2a:	c231      	stmia	r2!, {r0, r4, r5}
20000e2c:	c931      	ldmia	r1!, {r0, r4, r5}
20000e2e:	c231      	stmia	r2!, {r0, r4, r5}
20000e30:	c931      	ldmia	r1!, {r0, r4, r5}
20000e32:	c231      	stmia	r2!, {r0, r4, r5}
20000e34:	466a      	mov	r2, sp
20000e36:	0011      	movs	r1, r2
20000e38:	001a      	movs	r2, r3
20000e3a:	3210      	adds	r2, #16
20000e3c:	ca31      	ldmia	r2!, {r0, r4, r5}
20000e3e:	c131      	stmia	r1!, {r0, r4, r5}
20000e40:	ca11      	ldmia	r2!, {r0, r4}
20000e42:	c111      	stmia	r1!, {r0, r4}
20000e44:	6818      	ldr	r0, [r3, #0]
20000e46:	6859      	ldr	r1, [r3, #4]
20000e48:	689a      	ldr	r2, [r3, #8]
20000e4a:	68db      	ldr	r3, [r3, #12]
20000e4c:	f7ff ff76 	bl	20000d3c <singleGame>
20000e50:	e008      	b.n	20000e64 <singleGame+0x128>
			case 0xff: paddle1.set_speed(&paddle1, 0,0);break;
20000e52:	2238      	movs	r2, #56	; 0x38
20000e54:	18bb      	adds	r3, r7, r2
20000e56:	6a1c      	ldr	r4, [r3, #32]
20000e58:	18bb      	adds	r3, r7, r2
20000e5a:	2200      	movs	r2, #0
20000e5c:	2100      	movs	r1, #0
20000e5e:	0018      	movs	r0, r3
20000e60:	47a0      	blx	r4
20000e62:	46c0      	nop			; (mov r8, r8)
		}




		if(collision(paddle1, ball)){
20000e64:	2338      	movs	r3, #56	; 0x38
20000e66:	18fb      	adds	r3, r7, r3
20000e68:	0039      	movs	r1, r7
20000e6a:	2214      	movs	r2, #20
20000e6c:	446a      	add	r2, sp
20000e6e:	c931      	ldmia	r1!, {r0, r4, r5}
20000e70:	c231      	stmia	r2!, {r0, r4, r5}
20000e72:	c931      	ldmia	r1!, {r0, r4, r5}
20000e74:	c231      	stmia	r2!, {r0, r4, r5}
20000e76:	c931      	ldmia	r1!, {r0, r4, r5}
20000e78:	c231      	stmia	r2!, {r0, r4, r5}
20000e7a:	466a      	mov	r2, sp
20000e7c:	0011      	movs	r1, r2
20000e7e:	001a      	movs	r2, r3
20000e80:	3210      	adds	r2, #16
20000e82:	ca31      	ldmia	r2!, {r0, r4, r5}
20000e84:	c131      	stmia	r1!, {r0, r4, r5}
20000e86:	ca11      	ldmia	r2!, {r0, r4}
20000e88:	c111      	stmia	r1!, {r0, r4}
20000e8a:	6818      	ldr	r0, [r3, #0]
20000e8c:	6859      	ldr	r1, [r3, #4]
20000e8e:	689a      	ldr	r2, [r3, #8]
20000e90:	68db      	ldr	r3, [r3, #12]
20000e92:	f7ff fe87 	bl	20000ba4 <collision>
20000e96:	1e03      	subs	r3, r0, #0
20000e98:	d004      	beq.n	20000ea4 <singleGame+0x168>
				ball.dirx = -ball.dirx;
20000e9a:	003b      	movs	r3, r7
20000e9c:	685b      	ldr	r3, [r3, #4]
20000e9e:	425a      	negs	r2, r3
20000ea0:	003b      	movs	r3, r7
20000ea2:	605a      	str	r2, [r3, #4]
			}
		if(collision(paddle2, ball)){
20000ea4:	2324      	movs	r3, #36	; 0x24
20000ea6:	2238      	movs	r2, #56	; 0x38
20000ea8:	189b      	adds	r3, r3, r2
20000eaa:	19dc      	adds	r4, r3, r7
20000eac:	003a      	movs	r2, r7
20000eae:	2314      	movs	r3, #20
20000eb0:	446b      	add	r3, sp
20000eb2:	ca23      	ldmia	r2!, {r0, r1, r5}
20000eb4:	c323      	stmia	r3!, {r0, r1, r5}
20000eb6:	ca23      	ldmia	r2!, {r0, r1, r5}
20000eb8:	c323      	stmia	r3!, {r0, r1, r5}
20000eba:	ca23      	ldmia	r2!, {r0, r1, r5}
20000ebc:	c323      	stmia	r3!, {r0, r1, r5}
20000ebe:	466b      	mov	r3, sp
20000ec0:	001a      	movs	r2, r3
20000ec2:	0023      	movs	r3, r4
20000ec4:	3310      	adds	r3, #16
20000ec6:	cb23      	ldmia	r3!, {r0, r1, r5}
20000ec8:	c223      	stmia	r2!, {r0, r1, r5}
20000eca:	cb03      	ldmia	r3!, {r0, r1}
20000ecc:	c203      	stmia	r2!, {r0, r1}
20000ece:	6820      	ldr	r0, [r4, #0]
20000ed0:	6861      	ldr	r1, [r4, #4]
20000ed2:	68a2      	ldr	r2, [r4, #8]
20000ed4:	68e3      	ldr	r3, [r4, #12]
20000ed6:	f7ff fe65 	bl	20000ba4 <collision>
20000eda:	1e03      	subs	r3, r0, #0
20000edc:	d004      	beq.n	20000ee8 <singleGame+0x1ac>
				ball.dirx = -ball.dirx;
20000ede:	003b      	movs	r3, r7
20000ee0:	685b      	ldr	r3, [r3, #4]
20000ee2:	425a      	negs	r2, r3
20000ee4:	003b      	movs	r3, r7
20000ee6:	605a      	str	r2, [r3, #4]
			}
		if(ball.posx >= 128){
20000ee8:	003b      	movs	r3, r7
20000eea:	68db      	ldr	r3, [r3, #12]
20000eec:	2b7f      	cmp	r3, #127	; 0x7f
20000eee:	dd22      	ble.n	20000f36 <singleGame+0x1fa>
			points_player1++;
20000ef0:	4b35      	ldr	r3, [pc, #212]	; (20000fc8 <singleGame+0x28c>)
20000ef2:	781b      	ldrb	r3, [r3, #0]
20000ef4:	3301      	adds	r3, #1
20000ef6:	b2da      	uxtb	r2, r3
20000ef8:	4b33      	ldr	r3, [pc, #204]	; (20000fc8 <singleGame+0x28c>)
20000efa:	701a      	strb	r2, [r3, #0]
			print_scores();
20000efc:	f7ff febc 	bl	20000c78 <print_scores>
			singleGame(paddle1, paddle2);
20000f00:	2138      	movs	r1, #56	; 0x38
20000f02:	187b      	adds	r3, r7, r1
20000f04:	2224      	movs	r2, #36	; 0x24
20000f06:	1852      	adds	r2, r2, r1
20000f08:	19d1      	adds	r1, r2, r7
20000f0a:	2214      	movs	r2, #20
20000f0c:	446a      	add	r2, sp
20000f0e:	c931      	ldmia	r1!, {r0, r4, r5}
20000f10:	c231      	stmia	r2!, {r0, r4, r5}
20000f12:	c931      	ldmia	r1!, {r0, r4, r5}
20000f14:	c231      	stmia	r2!, {r0, r4, r5}
20000f16:	c931      	ldmia	r1!, {r0, r4, r5}
20000f18:	c231      	stmia	r2!, {r0, r4, r5}
20000f1a:	466a      	mov	r2, sp
20000f1c:	0011      	movs	r1, r2
20000f1e:	001a      	movs	r2, r3
20000f20:	3210      	adds	r2, #16
20000f22:	ca31      	ldmia	r2!, {r0, r4, r5}
20000f24:	c131      	stmia	r1!, {r0, r4, r5}
20000f26:	ca11      	ldmia	r2!, {r0, r4}
20000f28:	c111      	stmia	r1!, {r0, r4}
20000f2a:	6818      	ldr	r0, [r3, #0]
20000f2c:	6859      	ldr	r1, [r3, #4]
20000f2e:	689a      	ldr	r2, [r3, #8]
20000f30:	68db      	ldr	r3, [r3, #12]
20000f32:	f7ff ff03 	bl	20000d3c <singleGame>
		}
		if(ball.posx <= 0){
20000f36:	003b      	movs	r3, r7
20000f38:	68db      	ldr	r3, [r3, #12]
20000f3a:	2b00      	cmp	r3, #0
20000f3c:	dc22      	bgt.n	20000f84 <singleGame+0x248>
			points_player2++;
20000f3e:	4b23      	ldr	r3, [pc, #140]	; (20000fcc <singleGame+0x290>)
20000f40:	781b      	ldrb	r3, [r3, #0]
20000f42:	3301      	adds	r3, #1
20000f44:	b2da      	uxtb	r2, r3
20000f46:	4b21      	ldr	r3, [pc, #132]	; (20000fcc <singleGame+0x290>)
20000f48:	701a      	strb	r2, [r3, #0]
			print_scores();
20000f4a:	f7ff fe95 	bl	20000c78 <print_scores>
			singleGame(paddle1 ,paddle2);
20000f4e:	2138      	movs	r1, #56	; 0x38
20000f50:	187b      	adds	r3, r7, r1
20000f52:	2224      	movs	r2, #36	; 0x24
20000f54:	1852      	adds	r2, r2, r1
20000f56:	19d1      	adds	r1, r2, r7
20000f58:	2214      	movs	r2, #20
20000f5a:	446a      	add	r2, sp
20000f5c:	c931      	ldmia	r1!, {r0, r4, r5}
20000f5e:	c231      	stmia	r2!, {r0, r4, r5}
20000f60:	c931      	ldmia	r1!, {r0, r4, r5}
20000f62:	c231      	stmia	r2!, {r0, r4, r5}
20000f64:	c931      	ldmia	r1!, {r0, r4, r5}
20000f66:	c231      	stmia	r2!, {r0, r4, r5}
20000f68:	466a      	mov	r2, sp
20000f6a:	0011      	movs	r1, r2
20000f6c:	001a      	movs	r2, r3
20000f6e:	3210      	adds	r2, #16
20000f70:	ca31      	ldmia	r2!, {r0, r4, r5}
20000f72:	c131      	stmia	r1!, {r0, r4, r5}
20000f74:	ca11      	ldmia	r2!, {r0, r4}
20000f76:	c111      	stmia	r1!, {r0, r4}
20000f78:	6818      	ldr	r0, [r3, #0]
20000f7a:	6859      	ldr	r1, [r3, #4]
20000f7c:	689a      	ldr	r2, [r3, #8]
20000f7e:	68db      	ldr	r3, [r3, #12]
20000f80:	f7ff fedc 	bl	20000d3c <singleGame>
		}
		if(points_player1 == winning_score){
20000f84:	4b10      	ldr	r3, [pc, #64]	; (20000fc8 <singleGame+0x28c>)
20000f86:	781a      	ldrb	r2, [r3, #0]
20000f88:	4b11      	ldr	r3, [pc, #68]	; (20000fd0 <singleGame+0x294>)
20000f8a:	781b      	ldrb	r3, [r3, #0]
20000f8c:	429a      	cmp	r2, r3
20000f8e:	d105      	bne.n	20000f9c <singleGame+0x260>
			winner_name = "Player 1";
20000f90:	4b10      	ldr	r3, [pc, #64]	; (20000fd4 <singleGame+0x298>)
20000f92:	4a11      	ldr	r2, [pc, #68]	; (20000fd8 <singleGame+0x29c>)
20000f94:	601a      	str	r2, [r3, #0]
			winning_routine();
20000f96:	f7ff fe36 	bl	20000c06 <winning_routine>
			break;
20000f9a:	e00b      	b.n	20000fb4 <singleGame+0x278>
		}else if(points_player2 == winning_score){
20000f9c:	4b0b      	ldr	r3, [pc, #44]	; (20000fcc <singleGame+0x290>)
20000f9e:	781a      	ldrb	r2, [r3, #0]
20000fa0:	4b0b      	ldr	r3, [pc, #44]	; (20000fd0 <singleGame+0x294>)
20000fa2:	781b      	ldrb	r3, [r3, #0]
20000fa4:	429a      	cmp	r2, r3
20000fa6:	d000      	beq.n	20000faa <singleGame+0x26e>
20000fa8:	e6e4      	b.n	20000d74 <singleGame+0x38>
			winner_name = "Player 2";
20000faa:	4b0a      	ldr	r3, [pc, #40]	; (20000fd4 <singleGame+0x298>)
20000fac:	4a0b      	ldr	r2, [pc, #44]	; (20000fdc <singleGame+0x2a0>)
20000fae:	601a      	str	r2, [r3, #0]
			winning_routine();
20000fb0:	f7ff fe29 	bl	20000c06 <winning_routine>
		// else if(get_timer_flag() == 1){
		// 	break;
		// }
		
	}		
}		
20000fb4:	46c0      	nop			; (mov r8, r8)
20000fb6:	46bd      	mov	sp, r7
20000fb8:	b00a      	add	sp, #40	; 0x28
20000fba:	bcb0      	pop	{r4, r5, r7}
20000fbc:	bc08      	pop	{r3}
20000fbe:	b004      	add	sp, #16
20000fc0:	4718      	bx	r3
20000fc2:	46c0      	nop			; (mov r8, r8)
20000fc4:	200013c8 	andcs	r1, r0, r8, asr #7
20000fc8:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
20000fcc:	200012b9 			; <UNDEFINED> instruction: 0x200012b9
20000fd0:	20001364 	andcs	r1, r0, r4, ror #6
20000fd4:	200012bc 			; <UNDEFINED> instruction: 0x200012bc
20000fd8:	200013b0 			; <UNDEFINED> instruction: 0x200013b0
20000fdc:	200013bc 			; <UNDEFINED> instruction: 0x200013bc

20000fe0 <main>:




//main for singlepong
void main(void) {
20000fe0:	b5b0      	push	{r4, r5, r7, lr}
20000fe2:	b0aa      	sub	sp, #168	; 0xa8
20000fe4:	af0e      	add	r7, sp, #56	; 0x38

	app_init();
20000fe6:	f7ff fe8b 	bl	20000d00 <app_init>
	unsigned char c = 0xff;
20000fea:	236f      	movs	r3, #111	; 0x6f
20000fec:	18fb      	adds	r3, r7, r3
20000fee:	22ff      	movs	r2, #255	; 0xff
20000ff0:	701a      	strb	r2, [r3, #0]
	POBJECT ball = create_ballobject(1,1);
20000ff2:	2448      	movs	r4, #72	; 0x48
20000ff4:	193b      	adds	r3, r7, r4
20000ff6:	2201      	movs	r2, #1
20000ff8:	2101      	movs	r1, #1
20000ffa:	0018      	movs	r0, r3
20000ffc:	f7ff fa73 	bl	200004e6 <create_ballobject>
	ball.set_speed(&ball, 4,1);
20001000:	0022      	movs	r2, r4
20001002:	18bb      	adds	r3, r7, r2
20001004:	6a1b      	ldr	r3, [r3, #32]
20001006:	18b8      	adds	r0, r7, r2
20001008:	2201      	movs	r2, #1
2000100a:	2104      	movs	r1, #4
2000100c:	4798      	blx	r3
	POBJECT paddle1 = create_paddleobject(100, 32);
2000100e:	2424      	movs	r4, #36	; 0x24
20001010:	193b      	adds	r3, r7, r4
20001012:	2220      	movs	r2, #32
20001014:	2164      	movs	r1, #100	; 0x64
20001016:	0018      	movs	r0, r3
20001018:	f7ff fa9e 	bl	20000558 <create_paddleobject>
	POBJECT paddle2 = create_paddleobject(28, 32);
2000101c:	003b      	movs	r3, r7
2000101e:	2220      	movs	r2, #32
20001020:	211c      	movs	r1, #28
20001022:	0018      	movs	r0, r3
20001024:	f7ff fa98 	bl	20000558 <create_paddleobject>
	singleGame(paddle1, paddle2);	
20001028:	193c      	adds	r4, r7, r4
2000102a:	003a      	movs	r2, r7
2000102c:	2314      	movs	r3, #20
2000102e:	446b      	add	r3, sp
20001030:	ca23      	ldmia	r2!, {r0, r1, r5}
20001032:	c323      	stmia	r3!, {r0, r1, r5}
20001034:	ca23      	ldmia	r2!, {r0, r1, r5}
20001036:	c323      	stmia	r3!, {r0, r1, r5}
20001038:	ca23      	ldmia	r2!, {r0, r1, r5}
2000103a:	c323      	stmia	r3!, {r0, r1, r5}
2000103c:	466b      	mov	r3, sp
2000103e:	001a      	movs	r2, r3
20001040:	0023      	movs	r3, r4
20001042:	3310      	adds	r3, #16
20001044:	cb23      	ldmia	r3!, {r0, r1, r5}
20001046:	c223      	stmia	r2!, {r0, r1, r5}
20001048:	cb03      	ldmia	r3!, {r0, r1}
2000104a:	c203      	stmia	r2!, {r0, r1}
2000104c:	6820      	ldr	r0, [r4, #0]
2000104e:	6861      	ldr	r1, [r4, #4]
20001050:	68a2      	ldr	r2, [r4, #8]
20001052:	68e3      	ldr	r3, [r4, #12]
20001054:	f7ff fe72 	bl	20000d3c <singleGame>
20001058:	46c0      	nop			; (mov r8, r8)
2000105a:	46bd      	mov	sp, r7
2000105c:	b01c      	add	sp, #112	; 0x70
2000105e:	bdb0      	pop	{r4, r5, r7, pc}

20001060 <abs>:
#include "math.h"



int abs(int num){
20001060:	b580      	push	{r7, lr}
20001062:	b082      	sub	sp, #8
20001064:	af00      	add	r7, sp, #0
20001066:	6078      	str	r0, [r7, #4]
    if(num < 0  ){
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	2b00      	cmp	r3, #0
2000106c:	da02      	bge.n	20001074 <abs+0x14>
        return -num;
2000106e:	687b      	ldr	r3, [r7, #4]
20001070:	425b      	negs	r3, r3
20001072:	e000      	b.n	20001076 <abs+0x16>
    }
    return num;
20001074:	687b      	ldr	r3, [r7, #4]
}
20001076:	0018      	movs	r0, r3
20001078:	46bd      	mov	sp, r7
2000107a:	b002      	add	sp, #8
2000107c:	bd80      	pop	{r7, pc}

2000107e <graphic_initialize>:





__attribute__((naked)) void graphic_initialize(){
2000107e:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm__ volatile(".HWORD  0xDFF0\n");
	__asm__ volatile("BX LR\n");
}
20001082:	46c0      	nop			; (mov r8, r8)

20001084 <graphic_clear_screen>:


__attribute__((naked)) void graphic_clear_screen(){
20001084:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm__ volatile(".HWORD  0xDFF1\n");
	__asm__ volatile("BX LR\n");
}
20001088:	46c0      	nop			; (mov r8, r8)

2000108a <graphic_pixel_set>:

__attribute__((naked)) void graphic_pixel_set(int x, int y){	
2000108a:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm__ volatile(".HWORD  0xDFF2\n");
	__asm__ volatile("BX LR\n");
}
2000108e:	46c0      	nop			; (mov r8, r8)

20001090 <graphic_pixel_clear>:


__attribute__((naked)) void graphic_pixel_clear(int x, int y){
20001090:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm__ volatile(".HWORD  0xDFF3\n");
	__asm__ volatile("BX LR\n");
20001094:	46c0      	nop			; (mov r8, r8)
	...

20001098 <delay_1micro_systick>:
int count;

char ticks;
char seconds;

void delay_1micro_systick(){
20001098:	b580      	push	{r7, lr}
2000109a:	af00      	add	r7, sp, #0
	systick_flag = 0;
2000109c:	4b07      	ldr	r3, [pc, #28]	; (200010bc <delay_1micro_systick+0x24>)
2000109e:	2200      	movs	r2, #0
200010a0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168);
200010a2:	4b07      	ldr	r3, [pc, #28]	; (200010c0 <delay_1micro_systick+0x28>)
200010a4:	22a8      	movs	r2, #168	; 0xa8
200010a6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200010a8:	4b06      	ldr	r3, [pc, #24]	; (200010c4 <delay_1micro_systick+0x2c>)
200010aa:	2200      	movs	r2, #0
200010ac:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 7;
200010ae:	4b06      	ldr	r3, [pc, #24]	; (200010c8 <delay_1micro_systick+0x30>)
200010b0:	2207      	movs	r2, #7
200010b2:	601a      	str	r2, [r3, #0]
}
200010b4:	46c0      	nop			; (mov r8, r8)
200010b6:	46bd      	mov	sp, r7
200010b8:	bd80      	pop	{r7, pc}
200010ba:	46c0      	nop			; (mov r8, r8)
200010bc:	200012c0 	andcs	r1, r0, r0, asr #5
200010c0:	e000e014 	and	lr, r0, r4, lsl r0
200010c4:	e000e018 	and	lr, r0, r8, lsl r0
200010c8:	e000e010 	and	lr, r0, r0, lsl r0

200010cc <interrupt_delay>:

void interrupt_delay(int ms){
200010cc:	b580      	push	{r7, lr}
200010ce:	b082      	sub	sp, #8
200010d0:	af00      	add	r7, sp, #0
200010d2:	6078      	str	r0, [r7, #4]
	delay_count = ms;
200010d4:	4b04      	ldr	r3, [pc, #16]	; (200010e8 <interrupt_delay+0x1c>)
200010d6:	687a      	ldr	r2, [r7, #4]
200010d8:	601a      	str	r2, [r3, #0]
	delay_1micro_systick();
200010da:	f7ff ffdd 	bl	20001098 <delay_1micro_systick>
}
200010de:	46c0      	nop			; (mov r8, r8)
200010e0:	46bd      	mov	sp, r7
200010e2:	b002      	add	sp, #8
200010e4:	bd80      	pop	{r7, pc}
200010e6:	46c0      	nop			; (mov r8, r8)
200010e8:	200012c4 	andcs	r1, r0, r4, asr #5

200010ec <systick_irq_handler>:

void systick_irq_handler(){
200010ec:	b580      	push	{r7, lr}
200010ee:	af00      	add	r7, sp, #0
	// kill();
	*STK_CTRL = 0;
200010f0:	4b0a      	ldr	r3, [pc, #40]	; (2000111c <systick_irq_handler+0x30>)
200010f2:	2200      	movs	r2, #0
200010f4:	601a      	str	r2, [r3, #0]
	delay_count = delay_count-1;
200010f6:	4b0a      	ldr	r3, [pc, #40]	; (20001120 <systick_irq_handler+0x34>)
200010f8:	681b      	ldr	r3, [r3, #0]
200010fa:	1e5a      	subs	r2, r3, #1
200010fc:	4b08      	ldr	r3, [pc, #32]	; (20001120 <systick_irq_handler+0x34>)
200010fe:	601a      	str	r2, [r3, #0]
	if(delay_count > 0){
20001100:	4b07      	ldr	r3, [pc, #28]	; (20001120 <systick_irq_handler+0x34>)
20001102:	681b      	ldr	r3, [r3, #0]
20001104:	2b00      	cmp	r3, #0
20001106:	dd02      	ble.n	2000110e <systick_irq_handler+0x22>
		delay_1micro_systick();
20001108:	f7ff ffc6 	bl	20001098 <delay_1micro_systick>
	}else{
		systick_flag = 1;
	}
}
2000110c:	e002      	b.n	20001114 <systick_irq_handler+0x28>
		systick_flag = 1;
2000110e:	4b05      	ldr	r3, [pc, #20]	; (20001124 <systick_irq_handler+0x38>)
20001110:	2201      	movs	r2, #1
20001112:	601a      	str	r2, [r3, #0]
}
20001114:	46c0      	nop			; (mov r8, r8)
20001116:	46bd      	mov	sp, r7
20001118:	bd80      	pop	{r7, pc}
2000111a:	46c0      	nop			; (mov r8, r8)
2000111c:	e000e010 	and	lr, r0, r0, lsl r0
20001120:	200012c4 	andcs	r1, r0, r4, asr #5
20001124:	200012c0 	andcs	r1, r0, r0, asr #5

20001128 <timer6_interrupt_handler>:

void timer6_interrupt_handler(){
20001128:	b580      	push	{r7, lr}
2000112a:	b082      	sub	sp, #8
2000112c:	af00      	add	r7, sp, #0

		//  GPIO_E.ODR_LOW =  0xff;
	TIM6.SR &= ~UIF;
2000112e:	4b1b      	ldr	r3, [pc, #108]	; (2000119c <timer6_interrupt_handler+0x74>)
20001130:	691a      	ldr	r2, [r3, #16]
20001132:	4b1a      	ldr	r3, [pc, #104]	; (2000119c <timer6_interrupt_handler+0x74>)
20001134:	2101      	movs	r1, #1
20001136:	438a      	bics	r2, r1
20001138:	611a      	str	r2, [r3, #16]
	ticks++;
2000113a:	4b19      	ldr	r3, [pc, #100]	; (200011a0 <timer6_interrupt_handler+0x78>)
2000113c:	781b      	ldrb	r3, [r3, #0]
2000113e:	3301      	adds	r3, #1
20001140:	b2da      	uxtb	r2, r3
20001142:	4b17      	ldr	r3, [pc, #92]	; (200011a0 <timer6_interrupt_handler+0x78>)
20001144:	701a      	strb	r2, [r3, #0]
	if(ticks > 9){
20001146:	4b16      	ldr	r3, [pc, #88]	; (200011a0 <timer6_interrupt_handler+0x78>)
20001148:	781b      	ldrb	r3, [r3, #0]
2000114a:	2b09      	cmp	r3, #9
2000114c:	d911      	bls.n	20001172 <timer6_interrupt_handler+0x4a>
		ticks = 0;
2000114e:	4b14      	ldr	r3, [pc, #80]	; (200011a0 <timer6_interrupt_handler+0x78>)
20001150:	2200      	movs	r2, #0
20001152:	701a      	strb	r2, [r3, #0]
		seconds++;
20001154:	4b13      	ldr	r3, [pc, #76]	; (200011a4 <timer6_interrupt_handler+0x7c>)
20001156:	781b      	ldrb	r3, [r3, #0]
20001158:	3301      	adds	r3, #1
2000115a:	b2da      	uxtb	r2, r3
2000115c:	4b11      	ldr	r3, [pc, #68]	; (200011a4 <timer6_interrupt_handler+0x7c>)
2000115e:	701a      	strb	r2, [r3, #0]
		char * string_seconds = &seconds;
20001160:	4b10      	ldr	r3, [pc, #64]	; (200011a4 <timer6_interrupt_handler+0x7c>)
20001162:	607b      	str	r3, [r7, #4]
		ascii_write_text_at(seconds,1,2  );
20001164:	4b0f      	ldr	r3, [pc, #60]	; (200011a4 <timer6_interrupt_handler+0x7c>)
20001166:	781b      	ldrb	r3, [r3, #0]
20001168:	2202      	movs	r2, #2
2000116a:	2101      	movs	r1, #1
2000116c:	0018      	movs	r0, r3
2000116e:	f7ff f89e 	bl	200002ae <ascii_write_text_at>
	}
	if(seconds > count){
20001172:	4b0c      	ldr	r3, [pc, #48]	; (200011a4 <timer6_interrupt_handler+0x7c>)
20001174:	781b      	ldrb	r3, [r3, #0]
20001176:	001a      	movs	r2, r3
20001178:	4b0b      	ldr	r3, [pc, #44]	; (200011a8 <timer6_interrupt_handler+0x80>)
2000117a:	681b      	ldr	r3, [r3, #0]
2000117c:	429a      	cmp	r2, r3
2000117e:	dd08      	ble.n	20001192 <timer6_interrupt_handler+0x6a>
		timer_flag = 1;
20001180:	4b0a      	ldr	r3, [pc, #40]	; (200011ac <timer6_interrupt_handler+0x84>)
20001182:	2201      	movs	r2, #1
20001184:	701a      	strb	r2, [r3, #0]
		TIM6.CR1 &= ~CEN;
20001186:	4b05      	ldr	r3, [pc, #20]	; (2000119c <timer6_interrupt_handler+0x74>)
20001188:	681a      	ldr	r2, [r3, #0]
2000118a:	4b04      	ldr	r3, [pc, #16]	; (2000119c <timer6_interrupt_handler+0x74>)
2000118c:	2101      	movs	r1, #1
2000118e:	438a      	bics	r2, r1
20001190:	601a      	str	r2, [r3, #0]
	}
}
20001192:	46c0      	nop			; (mov r8, r8)
20001194:	46bd      	mov	sp, r7
20001196:	b002      	add	sp, #8
20001198:	bd80      	pop	{r7, pc}
2000119a:	46c0      	nop			; (mov r8, r8)
2000119c:	40001000 	andmi	r1, r0, r0
200011a0:	200012d0 	ldrdcs	r1, [r0], -r0
200011a4:	200012d1 	ldrdcs	r1, [r0], -r1	; <UNPREDICTABLE>
200011a8:	200012cc 	andcs	r1, r0, ip, asr #5
200011ac:	200012c8 	andcs	r1, r0, r8, asr #5

200011b0 <get_timer_flag>:

char get_timer_flag(){
200011b0:	b580      	push	{r7, lr}
200011b2:	af00      	add	r7, sp, #0
	return timer_flag;
200011b4:	4b02      	ldr	r3, [pc, #8]	; (200011c0 <get_timer_flag+0x10>)
200011b6:	781b      	ldrb	r3, [r3, #0]
}
200011b8:	0018      	movs	r0, r3
200011ba:	46bd      	mov	sp, r7
200011bc:	bd80      	pop	{r7, pc}
200011be:	46c0      	nop			; (mov r8, r8)
200011c0:	200012c8 	andcs	r1, r0, r8, asr #5

200011c4 <timer6_init>:

void timer6_init(){
200011c4:	b580      	push	{r7, lr}
200011c6:	af00      	add	r7, sp, #0
	ticks = 0;
200011c8:	4b15      	ldr	r3, [pc, #84]	; (20001220 <timer6_init+0x5c>)
200011ca:	2200      	movs	r2, #0
200011cc:	701a      	strb	r2, [r3, #0]
	seconds = 0;
200011ce:	4b15      	ldr	r3, [pc, #84]	; (20001224 <timer6_init+0x60>)
200011d0:	2200      	movs	r2, #0
200011d2:	701a      	strb	r2, [r3, #0]

	TIM6.CR1 &= ~CEN;
200011d4:	4b14      	ldr	r3, [pc, #80]	; (20001228 <timer6_init+0x64>)
200011d6:	681a      	ldr	r2, [r3, #0]
200011d8:	4b13      	ldr	r3, [pc, #76]	; (20001228 <timer6_init+0x64>)
200011da:	2101      	movs	r1, #1
200011dc:	438a      	bics	r2, r1
200011de:	601a      	str	r2, [r3, #0]
	*((void (**)(void))0x2001C118) = timer6_interrupt_handler;
200011e0:	4b12      	ldr	r3, [pc, #72]	; (2000122c <timer6_init+0x68>)
200011e2:	4a13      	ldr	r2, [pc, #76]	; (20001230 <timer6_init+0x6c>)
200011e4:	601a      	str	r2, [r3, #0]
	// int * iser_test = &(*NVIC_TIM6_ISER);
	*NVIC_TIM6_ISER |=  TIMER6_IRQ;
200011e6:	4b13      	ldr	r3, [pc, #76]	; (20001234 <timer6_init+0x70>)
200011e8:	681a      	ldr	r2, [r3, #0]
200011ea:	4b12      	ldr	r3, [pc, #72]	; (20001234 <timer6_init+0x70>)
200011ec:	2180      	movs	r1, #128	; 0x80
200011ee:	03c9      	lsls	r1, r1, #15
200011f0:	430a      	orrs	r2, r1
200011f2:	601a      	str	r2, [r3, #0]
	// *NVIC_TIM6_ICER |= TIMER6_IRQ;
	TIM6.PSC = 83;
200011f4:	4b0c      	ldr	r3, [pc, #48]	; (20001228 <timer6_init+0x64>)
200011f6:	2253      	movs	r2, #83	; 0x53
200011f8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6.ARR = 9999;
200011fa:	4b0b      	ldr	r3, [pc, #44]	; (20001228 <timer6_init+0x64>)
200011fc:	4a0e      	ldr	r2, [pc, #56]	; (20001238 <timer6_init+0x74>)
200011fe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6.DIER |= UIE;
20001200:	4b09      	ldr	r3, [pc, #36]	; (20001228 <timer6_init+0x64>)
20001202:	68da      	ldr	r2, [r3, #12]
20001204:	4b08      	ldr	r3, [pc, #32]	; (20001228 <timer6_init+0x64>)
20001206:	2101      	movs	r1, #1
20001208:	430a      	orrs	r2, r1
2000120a:	60da      	str	r2, [r3, #12]
	TIM6.CR1 |= CEN;
2000120c:	4b06      	ldr	r3, [pc, #24]	; (20001228 <timer6_init+0x64>)
2000120e:	681a      	ldr	r2, [r3, #0]
20001210:	4b05      	ldr	r3, [pc, #20]	; (20001228 <timer6_init+0x64>)
20001212:	2101      	movs	r1, #1
20001214:	430a      	orrs	r2, r1
20001216:	601a      	str	r2, [r3, #0]
}
20001218:	46c0      	nop			; (mov r8, r8)
2000121a:	46bd      	mov	sp, r7
2000121c:	bd80      	pop	{r7, pc}
2000121e:	46c0      	nop			; (mov r8, r8)
20001220:	200012d0 	ldrdcs	r1, [r0], -r0
20001224:	200012d1 	ldrdcs	r1, [r0], -r1	; <UNPREDICTABLE>
20001228:	40001000 	andmi	r1, r0, r0
2000122c:	2001c118 	andcs	ip, r1, r8, lsl r1
20001230:	20001129 	andcs	r1, r0, r9, lsr #2
20001234:	e000e104 	and	lr, r0, r4, lsl #2
20001238:	0000270f 	andeq	r2, r0, pc, lsl #14

2000123c <timer6_start>:

void timer6_start(int seconds){
2000123c:	b580      	push	{r7, lr}
2000123e:	b082      	sub	sp, #8
20001240:	af00      	add	r7, sp, #0
20001242:	6078      	str	r0, [r7, #4]
	count = count;
20001244:	4b10      	ldr	r3, [pc, #64]	; (20001288 <timer6_start+0x4c>)
20001246:	681a      	ldr	r2, [r3, #0]
20001248:	4b0f      	ldr	r3, [pc, #60]	; (20001288 <timer6_start+0x4c>)
2000124a:	601a      	str	r2, [r3, #0]
	TIM6.PSC = 839*seconds;
2000124c:	6879      	ldr	r1, [r7, #4]
2000124e:	000b      	movs	r3, r1
20001250:	00db      	lsls	r3, r3, #3
20001252:	1a5b      	subs	r3, r3, r1
20001254:	011a      	lsls	r2, r3, #4
20001256:	1ad2      	subs	r2, r2, r3
20001258:	00d2      	lsls	r2, r2, #3
2000125a:	1a52      	subs	r2, r2, r1
2000125c:	4b0b      	ldr	r3, [pc, #44]	; (2000128c <timer6_start+0x50>)
2000125e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6.ARR = 9999;
20001260:	4b0a      	ldr	r3, [pc, #40]	; (2000128c <timer6_start+0x50>)
20001262:	4a0b      	ldr	r2, [pc, #44]	; (20001290 <timer6_start+0x54>)
20001264:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6.DIER |= UIE;
20001266:	4b09      	ldr	r3, [pc, #36]	; (2000128c <timer6_start+0x50>)
20001268:	68da      	ldr	r2, [r3, #12]
2000126a:	4b08      	ldr	r3, [pc, #32]	; (2000128c <timer6_start+0x50>)
2000126c:	2101      	movs	r1, #1
2000126e:	430a      	orrs	r2, r1
20001270:	60da      	str	r2, [r3, #12]
	TIM6.CR1 |= CEN;
20001272:	4b06      	ldr	r3, [pc, #24]	; (2000128c <timer6_start+0x50>)
20001274:	681a      	ldr	r2, [r3, #0]
20001276:	4b05      	ldr	r3, [pc, #20]	; (2000128c <timer6_start+0x50>)
20001278:	2101      	movs	r1, #1
2000127a:	430a      	orrs	r2, r1
2000127c:	601a      	str	r2, [r3, #0]
}
2000127e:	46c0      	nop			; (mov r8, r8)
20001280:	46bd      	mov	sp, r7
20001282:	b002      	add	sp, #8
20001284:	bd80      	pop	{r7, pc}
20001286:	46c0      	nop			; (mov r8, r8)
20001288:	200012cc 	andcs	r1, r0, ip, asr #5
2000128c:	40001000 	andmi	r1, r0, r0
20001290:	0000270f 	andeq	r2, r0, pc, lsl #14

20001294 <init_systick_handler>:


void init_systick_handler(){
20001294:	b580      	push	{r7, lr}
20001296:	af00      	add	r7, sp, #0
		*((void (**)(void))0x2001C03c) = systick_irq_handler;
20001298:	4b04      	ldr	r3, [pc, #16]	; (200012ac <init_systick_handler+0x18>)
2000129a:	4a05      	ldr	r2, [pc, #20]	; (200012b0 <init_systick_handler+0x1c>)
2000129c:	601a      	str	r2, [r3, #0]
		systick_flag = 0;
2000129e:	4b05      	ldr	r3, [pc, #20]	; (200012b4 <init_systick_handler+0x20>)
200012a0:	2200      	movs	r2, #0
200012a2:	601a      	str	r2, [r3, #0]
}
200012a4:	46c0      	nop			; (mov r8, r8)
200012a6:	46bd      	mov	sp, r7
200012a8:	bd80      	pop	{r7, pc}
200012aa:	46c0      	nop			; (mov r8, r8)
200012ac:	2001c03c 	andcs	ip, r1, ip, lsr r0
200012b0:	200010ed 	andcs	r1, r0, sp, ror #1
200012b4:	200012c0 	andcs	r1, r0, r0, asr #5

200012b8 <points_player1>:
	...

200012b9 <points_player2>:
200012b9:	 	andeq	r0, r0, r0

200012bc <winner_name>:
200012bc:	00000000 	andeq	r0, r0, r0

200012c0 <systick_flag>:
200012c0:	00000000 	andeq	r0, r0, r0

200012c4 <delay_count>:
200012c4:	00000000 	andeq	r0, r0, r0

200012c8 <timer_flag>:
200012c8:	00000000 	andeq	r0, r0, r0

200012cc <count>:
200012cc:	00000000 	andeq	r0, r0, r0

200012d0 <ticks>:
	...

200012d1 <seconds>:
200012d1:	 	stceq	0, cr0, [r0], {-0}

200012d4 <ball_geometry>:
200012d4:	0000000c 	andeq	r0, r0, ip
200012d8:	00000004 	andeq	r0, r0, r4
200012dc:	00000004 	andeq	r0, r0, r4
200012e0:	02000100 	andeq	r0, r0, #0, 2
200012e4:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
200012e8:	00020301 	andeq	r0, r2, r1, lsl #6
200012ec:	02020102 	andeq	r0, r2, #-2147483648	; 0x80000000
200012f0:	01030302 	tsteq	r3, r2, lsl #6
200012f4:	00000203 	andeq	r0, r0, r3, lsl #4
	...

2000131c <paddle_geometry>:
2000131c:	0000001b 	andeq	r0, r0, fp, lsl r0
20001320:	00000005 	andeq	r0, r0, r5
20001324:	00000009 	andeq	r0, r0, r9
20001328:	00010000 	andeq	r0, r1, r0
2000132c:	00030002 	andeq	r0, r3, r2
20001330:	01000004 	tsteq	r0, r4
20001334:	03000200 	movweq	r0, #512	; 0x200
20001338:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
2000133c:	07000600 	streq	r0, [r0, -r0, lsl #12]
20001340:	08010800 	stmdaeq	r1, {fp}
20001344:	08030802 	stmdaeq	r3, {r1, fp}
20001348:	07040804 	streq	r0, [r4, -r4, lsl #16]
2000134c:	05040604 	streq	r0, [r4, #-1540]	; 0xfffff9fc
20001350:	03040404 	movweq	r0, #17412	; 0x4404
20001354:	01040204 	tsteq	r4, r4, lsl #4
20001358:	04020302 	streq	r0, [r2], #-770	; 0xfffffcfe
2000135c:	00000502 	andeq	r0, r0, r2, lsl #10
20001360:	00000000 	andeq	r0, r0, r0

20001364 <winning_score>:
20001364:	00000005 	andeq	r0, r0, r5
20001368:	0a030201 	beq	200c1b74 <winning_score+0xc0810>
2000136c:	0b060504 	bleq	20182784 <winning_score+0x181420>
20001370:	0c090807 	stceq	8, cr0, [r9], {7}
20001374:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001344 <paddle_geometry+0x28>
20001378:	4f5b063f 	svcmi	0x005b063f
2000137c:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001380:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001384:	217e5e39 	cmncs	lr, r9, lsr lr
20001388:	20656854 	rsbcs	r6, r5, r4, asr r8
2000138c:	63697065 	cmnvs	r9, #101	; 0x65
20001390:	6e697720 	cdpvs	7, 6, cr7, cr9, cr0, {1}
20001394:	2072656e 	rsbscs	r6, r2, lr, ror #10
20001398:	203a7369 	eorscs	r7, sl, r9, ror #6
2000139c:	00000000 	andeq	r0, r0, r0
200013a0:	203a3150 	eorscs	r3, sl, r0, asr r1
200013a4:	00000000 	andeq	r0, r0, r0
200013a8:	203a3250 	eorscs	r3, sl, r0, asr r2
200013ac:	00000000 	andeq	r0, r0, r0
200013b0:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
200013b4:	31207265 			; <UNDEFINED> instruction: 0x31207265
200013b8:	00000000 	andeq	r0, r0, r0
200013bc:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
200013c0:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
200013c4:	00000000 	andeq	r0, r0, r0
200013c8:	20000e64 	andcs	r0, r0, r4, ror #28
200013cc:	20000dc6 	andcs	r0, r0, r6, asr #27
200013d0:	20000e64 	andcs	r0, r0, r4, ror #28
200013d4:	20000df4 	strdcs	r0, [r0], -r4
200013d8:	20000e64 	andcs	r0, r0, r4, ror #28
200013dc:	20000e64 	andcs	r0, r0, r4, ror #28
200013e0:	20000e1a 	andcs	r0, r0, sl, lsl lr
200013e4:	20000dde 	ldrdcs	r0, [r0], -lr
200013e8:	20000e64 	andcs	r0, r0, r4, ror #28
200013ec:	20000e08 	andcs	r0, r0, r8, lsl #28

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	0001e90c 	andeq	lr, r1, ip, lsl #18
      14:	00018c00 	andeq	r8, r1, r0, lsl #24
      18:	00001000 	andeq	r1, r0, r0
      1c:	00031c20 	andeq	r1, r3, r0, lsr #24
      20:	00000000 	andeq	r0, r0, r0
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	000000db 	ldrdeq	r0, [r0], -fp
      2c:	d5070202 	strle	r0, [r7, #-514]	; 0xfffffdfe
      30:	02000000 	andeq	r0, r0, #0
      34:	00b50801 	adcseq	r0, r5, r1, lsl #16
      38:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	02ae0676 	adceq	r0, lr, #123731968	; 0x7600000
      44:	007e2000 	rsbseq	r2, lr, r0
      48:	9c010000 	stcls	0, cr0, [r1], {-0}
      4c:	000000a7 	andeq	r0, r0, r7, lsr #1
      50:	6d756e04 	ldclvs	14, cr6, [r5, #-16]!
      54:	1f760100 	svcne	0x00760100
      58:	000000a7 	andeq	r0, r0, r7, lsr #1
      5c:	045f9102 	ldrbeq	r9, [pc], #-258	; 64 <startup-0x1fffff9c>
      60:	76010078 			; <UNDEFINED> instruction: 0x76010078
      64:	0000ae28 	andeq	sl, r0, r8, lsr #28
      68:	58910200 	ldmpl	r1, {r9}
      6c:	01007904 	tsteq	r0, r4, lsl #18
      70:	00ae2f76 	adceq	r2, lr, r6, ror pc
      74:	91020000 	mrsls	r0, (UNDEF: 2)
      78:	011e0554 	tsteq	lr, r4, asr r5
      7c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
      80:	0000ae06 	andeq	sl, r0, r6, lsl #28
      84:	6c910200 	lfmvs	f0, 4, [r1], {0}
      88:	00016205 	andeq	r6, r1, r5, lsl #4
      8c:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
      90:	000000ae 	andeq	r0, r0, lr, lsr #1
      94:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
      98:	00000111 	andeq	r0, r0, r1, lsl r1
      9c:	ae067a01 	vmlage.f32	s14, s12, s2
      a0:	02000000 	andeq	r0, r0, #0
      a4:	02006491 	andeq	r6, r0, #-1862270976	; 0x91000000
      a8:	00be0801 	adcseq	r0, lr, r1, lsl #16
      ac:	04060000 	streq	r0, [r6], #-0
      b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      b4:	00980300 	addseq	r0, r8, r0, lsl #6
      b8:	6d010000 	stcvs	0, cr0, [r1, #-0]
      bc:	00027606 	andeq	r7, r2, r6, lsl #12
      c0:	00003820 	andeq	r3, r0, r0, lsr #16
      c4:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
      c8:	04000000 	streq	r0, [r0], #-0
      cc:	6d010078 	stcvs	0, cr0, [r1, #-480]	; 0xfffffe20
      d0:	0000ae17 	andeq	sl, r0, r7, lsl lr
      d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
      d8:	01007904 	tsteq	r0, r4, lsl #18
      dc:	00ae1e6d 	adceq	r1, lr, sp, ror #28
      e0:	91020000 	mrsls	r0, (UNDEF: 2)
      e4:	00720568 	rsbseq	r0, r2, r8, ror #10
      e8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
      ec:	0000ae06 	andeq	sl, r0, r6, lsl #28
      f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      f4:	014f0700 	cmpeq	pc, r0, lsl #14
      f8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
      fc:	00026606 	andeq	r6, r2, r6, lsl #12
     100:	00001020 	andeq	r1, r0, r0, lsr #32
     104:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     108:	0000008d 	andeq	r0, r0, sp, lsl #1
     10c:	44065e01 	strmi	r5, [r6], #-3585	; 0xfffff1ff
     110:	22200002 	eorcs	r0, r0, #2
     114:	01000000 	mrseq	r0, (UNDEF: 0)
     118:	01d8039c 			; <UNDEFINED> instruction: 0x01d8039c
     11c:	57010000 	strpl	r0, [r1, -r0]
     120:	00020e06 	andeq	r0, r2, r6, lsl #28
     124:	00003620 	andeq	r3, r0, r0, lsr #12
     128:	3f9c0100 	svccc	0x009c0100
     12c:	08000001 	stmdaeq	r0, {r0}
     130:	00000184 	andeq	r0, r0, r4, lsl #3
     134:	a71c5701 	ldrge	r5, [ip, -r1, lsl #14]
     138:	02000000 	andeq	r0, r0, #0
     13c:	03007791 	movweq	r7, #1937	; 0x791
     140:	0000017e 	andeq	r0, r0, lr, ror r1
     144:	d8065001 	stmdale	r6, {r0, ip, lr}
     148:	36200001 	strtcc	r0, [r0], -r1
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	0001659c 	muleq	r1, ip, r5
     154:	01840800 	orreq	r0, r4, r0, lsl #16
     158:	50010000 	andpl	r0, r1, r0
     15c:	0000a719 	andeq	sl, r0, r9, lsl r7
     160:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     164:	01290300 			; <UNDEFINED> instruction: 0x01290300
     168:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     16c:	0001ae06 	andeq	sl, r1, r6, lsl #28
     170:	00002a20 	andeq	r2, r0, r0, lsr #20
     174:	8b9c0100 	blhi	fe70057c <winning_score+0xde6ff218>
     178:	08000001 	stmdaeq	r0, {r0}
     17c:	00000184 	andeq	r0, r0, r4, lsl #3
     180:	a71c4901 	ldrge	r4, [ip, -r1, lsl #18]
     184:	02000000 	andeq	r0, r0, #0
     188:	03007791 	movweq	r7, #1937	; 0x791
     18c:	000000a5 	andeq	r0, r0, r5, lsr #1
     190:	84064401 	strhi	r4, [r6], #-1025	; 0xfffffbff
     194:	2a200001 	bcs	8001a0 <startup-0x1f7ffe60>
     198:	01000000 	mrseq	r0, (UNDEF: 0)
     19c:	0001b19c 	muleq	r1, ip, r1
     1a0:	01840800 	orreq	r0, r4, r0, lsl #16
     1a4:	44010000 	strmi	r0, [r1], #-0
     1a8:	0000a71b 	andeq	sl, r0, fp, lsl r7
     1ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     1b0:	01c10300 	biceq	r0, r1, r0, lsl #6
     1b4:	3a010000 	bcc	401bc <startup-0x1ffbfe44>
     1b8:	0001500a 	andeq	r5, r1, sl
     1bc:	00003420 	andeq	r3, r0, r0, lsr #8
     1c0:	e19c0100 	orrs	r0, ip, r0, lsl #2
     1c4:	08000001 	stmdaeq	r0, {r0}
     1c8:	00000184 	andeq	r0, r0, r4, lsl #3
     1cc:	a7263a01 	strge	r3, [r6, -r1, lsl #20]!
     1d0:	02000000 	andeq	r0, r0, #0
     1d4:	63097791 	movwvs	r7, #38801	; 0x9791
     1d8:	0e3b0100 	rsfeqe	f0, f3, f0
     1dc:	000000a7 	andeq	r0, r0, r7, lsr #1
     1e0:	016e0a00 	cmneq	lr, r0, lsl #20
     1e4:	30010000 	andcc	r0, r1, r0
     1e8:	0000a706 	andeq	sl, r0, r6, lsl #14
     1ec:	00010400 	andeq	r0, r1, r0, lsl #8
     1f0:	00004c20 	andeq	r4, r0, r0, lsr #24
     1f4:	099c0100 	ldmibeq	ip, {r8}
     1f8:	0b000002 	bleq	208 <startup-0x1ffffdf8>
     1fc:	31010063 	tstcc	r1, r3, rrx
     200:	0000a707 	andeq	sl, r0, r7, lsl #14
     204:	6f910200 	svcvs	0x00910200
     208:	00c30a00 	sbceq	r0, r3, r0, lsl #20
     20c:	22010000 	andcs	r0, r1, #0
     210:	0000a707 	andeq	sl, r0, r7, lsl #14
     214:	0000c400 	andeq	ip, r0, r0, lsl #8
     218:	00004020 	andeq	r4, r0, r0, lsr #32
     21c:	319c0100 	orrscc	r0, ip, r0, lsl #2
     220:	0b000002 	bleq	230 <startup-0x1ffffdd0>
     224:	24010063 	strcs	r0, [r1], #-99	; 0xffffff9d
     228:	0000a70e 	andeq	sl, r0, lr, lsl #14
     22c:	6f910200 	svcvs	0x00910200
     230:	00e80a00 	rsceq	r0, r8, r0, lsl #20
     234:	13010000 	movwne	r0, #4096	; 0x1000
     238:	0000a707 	andeq	sl, r0, r7, lsl #14
     23c:	00009000 	andeq	r9, r0, r0
     240:	00003420 	andeq	r3, r0, r0, lsr #8
     244:	599c0100 	ldmibpl	ip, {r8}
     248:	0b000002 	bleq	258 <startup-0x1ffffda8>
     24c:	15010063 	strne	r0, [r1, #-99]	; 0xffffff9d
     250:	0000a70e 	andeq	sl, r0, lr, lsl #14
     254:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     258:	013a0c00 	teqeq	sl, r0, lsl #24
     25c:	0b010000 	bleq	40264 <startup-0x1ffbfd9c>
     260:	00004806 	andeq	r4, r0, r6, lsl #16
     264:	00004820 	andeq	r4, r0, r0, lsr #16
     268:	8a9c0100 	bhi	fe700670 <winning_score+0xde6ff30c>
     26c:	04000002 	streq	r0, [r0], #-2
     270:	0b010078 	bleq	40458 <startup-0x1ffbfba8>
     274:	0000a720 	andeq	sl, r0, r0, lsr #14
     278:	6f910200 	svcvs	0x00910200
     27c:	0100630b 	tsteq	r0, fp, lsl #6
     280:	00a7070c 	adceq	r0, r7, ip, lsl #14
     284:	91020000 	mrsls	r0, (UNDEF: 2)
     288:	fe0d0077 	mcr2	0, 0, r0, cr13, cr7, {3}
     28c:	01000000 	mrseq	r0, (UNDEF: 0)
     290:	00100605 	andseq	r0, r0, r5, lsl #12
     294:	00382000 	eorseq	r2, r8, r0
     298:	9c010000 	stcls	0, cr0, [r1], {-0}
     29c:	01007804 	tsteq	r0, r4, lsl #16
     2a0:	00a71e05 	adceq	r1, r7, r5, lsl #28
     2a4:	91020000 	mrsls	r0, (UNDEF: 2)
     2a8:	00630b6f 	rsbeq	r0, r3, pc, ror #22
     2ac:	a70e0601 	strge	r0, [lr, -r1, lsl #12]
     2b0:	02000000 	andeq	r0, r0, #0
     2b4:	00007791 	muleq	r0, r1, r7
     2b8:	0000035f 	andeq	r0, r0, pc, asr r3
     2bc:	01030004 	tsteq	r3, r4
     2c0:	01040000 	mrseq	r0, (UNDEF: 4)
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	0002d80c 	andeq	sp, r2, ip, lsl #16
     2cc:	00018c00 	andeq	r8, r1, r0, lsl #24
     2d0:	00032c00 	andeq	r2, r3, r0, lsl #24
     2d4:	00029c20 	andeq	r9, r2, r0, lsr #24
     2d8:	00019600 	andeq	r9, r1, r0, lsl #12
     2dc:	02020200 	andeq	r0, r2, #0, 4
     2e0:	00450901 	subeq	r0, r5, r1, lsl #18
     2e4:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     2e8:	0a020200 	beq	80af0 <startup-0x1ff7f510>
     2ec:	00000045 	andeq	r0, r0, r5, asr #32
     2f0:	00790300 	rsbseq	r0, r9, r0, lsl #6
     2f4:	450c0202 	strmi	r0, [ip, #-514]	; 0xfffffdfe
     2f8:	01000000 	mrseq	r0, (UNDEF: 0)
     2fc:	08010400 	stmdaeq	r1, {sl}
     300:	000000be 	strheq	r0, [r0], -lr
     304:	00038c05 	andeq	r8, r3, r5, lsl #24
     308:	02030200 	andeq	r0, r3, #0, 4
     30c:	00000025 	andeq	r0, r0, r5, lsr #32
     310:	17024802 	strne	r4, [r2, -r2, lsl #16]
     314:	00009509 	andeq	r9, r0, r9, lsl #10
     318:	02b70600 	adcseq	r0, r7, #0, 12
     31c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     320:	00009509 	andeq	r9, r0, r9, lsl #10
     324:	7b060000 	blvc	18032c <startup-0x1fe7fcd4>
     328:	02000002 	andeq	r0, r0, #2
     32c:	00950919 	addseq	r0, r5, r9, lsl r9
     330:	06040000 	streq	r0, [r4], -r0
     334:	00000281 	andeq	r0, r0, r1, lsl #5
     338:	95091a02 	strls	r1, [r9, #-2562]	; 0xfffff5fe
     33c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     340:	00787003 	rsbseq	r7, r8, r3
     344:	9c0b1b02 			; <UNDEFINED> instruction: 0x9c0b1b02
     348:	0c000000 	stceq	0, cr0, [r0], {-0}
     34c:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     350:	00746e69 	rsbseq	r6, r4, r9, ror #28
     354:	00004c08 	andeq	r4, r0, r8, lsl #24
     358:	0000ac00 	andeq	sl, r0, r0, lsl #24
     35c:	00ac0900 	adceq	r0, ip, r0, lsl #18
     360:	001d0000 	andseq	r0, sp, r0
     364:	db070404 	blle	1c137c <startup-0x1fe3ec84>
     368:	05000000 	streq	r0, [r0, #-0]
     36c:	000001f2 	strdeq	r0, [r0], -r2
     370:	58021c02 	stmdapl	r2, {r1, sl, fp, ip}
     374:	05000000 	streq	r0, [r0, #-0]
     378:	000001f1 	strdeq	r0, [r0], -r1
     37c:	cb0e1c02 	blgt	38738c <startup-0x1fc78c74>
     380:	0a000000 	beq	388 <startup-0x1ffffc78>
     384:	00005804 	andeq	r5, r0, r4, lsl #16
     388:	02b20b00 	adcseq	r0, r2, #0, 22
     38c:	02240000 	eoreq	r0, r4, #0
     390:	0154101e 	cmpeq	r4, lr, lsl r0
     394:	67030000 	strvs	r0, [r3, -r0]
     398:	02006f65 	andeq	r6, r0, #404	; 0x194
     39c:	00bf0f1f 	adcseq	r0, pc, pc, lsl pc	; <UNPREDICTABLE>
     3a0:	06000000 	streq	r0, [r0], -r0
     3a4:	00000212 	andeq	r0, r0, r2, lsl r2
     3a8:	95092002 	strls	r2, [r9, #-2]
     3ac:	04000000 	streq	r0, [r0], #-0
     3b0:	00021706 	andeq	r1, r2, r6, lsl #14
     3b4:	0e200200 	cdpeq	2, 2, cr0, cr0, cr0, {0}
     3b8:	00000095 	muleq	r0, r5, r0
     3bc:	023b0608 	eorseq	r0, fp, #8, 12	; 0x800000
     3c0:	21020000 	mrscs	r0, (UNDEF: 2)
     3c4:	00009509 	andeq	r9, r0, r9, lsl #10
     3c8:	40060c00 	andmi	r0, r6, r0, lsl #24
     3cc:	02000002 	andeq	r0, r0, #2
     3d0:	00950e21 	addseq	r0, r5, r1, lsr #28
     3d4:	06100000 	ldreq	r0, [r0], -r0
     3d8:	0000029b 	muleq	r0, fp, r2
     3dc:	650d2202 	strvs	r2, [sp, #-514]	; 0xfffffdfe
     3e0:	14000001 	strne	r0, [r0], #-1
     3e4:	00053e06 	andeq	r3, r5, r6, lsl #28
     3e8:	0d230200 	sfmeq	f0, 4, [r3, #-0]
     3ec:	00000165 	andeq	r0, r0, r5, ror #2
     3f0:	020d0618 	andeq	r0, sp, #24, 12	; 0x1800000
     3f4:	24020000 	strcs	r0, [r2], #-0
     3f8:	0001650c 	andeq	r6, r1, ip, lsl #10
     3fc:	31061c00 	tstcc	r6, r0, lsl #24
     400:	02000002 	andeq	r0, r0, #2
     404:	01800d25 	orreq	r0, r0, r5, lsr #26
     408:	00200000 	eoreq	r0, r0, r0
     40c:	00015f0c 	andeq	r5, r1, ip, lsl #30
     410:	015f0d00 	cmpeq	pc, r0, lsl #26
     414:	0a000000 	beq	41c <startup-0x1ffffbe4>
     418:	0000d104 	andeq	sp, r0, r4, lsl #2
     41c:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
     420:	0c000001 	stceq	0, cr0, [r0], {1}
     424:	00000180 	andeq	r0, r0, r0, lsl #3
     428:	00015f0d 	andeq	r5, r1, sp, lsl #30
     42c:	00950d00 	addseq	r0, r5, r0, lsl #26
     430:	950d0000 	strls	r0, [sp, #-0]
     434:	00000000 	andeq	r0, r0, r0
     438:	016b040a 	cmneq	fp, sl, lsl #8
     43c:	15050000 	strne	r0, [r5, #-0]
     440:	02000005 	andeq	r0, r0, #5
     444:	00d10226 	sbcseq	r0, r1, r6, lsr #4
     448:	02040000 	andeq	r0, r4, #0
     44c:	0000d507 	andeq	sp, r0, r7, lsl #10
     450:	08010400 	stmdaeq	r1, {sl}
     454:	000000b5 	strheq	r0, [r0], -r5
     458:	0002450e 	andeq	r4, r2, lr, lsl #10
     45c:	0a040100 	beq	100864 <startup-0x1feff79c>
     460:	000000b3 	strheq	r0, [r0], -r3
     464:	12d40305 	sbcsne	r0, r4, #335544320	; 0x14000000
     468:	530e2000 	movwpl	r2, #57344	; 0xe000
     46c:	01000002 	tsteq	r0, r2
     470:	00b30a0c 	adcseq	r0, r3, ip, lsl #20
     474:	03050000 	movweq	r0, #20480	; 0x5000
     478:	2000131c 	andcs	r1, r0, ip, lsl r3
     47c:	0002870f 	andeq	r8, r2, pc, lsl #14
     480:	08580100 	ldmdaeq	r8, {r8}^
     484:	00000186 	andeq	r0, r0, r6, lsl #3
     488:	20000558 	andcs	r0, r0, r8, asr r5
     48c:	00000070 	andeq	r0, r0, r0, ror r0
     490:	020d9c01 	andeq	r9, sp, #256	; 0x100
     494:	3b100000 	blcc	40049c <startup-0x1fbffb64>
     498:	01000002 	tsteq	r0, r2
     49c:	00952058 	addseq	r2, r5, r8, asr r0
     4a0:	91020000 	mrsls	r0, (UNDEF: 2)
     4a4:	02401040 	subeq	r1, r0, #64	; 0x40
     4a8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     4ac:	0000952a 	andeq	r9, r0, sl, lsr #10
     4b0:	bc910300 	ldclt	3, cr0, [r1], {0}
     4b4:	028e117f 	addeq	r1, lr, #-1073741793	; 0xc000001f
     4b8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     4bc:	0001860c 	andeq	r8, r1, ip, lsl #12
     4c0:	4c910200 	lfmmi	f0, 4, [r1], {0}
     4c4:	02a00f00 	adceq	r0, r0, #0, 30
     4c8:	4b010000 	blmi	404d0 <startup-0x1ffbfb30>
     4cc:	00018608 	andeq	r8, r1, r8, lsl #12
     4d0:	0004e600 	andeq	lr, r4, r0, lsl #12
     4d4:	00007220 	andeq	r7, r0, r0, lsr #4
     4d8:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
     4dc:	10000002 	andne	r0, r0, r2
     4e0:	0000023b 	andeq	r0, r0, fp, lsr r2
     4e4:	951e4b01 	ldrls	r4, [lr, #-2817]	; 0xfffff4ff
     4e8:	02000000 	andeq	r0, r0, #0
     4ec:	40104091 	mulsmi	r0, r1, r0
     4f0:	01000002 	tsteq	r0, r2
     4f4:	0095284b 	addseq	r2, r5, fp, asr #16
     4f8:	91030000 	mrsls	r0, (UNDEF: 3)
     4fc:	a7117fbc 			; <UNDEFINED> instruction: 0xa7117fbc
     500:	01000002 	tsteq	r0, r2
     504:	01860c4c 	orreq	r0, r6, ip, asr #24
     508:	91020000 	mrsls	r0, (UNDEF: 2)
     50c:	1c12004c 	ldcne	0, cr0, [r2], {76}	; 0x4c
     510:	01000002 	tsteq	r0, r2
     514:	04c60646 	strbeq	r0, [r6], #1606	; 0x646
     518:	00202000 	eoreq	r2, r0, r0
     51c:	9c010000 	stcls	0, cr0, [r1], {-0}
     520:	0000029a 	muleq	r0, sl, r2
     524:	00029410 	andeq	r9, r2, r0, lsl r4
     528:	23460100 	movtcs	r0, #24832	; 0x6100
     52c:	0000029a 	muleq	r0, sl, r2
     530:	10749102 	rsbsne	r9, r4, r2, lsl #2
     534:	000002d1 	ldrdeq	r0, [r0], -r1
     538:	952f4601 	strls	r4, [pc, #-1537]!	; ffffff3f <winning_score+0xdfffebdb>
     53c:	02000000 	andeq	r0, r0, #0
     540:	74107091 	ldrvc	r7, [r0], #-145	; 0xffffff6f
     544:	01000002 	tsteq	r0, r2
     548:	00953b46 	addseq	r3, r5, r6, asr #22
     54c:	91020000 	mrsls	r0, (UNDEF: 2)
     550:	040a006c 	streq	r0, [sl], #-108	; 0xffffff94
     554:	00000186 	andeq	r0, r0, r6, lsl #3
     558:	0001fb13 	andeq	pc, r1, r3, lsl fp	; <UNPREDICTABLE>
     55c:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
     560:	20000470 	andcs	r0, r0, r0, ror r4
     564:	00000056 	andeq	r0, r0, r6, asr r0
     568:	02c69c01 	sbceq	r9, r6, #256	; 0x100
     56c:	94100000 	ldrls	r0, [r0], #-0
     570:	01000002 	tsteq	r0, r2
     574:	029a2036 	addseq	r2, sl, #54	; 0x36
     578:	91020000 	mrsls	r0, (UNDEF: 2)
     57c:	c1130074 	tstgt	r3, r4, ror r0
     580:	01000002 	tsteq	r0, r2
     584:	03ec0622 	mvneq	r0, #35651584	; 0x2200000
     588:	00842000 	addeq	r2, r4, r0
     58c:	9c010000 	stcls	0, cr0, [r1], {-0}
     590:	000002ec 	andeq	r0, r0, ip, ror #5
     594:	00029410 	andeq	r9, r2, r0, lsl r4
     598:	1e220100 	sufnes	f0, f2, f0
     59c:	0000029a 	muleq	r0, sl, r2
     5a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     5a4:	00026313 	andeq	r6, r2, r3, lsl r3
     5a8:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
     5ac:	2000038c 	andcs	r0, r0, ip, lsl #7
     5b0:	00000060 	andeq	r0, r0, r0, rrx
     5b4:	03299c01 			; <UNDEFINED> instruction: 0x03299c01
     5b8:	94100000 	ldrls	r0, [r0], #-0
     5bc:	01000002 	tsteq	r0, r2
     5c0:	029a1f1d 	addseq	r1, sl, #29, 30	; 0x74
     5c4:	91020000 	mrsls	r0, (UNDEF: 2)
     5c8:	0394146c 	orrseq	r1, r4, #108, 8	; 0x6c000000
     5cc:	004e2000 	subeq	r2, lr, r0
     5d0:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
     5d4:	0f1e0100 	svceq	0x001e0100
     5d8:	00000095 	muleq	r0, r5, r0
     5dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     5e0:	02e81600 	rsceq	r1, r8, #0, 12
     5e4:	17010000 	strne	r0, [r1, -r0]
     5e8:	00032c06 	andeq	r2, r3, r6, lsl #24
     5ec:	00006020 	andeq	r6, r0, r0, lsr #32
     5f0:	109c0100 	addsne	r0, ip, r0, lsl #2
     5f4:	00000294 	muleq	r0, r4, r2
     5f8:	9a1e1701 	bls	786204 <startup-0x1f879dfc>
     5fc:	02000002 	andeq	r0, r0, #2
     600:	34146c91 	ldrcc	r6, [r4], #-3217	; 0xfffff36f
     604:	4e200003 	cdpmi	0, 2, cr0, cr0, cr3, {0}
     608:	15000000 	strne	r0, [r0, #-0]
     60c:	18010069 	stmdane	r1, {r0, r3, r5, r6}
     610:	0000950d 	andeq	r9, r0, sp, lsl #10
     614:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     618:	3c000000 	stccc	0, cr0, [r0], {-0}
     61c:	04000001 	streq	r0, [r0], #-1
     620:	00026800 	andeq	r6, r2, r0, lsl #16
     624:	00010400 	andeq	r0, r1, r0, lsl #8
     628:	0c000000 	stceq	0, cr0, [r0], {-0}
     62c:	00000307 	andeq	r0, r0, r7, lsl #6
     630:	0000018c 	andeq	r0, r0, ip, lsl #3
     634:	200005c8 	andcs	r0, r0, r8, asr #11
     638:	0000006a 	andeq	r0, r0, sl, rrx
     63c:	0000034b 	andeq	r0, r0, fp, asr #6
     640:	05011a02 	streq	r1, [r1, #-2562]	; 0xfffff5fe
     644:	0000d609 	andeq	sp, r0, r9, lsl #12
     648:	72730300 	rsbsvc	r0, r3, #0, 6
     64c:	1a060100 	bne	180a54 <startup-0x1fe7f5ac>
     650:	000000dd 	ldrdeq	r0, [r0], -sp
     654:	02fe0400 	rscseq	r0, lr, #0, 8
     658:	07010000 	streq	r0, [r1, -r0]
     65c:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     660:	64030200 	strvs	r0, [r3], #-512	; 0xfffffe00
     664:	08010072 	stmdaeq	r1, {r1, r4, r5, r6}
     668:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     66c:	0f040400 	svceq	0x00040400
     670:	01000003 	tsteq	r0, r3
     674:	00dd1a09 	sbcseq	r1, sp, r9, lsl #20
     678:	03060000 	movweq	r0, #24576	; 0x6000
     67c:	00727262 	rsbseq	r7, r2, r2, ror #4
     680:	dd1a0a01 	vldrle	s0, [sl, #-4]
     684:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     688:	00031804 	andeq	r1, r3, r4, lsl #16
     68c:	1a0b0100 	bne	2c0a94 <startup-0x1fd3f56c>
     690:	000000dd 	ldrdeq	r0, [r0], -sp
     694:	7263030a 	rsbvc	r0, r3, #671088640	; 0x28000000
     698:	0c010031 	stceq	0, cr0, [r1], {49}	; 0x31
     69c:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     6a0:	21040c00 	tstcs	r4, r0, lsl #24
     6a4:	01000003 	tsteq	r0, r3
     6a8:	00dd1a0d 	sbcseq	r1, sp, sp, lsl #20
     6ac:	030e0000 	movweq	r0, #57344	; 0xe000
     6b0:	00327263 	eorseq	r7, r2, r3, ror #4
     6b4:	dd1a0e01 	ldcle	14, cr0, [sl, #-4]
     6b8:	10000000 	andne	r0, r0, r0
     6bc:	00032a04 	andeq	r2, r3, r4, lsl #20
     6c0:	1a0f0100 	bne	3c0ac8 <startup-0x1fc3f538>
     6c4:	000000dd 	ldrdeq	r0, [r0], -sp
     6c8:	72630312 	rsbvc	r0, r3, #1207959552	; 0x48000000
     6cc:	10010033 	andne	r0, r1, r3, lsr r0
     6d0:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     6d4:	33041400 	movwcc	r1, #17408	; 0x4400
     6d8:	01000003 	tsteq	r0, r3
     6dc:	00dd1a11 	sbcseq	r1, sp, r1, lsl sl
     6e0:	04160000 	ldreq	r0, [r6], #-0
     6e4:	0000033c 	andeq	r0, r0, ip, lsr r3
     6e8:	dd1a1201 	lfmle	f1, 4, [sl, #-4]
     6ec:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     6f0:	07020500 	streq	r0, [r2, -r0, lsl #10]
     6f4:	000000d5 	ldrdeq	r0, [r0], -r5
     6f8:	0000d606 	andeq	sp, r0, r6, lsl #12
     6fc:	02f80700 	rscseq	r0, r8, #0, 14
     700:	13010000 	movwne	r0, #4096	; 0x1000
     704:	00002503 	andeq	r2, r0, r3, lsl #10
     708:	03410800 	movteq	r0, #6144	; 0x1800
     70c:	21010000 	mrscs	r0, (UNDEF: 1)
     710:	00060806 	andeq	r0, r6, r6, lsl #16
     714:	00002a20 	andeq	r2, r0, r0, lsr #20
     718:	129c0100 	addsne	r0, ip, #0, 2
     71c:	09000001 	stmdbeq	r0, {r0}
     720:	21010073 	tstcs	r1, r3, ror r0
     724:	00011212 	andeq	r1, r1, r2, lsl r2
     728:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     72c:	18040a00 	stmdane	r4, {r9, fp}
     730:	05000001 	streq	r0, [r0, #-1]
     734:	00be0801 	adcseq	r0, lr, r1, lsl #16
     738:	470b0000 	strmi	r0, [fp, -r0]
     73c:	01000003 	tsteq	r0, r3
     740:	05c80d17 	strbeq	r0, [r8, #3351]	; 0xd17
     744:	00402000 	subeq	r2, r0, r0
     748:	9c010000 	stcls	0, cr0, [r1], {-0}
     74c:	01006309 	tsteq	r0, r9, lsl #6
     750:	01181d17 	tsteq	r8, r7, lsl sp
     754:	91020000 	mrsls	r0, (UNDEF: 2)
     758:	90000077 	andls	r0, r0, r7, ror r0
     75c:	04000000 	streq	r0, [r0], #-0
     760:	00031c00 	andeq	r1, r3, r0, lsl #24
     764:	00010400 	andeq	r0, r1, r0, lsl #8
     768:	0c000000 	stceq	0, cr0, [r0], {-0}
     76c:	00000369 	andeq	r0, r0, r9, ror #6
     770:	0000018c 	andeq	r0, r0, ip, lsl #3
     774:	20000634 	andcs	r0, r0, r4, lsr r6
     778:	0000008c 	andeq	r0, r0, ip, lsl #1
     77c:	000003c1 	andeq	r0, r0, r1, asr #7
     780:	00035d02 	andeq	r5, r3, r2, lsl #26
     784:	06120100 	ldreq	r0, [r2], -r0, lsl #2
     788:	2000067c 	andcs	r0, r0, ip, ror r6
     78c:	00000044 	andeq	r0, r0, r4, asr #32
     790:	71039c01 	tstvc	r3, r1, lsl #24
     794:	01000003 	tsteq	r0, r3
     798:	066a060d 	strbteq	r0, [sl], -sp, lsl #12
     79c:	00122000 	andseq	r2, r2, r0
     7a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     7a4:	00035204 	andeq	r5, r3, r4, lsl #4
     7a8:	06030100 	streq	r0, [r3], -r0, lsl #2
     7ac:	20000634 	andcs	r0, r0, r4, lsr r6
     7b0:	00000036 	andeq	r0, r0, r6, lsr r0
     7b4:	00859c01 	addeq	r9, r5, r1, lsl #24
     7b8:	6d050000 	stcvs	0, cr0, [r5, #-0]
     7bc:	03010073 	movweq	r0, #4211	; 0x1073
     7c0:	0000851e 	andeq	r8, r0, lr, lsl r5
     7c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7c8:	00063c06 	andeq	r3, r6, r6, lsl #24
     7cc:	00002420 	andeq	r2, r0, r0, lsr #8
     7d0:	00690700 	rsbeq	r0, r9, r0, lsl #14
     7d4:	8c0e0401 	cfstrshi	mvf0, [lr], {1}
     7d8:	02000000 	andeq	r0, r0, #0
     7dc:	00007491 	muleq	r0, r1, r4
     7e0:	db070408 	blle	1c1808 <startup-0x1fe3e7f8>
     7e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     7e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     7ec:	32000074 	andcc	r0, r0, #116	; 0x74
     7f0:	04000003 	streq	r0, [r0], #-3
     7f4:	0003bd00 	andeq	fp, r3, r0, lsl #26
     7f8:	00010400 	andeq	r0, r1, r0, lsl #8
     7fc:	0c000000 	stceq	0, cr0, [r0], {-0}
     800:	0000040b 	andeq	r0, r0, fp, lsl #8
     804:	0000018c 	andeq	r0, r0, ip, lsl #3
     808:	200006c0 	andcs	r0, r0, r0, asr #13
     80c:	00000312 	andeq	r0, r0, r2, lsl r3
     810:	00000474 	andeq	r0, r0, r4, ror r4
     814:	01020202 	tsteq	r2, r2, lsl #4
     818:	00004509 	andeq	r4, r0, r9, lsl #10
     81c:	00780300 	rsbseq	r0, r8, r0, lsl #6
     820:	450a0202 	strmi	r0, [sl, #-514]	; 0xfffffdfe
     824:	00000000 	andeq	r0, r0, r0
     828:	02007903 	andeq	r7, r0, #49152	; 0xc000
     82c:	00450c02 	subeq	r0, r5, r2, lsl #24
     830:	00010000 	andeq	r0, r1, r0
     834:	be080104 	adflte	f0, f0, f4
     838:	05000000 	streq	r0, [r0, #-0]
     83c:	0000038c 	andeq	r0, r0, ip, lsl #7
     840:	25020302 	strcs	r0, [r2, #-770]	; 0xfffffcfe
     844:	02000000 	andeq	r0, r0, #0
     848:	09050204 	stmdbeq	r5, {r2, r9}
     84c:	0000007a 	andeq	r0, r0, sl, ror r0
     850:	00317003 	eorseq	r7, r1, r3
     854:	4c0b0602 	stcmi	6, cr0, [fp], {2}
     858:	00000000 	andeq	r0, r0, r0
     85c:	00327003 	eorseq	r7, r2, r3
     860:	4c0b0702 	stcmi	7, cr0, [fp], {2}
     864:	02000000 	andeq	r0, r0, #0
     868:	03dd0500 	bicseq	r0, sp, #0, 10
     86c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     870:	00005802 	andeq	r5, r0, r2, lsl #16
     874:	02040200 	andeq	r0, r4, #0, 4
     878:	00b1090a 	adcseq	r0, r1, sl, lsl #18
     87c:	70030000 	andvc	r0, r3, r0
     880:	0b0b0200 	bleq	2c1088 <startup-0x1fd3ef78>
     884:	0000004c 	andeq	r0, r0, ip, asr #32
     888:	00780300 	rsbseq	r0, r8, r0, lsl #6
     88c:	450a0c02 	strmi	r0, [sl, #-3074]	; 0xfffff3fe
     890:	02000000 	andeq	r0, r0, #0
     894:	02007903 	andeq	r7, r0, #49152	; 0xc000
     898:	00450c0c 	subeq	r0, r5, ip, lsl #24
     89c:	00030000 	andeq	r0, r3, r0
     8a0:	0003f905 	andeq	pc, r3, r5, lsl #18
     8a4:	020d0200 	andeq	r0, sp, #0, 4
     8a8:	00000086 	andeq	r0, r0, r6, lsl #1
     8ac:	0003fe06 	andeq	pc, r3, r6, lsl #28
     8b0:	0f020800 	svceq	0x00020800
     8b4:	0000ee10 	andeq	lr, r0, r0, lsl lr
     8b8:	00780300 	rsbseq	r0, r8, r0, lsl #6
     8bc:	450a1002 	strmi	r1, [sl, #-2]
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	02007903 	andeq	r7, r0, #49152	; 0xc000
     8c8:	00450c10 	subeq	r0, r5, r0, lsl ip
     8cc:	07010000 	streq	r0, [r1, -r0]
     8d0:	0000037d 	andeq	r0, r0, sp, ror r3
     8d4:	ee1a1102 	mufe	f1, f2, f2
     8d8:	04000000 	streq	r0, [r0], #-0
     8dc:	bd040800 	stclt	8, cr0, [r4, #-0]
     8e0:	05000000 	streq	r0, [r0, #-0]
     8e4:	00000388 	andeq	r0, r0, r8, lsl #7
     8e8:	bd021302 	stclt	3, cr1, [r2, #-8]
     8ec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     8f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     8f4:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
     8f8:	0000db07 	andeq	sp, r0, r7, lsl #22
     8fc:	07020400 	streq	r0, [r2, -r0, lsl #8]
     900:	000000d5 	ldrdeq	r0, [r0], -r5
     904:	b5080104 	strlt	r0, [r8, #-260]	; 0xfffffefc
     908:	0a000000 	beq	910 <startup-0x1ffff6f0>
     90c:	00000392 	muleq	r0, r2, r3
     910:	45064f01 	strmi	r4, [r6, #-3841]	; 0xfffff0ff
     914:	52000000 	andpl	r0, r0, #0
     918:	80200009 	eorhi	r0, r0, r9
     91c:	01000000 	mrseq	r0, (UNDEF: 0)
     920:	00018a9c 	muleq	r1, ip, sl
     924:	03d40b00 	bicseq	r0, r4, #0, 22
     928:	4f010000 	svcmi	0x00010000
     92c:	0000f41d 	andeq	pc, r0, sp, lsl r4	; <UNPREDICTABLE>
     930:	50910200 	addspl	r0, r1, r0, lsl #4
     934:	0030700c 	eorseq	r7, r0, ip
     938:	4c0b5001 	stcmi	0, cr5, [fp], {1}
     93c:	02000000 	andeq	r0, r0, #0
     940:	700c6091 	mulvc	ip, r1, r0
     944:	51010031 	tstpl	r1, r1, lsr r0
     948:	00004c0b 	andeq	r4, r0, fp, lsl #24
     94c:	5c910200 	lfmpl	f0, 4, [r1], {0}
     950:	7274700c 	rsbsvc	r7, r4, #12
     954:	1a530100 	bne	14c0d5c <startup-0x1eb3f2a4>
     958:	000000ee 	andeq	r0, r0, lr, ror #1
     95c:	0d649102 	stfeqp	f1, [r4, #-8]!
     960:	20000978 	andcs	r0, r0, r8, ror r9
     964:	0000004a 	andeq	r0, r0, sl, asr #32
     968:	0003a70e 	andeq	sl, r3, lr, lsl #14
     96c:	0e570100 	rdfeqs	f0, f7, f0
     970:	0000007a 	andeq	r0, r0, sl, ror r0
     974:	00589102 	subseq	r9, r8, r2, lsl #2
     978:	03e80a00 	mvneq	r0, #0, 20
     97c:	41010000 	mrsmi	r0, (UNDEF: 1)
     980:	00004506 	andeq	r4, r0, r6, lsl #10
     984:	00081c00 	andeq	r1, r8, r0, lsl #24
     988:	00013620 	andeq	r3, r1, r0, lsr #12
     98c:	0a9c0100 	beq	fe700d94 <winning_score+0xde6ffa30>
     990:	0b000002 	bleq	9a0 <startup-0x1ffff660>
     994:	000003ed 	andeq	r0, r0, sp, ror #7
     998:	b1154101 	tstlt	r5, r1, lsl #2
     99c:	02000000 	andeq	r0, r0, #0
     9a0:	5a0e5491 	bpl	395bec <startup-0x1fc6a414>
     9a4:	01000006 	tsteq	r0, r6
     9a8:	004c0b42 	subeq	r0, ip, r2, asr #22
     9ac:	91020000 	mrsls	r0, (UNDEF: 2)
     9b0:	6e650c64 	cdpvs	12, 6, cr0, cr5, cr4, {3}
     9b4:	43010064 	movwmi	r0, #4196	; 0x1064
     9b8:	00004c0b 	andeq	r4, r0, fp, lsl #24
     9bc:	60910200 	addsvs	r0, r1, r0, lsl #4
     9c0:	0004050e 	andeq	r0, r4, lr, lsl #10
     9c4:	0b440100 	bleq	1100dcc <startup-0x1eeff234>
     9c8:	0000004c 	andeq	r0, r0, ip, asr #32
     9cc:	0c5c9102 	ldfeqp	f1, [ip], {2}
     9d0:	45010078 	strmi	r0, [r1, #-120]	; 0xffffff88
     9d4:	0000450a 	andeq	r4, r0, sl, lsl #10
     9d8:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     9dc:	0100790c 	tsteq	r0, ip, lsl #18
     9e0:	00450a46 	subeq	r0, r5, r6, asr #20
     9e4:	91020000 	mrsls	r0, (UNDEF: 2)
     9e8:	03a70e66 			; <UNDEFINED> instruction: 0x03a70e66
     9ec:	47010000 	strmi	r0, [r1, -r0]
     9f0:	00007a0a 	andeq	r7, r0, sl, lsl #20
     9f4:	58910200 	ldmpl	r1, {r9}
     9f8:	039f0a00 	orrseq	r0, pc, #0, 20
     9fc:	33010000 	movwcc	r0, #4096	; 0x1000
     a00:	00004506 	andeq	r4, r0, r6, lsl #10
     a04:	0007d400 	andeq	sp, r7, r0, lsl #8
     a08:	00004820 	andeq	r4, r0, r0, lsr #16
     a0c:	6c9c0100 	ldfvss	f0, [ip], {0}
     a10:	0b000002 	bleq	a20 <startup-0x1ffff5e0>
     a14:	000003a7 	andeq	r0, r0, r7, lsr #7
     a18:	7a183301 	bvc	60d624 <startup-0x1f9f29dc>
     a1c:	02000000 	andeq	r0, r0, #0
     a20:	780c6491 	stmdavc	ip, {r0, r4, r7, sl, sp, lr}
     a24:	34010030 	strcc	r0, [r1], #-48	; 0xffffffd0
     a28:	0001000d 	andeq	r0, r1, sp
     a2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a30:	0031780c 	eorseq	r7, r1, ip, lsl #16
     a34:	000d3501 	andeq	r3, sp, r1, lsl #10
     a38:	02000001 	andeq	r0, r0, #1
     a3c:	790c7091 	stmdbvc	ip, {r0, r4, r7, ip, sp, lr}
     a40:	37010030 	smladxcc	r1, r0, r0, r0
     a44:	0001000d 	andeq	r0, r1, sp
     a48:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a4c:	0031790c 	eorseq	r7, r1, ip, lsl #18
     a50:	000d3801 	andeq	r3, sp, r1, lsl #16
     a54:	02000001 	andeq	r0, r0, #1
     a58:	0f006891 	svceq	0x00006891
     a5c:	000003be 			; <UNDEFINED> instruction: 0x000003be
     a60:	c0060701 	andgt	r0, r6, r1, lsl #14
     a64:	14200006 	strtne	r0, [r0], #-6
     a68:	01000001 	tsteq	r0, r1
     a6c:	3078109c 			; <UNDEFINED> instruction: 0x3078109c
     a70:	20070100 	andcs	r0, r7, r0, lsl #2
     a74:	00000100 	andeq	r0, r0, r0, lsl #2
     a78:	10549102 	subsne	r9, r4, r2, lsl #2
     a7c:	01003178 	tsteq	r0, r8, ror r1
     a80:	01002707 	tsteq	r0, r7, lsl #14
     a84:	91020000 	mrsls	r0, (UNDEF: 2)
     a88:	30791050 	rsbscc	r1, r9, r0, asr r0
     a8c:	2e070100 	adfcss	f0, f7, f0
     a90:	00000100 	andeq	r0, r0, r0, lsl #2
     a94:	104c9102 	subne	r9, ip, r2, lsl #2
     a98:	01003179 	tsteq	r0, r9, ror r1
     a9c:	01003507 	tsteq	r0, r7, lsl #10
     aa0:	91020000 	mrsls	r0, (UNDEF: 2)
     aa4:	03e20e48 	mvneq	r0, #72, 28	; 0x480
     aa8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     aac:	0000450a 	andeq	r4, r0, sl, lsl #10
     ab0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ab4:	0003ac0e 	andeq	sl, r3, lr, lsl #24
     ab8:	09090100 	stmdbeq	r9, {r8}
     abc:	00000100 	andeq	r0, r0, r0, lsl #2
     ac0:	0e609102 	lgneqs	f1, f2
     ac4:	000003f2 	strdeq	r0, [r0], -r2
     ac8:	00091a01 	andeq	r1, r9, r1, lsl #20
     acc:	02000001 	andeq	r0, r0, #1
     ad0:	b70e5c91 			; <UNDEFINED> instruction: 0xb70e5c91
     ad4:	01000003 	tsteq	r0, r3
     ad8:	0100091b 	tsteq	r0, fp, lsl r9
     adc:	91020000 	mrsls	r0, (UNDEF: 2)
     ae0:	03b10e58 			; <UNDEFINED> instruction: 0x03b10e58
     ae4:	1c010000 	stcne	0, cr0, [r1], {-0}
     ae8:	00010009 	andeq	r0, r1, r9
     aec:	70910200 	addsvc	r0, r1, r0, lsl #4
     af0:	0100790c 	tsteq	r0, ip, lsl #18
     af4:	0100091d 	tsteq	r0, sp, lsl r9
     af8:	91020000 	mrsls	r0, (UNDEF: 2)
     afc:	03820e6c 	orreq	r0, r2, #108, 28	; 0x6c0
     b00:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     b04:	00010009 	andeq	r0, r1, r9
     b08:	68910200 	ldmvs	r1, {r9}
     b0c:	0007700d 	andeq	r7, r7, sp
     b10:	00005a20 	andeq	r5, r0, r0, lsr #20
     b14:	00780c00 	rsbseq	r0, r8, r0, lsl #24
     b18:	000d2401 	andeq	r2, sp, r1, lsl #8
     b1c:	02000001 	andeq	r0, r0, #1
     b20:	00006491 	muleq	r0, r1, r4
     b24:	00014500 	andeq	r4, r1, r0, lsl #10
     b28:	c6000400 	strgt	r0, [r0], -r0, lsl #8
     b2c:	04000004 	streq	r0, [r0], #-4
     b30:	00000001 	andeq	r0, r0, r1
     b34:	04440c00 	strbeq	r0, [r4], #-3072	; 0xfffff400
     b38:	018c0000 	orreq	r0, ip, r0
     b3c:	09d40000 	ldmibeq	r4, {}^	; <UNPREDICTABLE>
     b40:	01d02000 	bicseq	r2, r0, r0
     b44:	06200000 	strteq	r0, [r0], -r0
     b48:	04020000 	streq	r0, [r2], #-0
     b4c:	0000db07 	andeq	sp, r0, r7, lsl #22
     b50:	07020200 	streq	r0, [r2, -r0, lsl #4]
     b54:	000000d5 	ldrdeq	r0, [r0], -r5
     b58:	b5080102 	strlt	r0, [r8, #-258]	; 0xfffffefe
     b5c:	03000000 	movweq	r0, #0
     b60:	0000045b 	andeq	r0, r0, fp, asr r4
     b64:	5c065201 	sfmpl	f5, 4, [r6], {1}
     b68:	4820000b 	stmdami	r0!, {r0, r1, r3}
     b6c:	01000000 	mrseq	r0, (UNDEF: 0)
     b70:	00006d9c 	muleq	r0, ip, sp
     b74:	00630400 	rsbeq	r0, r3, r0, lsl #8
     b78:	331d5201 	tstcc	sp, #268435456	; 0x10000000
     b7c:	02000000 	andeq	r0, r0, #0
     b80:	63055f91 	movwvs	r5, #24465	; 0x5f91
     b84:	01000004 	tsteq	r0, r4
     b88:	006d0a54 	rsbeq	r0, sp, r4, asr sl
     b8c:	91020000 	mrsls	r0, (UNDEF: 2)
     b90:	7d060060 	stcvc	0, cr0, [r6, #-384]	; 0xfffffe80
     b94:	7d000000 	stcvc	0, cr0, [r0, #-0]
     b98:	07000000 	streq	r0, [r0, -r0]
     b9c:	00000025 	andeq	r0, r0, r5, lsr #32
     ba0:	0102000f 	tsteq	r2, pc
     ba4:	0000be08 	andeq	fp, r0, r8, lsl #28
     ba8:	04260800 	strteq	r0, [r6], #-2048	; 0xfffff800
     bac:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
     bb0:	0000330f 	andeq	r3, r0, pc, lsl #6
     bb4:	000ae000 	andeq	lr, sl, r0
     bb8:	00007c20 	andeq	r7, r0, r0, lsr #24
     bbc:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
     bc0:	05000000 	streq	r0, [r0, #-0]
     bc4:	000003ac 	andeq	r0, r0, ip, lsr #7
     bc8:	e5093c01 	str	r3, [r9, #-3073]	; 0xfffff3ff
     bcc:	02000000 	andeq	r0, r0, #0
     bd0:	6b096891 	blvs	25ae1c <startup-0x1fda51e4>
     bd4:	01007965 	tsteq	r0, r5, ror #18
     bd8:	006d0a3f 	rsbeq	r0, sp, pc, lsr sl
     bdc:	91020000 	mrsls	r0, (UNDEF: 2)
     be0:	044b0554 	strbeq	r0, [fp], #-1364	; 0xfffffaac
     be4:	41010000 	mrsmi	r0, (UNDEF: 1)
     be8:	0000e509 	andeq	lr, r0, r9, lsl #10
     bec:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     bf0:	000afc0a 	andeq	pc, sl, sl, lsl #24
     bf4:	00004220 	andeq	r4, r0, r0, lsr #4
     bf8:	6f720900 	svcvs	0x00720900
     bfc:	42010077 	andmi	r0, r1, #119	; 0x77
     c00:	0000e50e 	andeq	lr, r0, lr, lsl #10
     c04:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c08:	040b0000 	streq	r0, [fp], #-0
     c0c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     c10:	04520c00 	ldrbeq	r0, [r2], #-3072	; 0xfffff400
     c14:	2a010000 	bcs	40c1c <startup-0x1ffbf3e4>
     c18:	000a9c06 	andeq	r9, sl, r6, lsl #24
     c1c:	00004420 	andeq	r4, r0, r0, lsr #8
     c20:	0d9c0100 	ldfeqs	f0, [ip]
     c24:	00000439 	andeq	r0, r0, r9, lsr r4
     c28:	e5061701 	str	r1, [r6, #-1793]	; 0xfffff8ff
     c2c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     c30:	6420000a 	strtvs	r0, [r0], #-10
     c34:	01000000 	mrseq	r0, (UNDEF: 0)
     c38:	0001269c 	muleq	r1, ip, r6
     c3c:	00630900 	rsbeq	r0, r3, r0, lsl #18
     c40:	7d0a1a01 	vstrvc	s2, [sl, #-4]
     c44:	02000000 	andeq	r0, r0, #0
     c48:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
     c4c:	0000041a 	andeq	r0, r0, sl, lsl r4
     c50:	d4060b01 	strle	r0, [r6], #-2817	; 0xfffff4ff
     c54:	64200009 	strtvs	r0, [r0], #-9
     c58:	01000000 	mrseq	r0, (UNDEF: 0)
     c5c:	6f72049c 	svcvs	0x0072049c
     c60:	0b010077 	bleq	40e44 <startup-0x1ffbf1bc>
     c64:	0000e516 	andeq	lr, r0, r6, lsl r5
     c68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c6c:	03420000 	movteq	r0, #8192	; 0x2000
     c70:	00040000 	andeq	r0, r4, r0
     c74:	000005ca 	andeq	r0, r0, sl, asr #11
     c78:	00000104 	andeq	r0, r0, r4, lsl #2
     c7c:	ef0c0000 	svc	0x000c0000
     c80:	8c000004 	stchi	0, cr0, [r0], {4}
     c84:	a4000001 	strge	r0, [r0], #-1
     c88:	bc20000b 	stclt	0, cr0, [r0], #-44	; 0xffffffd4
     c8c:	56000004 	strpl	r0, [r0], -r4
     c90:	02000007 	andeq	r0, r0, #7
     c94:	09010202 	stmdbeq	r1, {r1, r9}
     c98:	00000045 	andeq	r0, r0, r5, asr #32
     c9c:	02007803 	andeq	r7, r0, #196608	; 0x30000
     ca0:	00450a02 	subeq	r0, r5, r2, lsl #20
     ca4:	03000000 	movweq	r0, #0
     ca8:	02020079 	andeq	r0, r2, #121	; 0x79
     cac:	0000450c 	andeq	r4, r0, ip, lsl #10
     cb0:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     cb4:	00be0801 	adcseq	r0, lr, r1, lsl #16
     cb8:	8c050000 	stchi	0, cr0, [r5], {-0}
     cbc:	02000003 	andeq	r0, r0, #3
     cc0:	00250203 	eoreq	r0, r5, r3, lsl #4
     cc4:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
     cc8:	95091702 	strls	r1, [r9, #-1794]	; 0xfffff8fe
     ccc:	06000000 	streq	r0, [r0], -r0
     cd0:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
     cd4:	95091802 	strls	r1, [r9, #-2050]	; 0xfffff7fe
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	00027b06 	andeq	r7, r2, r6, lsl #22
     ce0:	09190200 	ldmdbeq	r9, {r9}
     ce4:	00000095 	muleq	r0, r5, r0
     ce8:	02810604 	addeq	r0, r1, #4, 12	; 0x400000
     cec:	1a020000 	bne	80cf4 <startup-0x1ff7f30c>
     cf0:	00009509 	andeq	r9, r0, r9, lsl #10
     cf4:	70030800 	andvc	r0, r3, r0, lsl #16
     cf8:	1b020078 	blne	80ee0 <startup-0x1ff7f120>
     cfc:	00009c0b 	andeq	r9, r0, fp, lsl #24
     d00:	07000c00 	streq	r0, [r0, -r0, lsl #24]
     d04:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     d08:	4c080074 	stcmi	0, cr0, [r8], {116}	; 0x74
     d0c:	ac000000 	stcge	0, cr0, [r0], {-0}
     d10:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     d14:	000000ac 	andeq	r0, r0, ip, lsr #1
     d18:	0404001d 	streq	r0, [r4], #-29	; 0xffffffe3
     d1c:	0000db07 	andeq	sp, r0, r7, lsl #22
     d20:	01f10500 	mvnseq	r0, r0, lsl #10
     d24:	1c020000 	stcne	0, cr0, [r2], {-0}
     d28:	0000bf0e 	andeq	fp, r0, lr, lsl #30
     d2c:	58040a00 	stmdapl	r4, {r9, fp}
     d30:	0b000000 	bleq	d38 <startup-0x1ffff2c8>
     d34:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     d38:	101e0224 	andsne	r0, lr, r4, lsr #4
     d3c:	00000148 	andeq	r0, r0, r8, asr #2
     d40:	6f656703 	svcvs	0x00656703
     d44:	0f1f0200 	svceq	0x001f0200
     d48:	000000b3 	strheq	r0, [r0], -r3
     d4c:	02120600 	andseq	r0, r2, #0, 12
     d50:	20020000 	andcs	r0, r2, r0
     d54:	00009509 	andeq	r9, r0, r9, lsl #10
     d58:	17060400 	strne	r0, [r6, -r0, lsl #8]
     d5c:	02000002 	andeq	r0, r0, #2
     d60:	00950e20 	addseq	r0, r5, r0, lsr #28
     d64:	06080000 	streq	r0, [r8], -r0
     d68:	0000023b 	andeq	r0, r0, fp, lsr r2
     d6c:	95092102 	strls	r2, [r9, #-258]	; 0xfffffefe
     d70:	0c000000 	stceq	0, cr0, [r0], {-0}
     d74:	00024006 	andeq	r4, r2, r6
     d78:	0e210200 	cdpeq	2, 2, cr0, cr1, cr0, {0}
     d7c:	00000095 	muleq	r0, r5, r0
     d80:	029b0610 	addseq	r0, fp, #16, 12	; 0x1000000
     d84:	22020000 	andcs	r0, r2, #0
     d88:	0001590d 	andeq	r5, r1, sp, lsl #18
     d8c:	3e061400 	cfcpyscc	mvf1, mvf6
     d90:	02000005 	andeq	r0, r0, #5
     d94:	01590d23 	cmpeq	r9, r3, lsr #26
     d98:	06180000 	ldreq	r0, [r8], -r0
     d9c:	0000020d 	andeq	r0, r0, sp, lsl #4
     da0:	590c2402 	stmdbpl	ip, {r1, sl, sp}
     da4:	1c000001 	stcne	0, cr0, [r0], {1}
     da8:	00023106 	andeq	r3, r2, r6, lsl #2
     dac:	0d250200 	sfmeq	f0, 4, [r5, #-0]
     db0:	00000174 	andeq	r0, r0, r4, ror r1
     db4:	530c0020 	movwpl	r0, #49184	; 0xc020
     db8:	0d000001 	stceq	0, cr0, [r0, #-4]
     dbc:	00000153 	andeq	r0, r0, r3, asr r1
     dc0:	c5040a00 	strgt	r0, [r4, #-2560]	; 0xfffff600
     dc4:	0a000000 	beq	dcc <startup-0x1ffff234>
     dc8:	00014804 	andeq	r4, r1, r4, lsl #16
     dcc:	01740c00 	cmneq	r4, r0, lsl #24
     dd0:	530d0000 	movwpl	r0, #53248	; 0xd000
     dd4:	0d000001 	stceq	0, cr0, [r0, #-4]
     dd8:	00000095 	muleq	r0, r5, r0
     ddc:	0000950d 	andeq	r9, r0, sp, lsl #10
     de0:	040a0000 	streq	r0, [sl], #-0
     de4:	0000015f 	andeq	r0, r0, pc, asr r1
     de8:	00051405 	andeq	r1, r5, r5, lsl #8
     dec:	0a260200 	beq	9815f4 <startup-0x1f67ea0c>
     df0:	000000c5 	andeq	r0, r0, r5, asr #1
     df4:	d5070204 	strle	r0, [r7, #-516]	; 0xfffffdfc
     df8:	04000000 	streq	r0, [r0], #-0
     dfc:	00b50801 	adcseq	r0, r5, r1, lsl #16
     e00:	fd0e0000 	stc2	0, cr0, [lr, #-0]
     e04:	01000004 	tsteq	r0, r4
     e08:	0045060b 	subeq	r0, r5, fp, lsl #12
     e0c:	03050000 	movweq	r0, #20480	; 0x5000
     e10:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
     e14:	0004760e 	andeq	r7, r4, lr, lsl #12
     e18:	060c0100 	streq	r0, [ip], -r0, lsl #2
     e1c:	00000045 	andeq	r0, r0, r5, asr #32
     e20:	12b90305 	adcsne	r0, r9, #335544320	; 0x14000000
     e24:	d70e2000 	strle	r2, [lr, -r0]
     e28:	01000004 	tsteq	r0, r4
     e2c:	0045060d 	subeq	r0, r5, sp, lsl #12
     e30:	03050000 	movweq	r0, #20480	; 0x5000
     e34:	20001364 	andcs	r1, r0, r4, ror #6
     e38:	0004a50e 	andeq	sl, r4, lr, lsl #10
     e3c:	070e0100 	streq	r0, [lr, -r0, lsl #2]
     e40:	000001dc 	ldrdeq	r0, [r0], -ip
     e44:	12bc0305 	adcsne	r0, ip, #335544320	; 0x14000000
     e48:	040a2000 	streq	r2, [sl], #-0
     e4c:	00000045 	andeq	r0, r0, r5, asr #32
     e50:	0004ca0f 	andeq	ip, r4, pc, lsl #20
     e54:	06870100 	streq	r0, [r7], r0, lsl #2
     e58:	20000fe0 	andcs	r0, r0, r0, ror #31
     e5c:	00000080 	andeq	r0, r0, r0, lsl #1
     e60:	02359c01 	eorseq	r9, r5, #256	; 0x100
     e64:	63100000 	tstvs	r0, #0
     e68:	108a0100 	addne	r0, sl, r0, lsl #2
     e6c:	0000018d 	andeq	r0, r0, sp, lsl #3
     e70:	116f9102 	cmnne	pc, r2, lsl #2
     e74:	000004a0 	andeq	r0, r0, r0, lsr #9
     e78:	7a0a8b01 	bvc	2a3a84 <startup-0x1fd5c57c>
     e7c:	02000001 	andeq	r0, r0, #1
     e80:	0c114891 	ldceq	8, cr4, [r1], {145}	; 0x91
     e84:	01000005 	tsteq	r0, r5
     e88:	017a0a8d 	cmneq	sl, sp, lsl #21
     e8c:	91030000 	mrsls	r0, (UNDEF: 3)
     e90:	cf117fa4 	svcgt	0x00117fa4
     e94:	01000004 	tsteq	r0, r4
     e98:	017a0a8e 	cmneq	sl, lr, lsl #21
     e9c:	91030000 	mrsls	r0, (UNDEF: 3)
     ea0:	0f007f80 	svceq	0x00007f80
     ea4:	00000495 	muleq	r0, r5, r4
     ea8:	3c064901 			; <UNDEFINED> instruction: 0x3c064901
     eac:	a420000d 	strtge	r0, [r0], #-13
     eb0:	01000002 	tsteq	r0, r2
     eb4:	0002879c 	muleq	r2, ip, r7
     eb8:	050c1200 	streq	r1, [ip, #-512]	; 0xfffffe00
     ebc:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     ec0:	00017a19 	andeq	r7, r1, r9, lsl sl
     ec4:	70910200 	addsvc	r0, r1, r0, lsl #4
     ec8:	0004cf12 	andeq	ip, r4, r2, lsl pc
     ecc:	2a490100 	bcs	12412d4 <startup-0x1edbed2c>
     ed0:	0000017a 	andeq	r0, r0, sl, ror r1
     ed4:	10149102 	andsne	r9, r4, r2, lsl #2
     ed8:	4a010063 	bmi	4106c <startup-0x1ffbef94>
     edc:	00018d10 	andeq	r8, r1, r0, lsl sp
     ee0:	5f910200 	svcpl	0x00910200
     ee4:	0004a011 	andeq	sl, r4, r1, lsl r0
     ee8:	0a4b0100 	beq	12c12f0 <startup-0x1ed3ed10>
     eec:	0000017a 	andeq	r0, r0, sl, ror r1
     ef0:	7fb89103 	svcvc	0x00b89103
     ef4:	04b11300 	ldrteq	r1, [r1], #768	; 0x300
     ef8:	40010000 	andmi	r0, r1, r0
     efc:	000d0006 	andeq	r0, sp, r6
     f00:	00003c20 	andeq	r3, r0, r0, lsr #24
     f04:	149c0100 	ldrne	r0, [ip], #256	; 0x100
     f08:	0000051c 	andeq	r0, r0, ip, lsl r5
     f0c:	78062a01 	stmdavc	r6, {r0, r9, fp, sp}
     f10:	8820000c 	stmdahi	r0!, {r2, r3}
     f14:	01000000 	mrseq	r0, (UNDEF: 0)
     f18:	0002ce9c 	muleq	r2, ip, lr
     f1c:	04f61100 	ldrbteq	r1, [r6], #256	; 0x100
     f20:	2b010000 	blcs	40f28 <startup-0x1ffbf0d8>
     f24:	0001dc09 	andeq	sp, r1, r9, lsl #24
     f28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f2c:	00046f11 	andeq	r6, r4, r1, lsl pc
     f30:	092c0100 	stmdbeq	ip!, {r8}
     f34:	000001dc 	ldrdeq	r0, [r0], -ip
     f38:	00709102 	rsbseq	r9, r0, r2, lsl #2
     f3c:	0004ba14 	andeq	fp, r4, r4, lsl sl
     f40:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
     f44:	20000c06 	andcs	r0, r0, r6, lsl #24
     f48:	00000072 	andeq	r0, r0, r2, ror r0
     f4c:	02f29c01 	rscseq	r9, r2, #256	; 0x100
     f50:	73100000 	tstvc	r0, #0
     f54:	081b0100 	ldmdaeq	fp, {r8}
     f58:	000001dc 	ldrdeq	r0, [r0], -ip
     f5c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     f60:	0004e515 	andeq	lr, r4, r5, lsl r5
     f64:	06110100 	ldreq	r0, [r1], -r0, lsl #2
     f68:	00000045 	andeq	r0, r0, r5, asr #32
     f6c:	20000ba4 	andcs	r0, r0, r4, lsr #23
     f70:	00000062 	andeq	r0, r0, r2, rrx
     f74:	85129c01 	ldrhi	r9, [r2, #-3073]	; 0xfffff3ff
     f78:	01000004 	tsteq	r0, r4
     f7c:	017a1811 	cmneq	sl, r1, lsl r8
     f80:	91020000 	mrsls	r0, (UNDEF: 2)
     f84:	048d1270 	streq	r1, [sp], #624	; 0x270
     f88:	11010000 	mrsne	r0, (UNDEF: 1)
     f8c:	00017a29 	andeq	r7, r1, r9, lsr #20
     f90:	14910200 	ldrne	r0, [r1], #512	; 0x200
     f94:	0003f211 	andeq	pc, r3, r1, lsl r2	; <UNPREDICTABLE>
     f98:	06120100 	ldreq	r0, [r2], -r0, lsl #2
     f9c:	00000095 	muleq	r0, r5, r0
     fa0:	115c9102 	cmpne	ip, r2, lsl #2
     fa4:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
     fa8:	95061301 	strls	r1, [r6, #-769]	; 0xfffffcff
     fac:	02000000 	andeq	r0, r0, #0
     fb0:	00005891 	muleq	r0, r1, r8
     fb4:	00000053 	andeq	r0, r0, r3, asr r0
     fb8:	07200004 	streq	r0, [r0, -r4]!
     fbc:	01040000 	mrseq	r0, (UNDEF: 4)
     fc0:	00000000 	andeq	r0, r0, r0
     fc4:	0005290c 	andeq	r2, r5, ip, lsl #18
     fc8:	00018c00 	andeq	r8, r1, r0, lsl #24
     fcc:	00106000 	andseq	r6, r0, r0
     fd0:	00001e20 	andeq	r1, r0, r0, lsr #28
     fd4:	00091b00 	andeq	r1, r9, r0, lsl #22
     fd8:	62610200 	rsbvs	r0, r1, #0, 4
     fdc:	05010073 	streq	r0, [r1, #-115]	; 0xffffff8d
     fe0:	00004f05 	andeq	r4, r0, r5, lsl #30
     fe4:	00106000 	andseq	r6, r0, r0
     fe8:	00001e20 	andeq	r1, r0, r0, lsr #28
     fec:	4f9c0100 	svcmi	0x009c0100
     ff0:	03000000 	movweq	r0, #0
     ff4:	006d756e 	rsbeq	r7, sp, lr, ror #10
     ff8:	4f0d0501 	svcmi	0x000d0501
     ffc:	02000000 	andeq	r0, r0, #0
    1000:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    1004:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1008:	d2000074 	andle	r0, r0, #116	; 0x74
    100c:	04000000 	streq	r0, [r0], #-0
    1010:	00076e00 	andeq	r6, r7, r0, lsl #28
    1014:	00010400 	andeq	r0, r1, r0, lsl #8
    1018:	0c000000 	stceq	0, cr0, [r0], {-0}
    101c:	00000574 	andeq	r0, r0, r4, ror r5
    1020:	0000018c 	andeq	r0, r0, ip, lsl #3
	...
    102c:	0000095d 	andeq	r0, r0, sp, asr r9
    1030:	db070402 	blle	1c2040 <startup-0x1fe3dfc0>
    1034:	02000000 	andeq	r0, r0, #0
    1038:	00d50702 	sbcseq	r0, r5, r2, lsl #14
    103c:	01020000 	mrseq	r0, (UNDEF: 2)
    1040:	0000b508 	andeq	fp, r0, r8, lsl #10
    1044:	05300300 	ldreq	r0, [r0, #-768]!	; 0xfffffd00
    1048:	22010000 	andcs	r0, r1, #0
    104c:	0010901d 	andseq	r9, r0, sp, lsl r0
    1050:	00000620 	andeq	r0, r0, r0, lsr #12
    1054:	699c0100 	ldmibvs	ip, {r8}
    1058:	04000000 	streq	r0, [r0], #-0
    105c:	22010078 	andcs	r0, r1, #120	; 0x78
    1060:	00006935 	andeq	r6, r0, r5, lsr r9
    1064:	04500100 	ldrbeq	r0, [r0], #-256	; 0xffffff00
    1068:	22010079 	andcs	r0, r1, #121	; 0x79
    106c:	0000693c 	andeq	r6, r0, ip, lsr r9
    1070:	00510100 	subseq	r0, r1, r0, lsl #2
    1074:	69050405 	stmdbvs	r5, {r0, r2, sl}
    1078:	0300746e 	movweq	r7, #1134	; 0x46e
    107c:	0000057e 	andeq	r0, r0, lr, ror r5
    1080:	8a1d1c01 	bhi	74808c <startup-0x1f8b7f74>
    1084:	06200010 			; <UNDEFINED> instruction: 0x06200010
    1088:	01000000 	mrseq	r0, (UNDEF: 0)
    108c:	00009f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    1090:	00780400 	rsbseq	r0, r8, r0, lsl #8
    1094:	69331c01 	ldmdbvs	r3!, {r0, sl, fp, ip}
    1098:	01000000 	mrseq	r0, (UNDEF: 0)
    109c:	00790450 	rsbseq	r0, r9, r0, asr r4
    10a0:	693a1c01 	ldmdbvs	sl!, {r0, sl, fp, ip}
    10a4:	01000000 	mrseq	r0, (UNDEF: 0)
    10a8:	44060051 	strmi	r0, [r6], #-81	; 0xffffffaf
    10ac:	01000005 	tsteq	r0, r5
    10b0:	10841d17 	addne	r1, r4, r7, lsl sp
    10b4:	00062000 	andeq	r2, r6, r0
    10b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10bc:	00055906 	andeq	r5, r5, r6, lsl #18
    10c0:	1d110100 	ldfnes	f0, [r1, #-0]
    10c4:	2000107e 	andcs	r1, r0, lr, ror r0
    10c8:	00000006 	andeq	r0, r0, r6
    10cc:	6c079c01 	stcvs	12, cr9, [r7], {1}
    10d0:	01000005 	tsteq	r0, r5
    10d4:	00000106 	andeq	r0, r0, r6, lsl #2
    10d8:	000c2000 	andeq	r2, ip, r0
    10dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    10e0:	00025600 	andeq	r5, r2, r0, lsl #12
    10e4:	f7000400 			; <UNDEFINED> instruction: 0xf7000400
    10e8:	04000007 	streq	r0, [r0], #-7
    10ec:	00000001 	andeq	r0, r0, r1
    10f0:	067f0c00 	ldrbteq	r0, [pc], -r0, lsl #24
    10f4:	018c0000 	orreq	r0, ip, r0
    10f8:	10980000 	addsne	r0, r8, r0
    10fc:	02202000 	eoreq	r2, r0, #0
    1100:	09d50000 	ldmibeq	r5, {}^	; <UNPREDICTABLE>
    1104:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    1108:	02000006 	andeq	r0, r0, #6
    110c:	0031164b 	eorseq	r1, r1, fp, asr #12
    1110:	04030000 	streq	r0, [r3], #-0
    1114:	0000db07 	andeq	sp, r0, r7, lsl #22
    1118:	07020300 	streq	r0, [r2, -r0, lsl #6]
    111c:	000000d5 	ldrdeq	r0, [r0], -r5
    1120:	b5080103 	strlt	r0, [r8, #-259]	; 0xfffffefd
    1124:	04000000 	streq	r0, [r0], #-0
    1128:	00000630 	andeq	r0, r0, r0, lsr r6
    112c:	194e0230 	stmdbne	lr, {r4, r5, r9}^
    1130:	000000ef 	andeq	r0, r0, pc, ror #1
    1134:	31524305 	cmpcc	r2, r5, lsl #6
    1138:	0e4f0200 	cdpeq	2, 4, cr0, cr15, cr0, {0}
    113c:	00000025 	andeq	r0, r0, r5, lsr #32
    1140:	52430500 	subpl	r0, r3, #0, 10
    1144:	50020032 	andpl	r0, r2, r2, lsr r0
    1148:	0000250e 	andeq	r2, r0, lr, lsl #10
    114c:	bb060400 	bllt	182154 <startup-0x1fe7deac>
    1150:	02000005 	andeq	r0, r0, #5
    1154:	00250e51 	eoreq	r0, r5, r1, asr lr
    1158:	06080000 	streq	r0, [r8], -r0
    115c:	0000064e 	andeq	r0, r0, lr, asr #12
    1160:	250e5202 	strcs	r5, [lr, #-514]	; 0xfffffdfe
    1164:	0c000000 	stceq	0, cr0, [r0], {-0}
    1168:	00525305 	subseq	r5, r2, r5, lsl #6
    116c:	250e5302 	strcs	r5, [lr, #-770]	; 0xfffffcfe
    1170:	10000000 	andne	r0, r0, r0
    1174:	52474505 	subpl	r4, r7, #20971520	; 0x1400000
    1178:	0e540200 	cdpeq	2, 5, cr0, cr4, cr0, {0}
    117c:	00000025 	andeq	r0, r0, r5, lsr #32
    1180:	05c20614 	strbeq	r0, [r2, #1556]	; 0x614
    1184:	55020000 	strpl	r0, [r2, #-0]
    1188:	0000250e 	andeq	r2, r0, lr, lsl #10
    118c:	c9061800 	stmdbgt	r6, {fp, ip}
    1190:	02000005 	andeq	r0, r0, #5
    1194:	00250e56 	eoreq	r0, r5, r6, asr lr
    1198:	061c0000 	ldreq	r0, [ip], -r0
    119c:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11a0:	250e5702 	strcs	r5, [lr, #-1794]	; 0xfffff8fe
    11a4:	20000000 	andcs	r0, r0, r0
    11a8:	544e4305 	strbpl	r4, [lr], #-773	; 0xfffffcfb
    11ac:	0e580200 	cdpeq	2, 5, cr0, cr8, cr0, {0}
    11b0:	00000025 	andeq	r0, r0, r5, lsr #32
    11b4:	53500524 	cmppl	r0, #36, 10	; 0x9000000
    11b8:	59020043 	stmdbpl	r2, {r0, r1, r6}
    11bc:	0000250e 	andeq	r2, r0, lr, lsl #10
    11c0:	41052800 	tstmi	r5, r0, lsl #16
    11c4:	02005252 	andeq	r5, r0, #536870917	; 0x20000005
    11c8:	00250e5a 	eoreq	r0, r5, sl, asr lr
    11cc:	002c0000 	eoreq	r0, ip, r0
    11d0:	00004607 	andeq	r4, r0, r7, lsl #12
    11d4:	49540800 	ldmdbmi	r4, {fp}^
    11d8:	5b02004d 	blpl	81314 <startup-0x1ff7ecec>
    11dc:	0000ef02 	andeq	lr, r0, r2, lsl #30
    11e0:	06410900 	strbeq	r0, [r1], -r0, lsl #18
    11e4:	05010000 	streq	r0, [r1, #-0]
    11e8:	0001120c 	andeq	r1, r1, ip, lsl #4
    11ec:	c0030500 	andgt	r0, r3, r0, lsl #10
    11f0:	0a200012 	beq	801240 <startup-0x1f7fedc0>
    11f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11f8:	fb090074 	blx	2413d2 <startup-0x1fdbec2e>
    11fc:	01000005 	tsteq	r0, r5
    1200:	01120c06 	tsteq	r2, r6, lsl #24
    1204:	03050000 	movweq	r0, #20480	; 0x5000
    1208:	200012c4 	andcs	r1, r0, r4, asr #5
    120c:	0006640b 	andeq	r6, r6, fp, lsl #8
    1210:	06090100 	streq	r0, [r9], -r0, lsl #2
    1214:	0000013d 	andeq	r0, r0, sp, lsr r1
    1218:	12c80305 	sbcne	r0, r8, #335544320	; 0x14000000
    121c:	01032000 	mrseq	r2, (UNDEF: 3)
    1220:	0000be08 	andeq	fp, r0, r8, lsl #28
    1224:	06010b00 	streq	r0, [r1], -r0, lsl #22
    1228:	0b010000 	bleq	41230 <startup-0x1ffbedd0>
    122c:	00011205 	andeq	r1, r1, r5, lsl #4
    1230:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    1234:	0b200012 	bleq	801284 <startup-0x1f7fed7c>
    1238:	0000059c 	muleq	r0, ip, r5
    123c:	3d060d01 	stccc	13, cr0, [r6, #-4]
    1240:	05000001 	streq	r0, [r0, #-1]
    1244:	0012d003 	andseq	sp, r2, r3
    1248:	05de0b20 	ldrbeq	r0, [lr, #2848]	; 0xb20
    124c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1250:	00013d06 	andeq	r3, r1, r6, lsl #26
    1254:	d1030500 	tstle	r3, r0, lsl #10
    1258:	0c200012 	stceq	0, cr0, [r0], #-72	; 0xffffffb8
    125c:	000005e6 	andeq	r0, r0, r6, ror #11
    1260:	94065401 	strls	r5, [r6], #-1025	; 0xfffffbff
    1264:	24200012 	strtcs	r0, [r0], #-18	; 0xffffffee
    1268:	01000000 	mrseq	r0, (UNDEF: 0)
    126c:	06530d9c 			; <UNDEFINED> instruction: 0x06530d9c
    1270:	4b010000 	blmi	41278 <startup-0x1ffbed88>
    1274:	00123c06 	andseq	r3, r2, r6, lsl #24
    1278:	00005820 	andeq	r5, r0, r0, lsr #16
    127c:	b29c0100 	addslt	r0, ip, #0, 2
    1280:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1284:	000005de 	ldrdeq	r0, [r0], -lr
    1288:	12174b01 	andsne	r4, r7, #1024	; 0x400
    128c:	02000001 	andeq	r0, r0, #1
    1290:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
    1294:	00000590 	muleq	r0, r0, r5
    1298:	c4063c01 	strgt	r3, [r6], #-3073	; 0xfffff3ff
    129c:	78200011 	stmdavc	r0!, {r0, r4}
    12a0:	01000000 	mrseq	r0, (UNDEF: 0)
    12a4:	06600f9c 	uqadd8eq	r0, r0, ip
    12a8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    12ac:	00013d06 	andeq	r3, r1, r6, lsl #26
    12b0:	0011b000 	andseq	fp, r1, r0
    12b4:	00001420 	andeq	r1, r0, r0, lsr #8
    12b8:	109c0100 	addsne	r0, ip, r0, lsl #2
    12bc:	000005a2 	andeq	r0, r0, r2, lsr #11
    12c0:	28062701 	stmdacs	r6, {r0, r8, r9, sl, sp}
    12c4:	88200011 	stmdahi	r0!, {r0, r4}
    12c8:	01000000 	mrseq	r0, (UNDEF: 0)
    12cc:	00020a9c 	muleq	r2, ip, sl
    12d0:	114e1100 	mrsne	r1, (UNDEF: 94)
    12d4:	00242000 	eoreq	r2, r4, r0
    12d8:	d7090000 	strle	r0, [r9, -r0]
    12dc:	01000005 	tsteq	r0, r5
    12e0:	020a0a2f 	andeq	r0, sl, #192512	; 0x2f000
    12e4:	91020000 	mrsls	r0, (UNDEF: 2)
    12e8:	12000074 	andne	r0, r0, #116	; 0x74
    12ec:	00013d04 	andeq	r3, r1, r4, lsl #26
    12f0:	061c1300 	ldreq	r1, [ip], -r0, lsl #6
    12f4:	1c010000 	stcne	0, cr0, [r1], {-0}
    12f8:	0010ec06 	andseq	lr, r0, r6, lsl #24
    12fc:	00003c20 	andeq	r3, r0, r0, lsr #24
    1300:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    1304:	0000066f 	andeq	r0, r0, pc, ror #12
    1308:	cc061701 	stcgt	7, cr1, [r6], {1}
    130c:	20200010 	eorcs	r0, r0, r0, lsl r0
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
    1314:	0002479c 	muleq	r2, ip, r7
    1318:	736d1500 	cmnvc	sp, #0, 10
    131c:	1a170100 	bne	5c1724 <startup-0x1fa3e8dc>
    1320:	00000112 	andeq	r0, r0, r2, lsl r1
    1324:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1328:	0006070c 	andeq	r0, r6, ip, lsl #14
    132c:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    1330:	20001098 	mulcs	r0, r8, r0
    1334:	00000034 	andeq	r0, r0, r4, lsr r0
    1338:	Address 0x00001338 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	0b002406 	bleq	907c <startup-0x1fff6f84>
  60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  64:	07000008 	streq	r0, [r0, -r8]
  68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  6c:	0b3a0e03 	bleq	e83880 <startup-0x1f17c780>
  70:	0b390b3b 	bleq	e42d64 <startup-0x1f1bd29c>
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  80:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  84:	0b3b0b3a 	bleq	ec2d74 <startup-0x1f13d28c>
  88:	13490b39 	movtne	r0, #39737	; 0x9b39
  8c:	00001802 	andeq	r1, r0, r2, lsl #16
  90:	03003409 	movweq	r3, #1033	; 0x409
  94:	3b0b3a08 	blcc	2ce8bc <startup-0x1fd31744>
  98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  9c:	0a000013 	beq	f0 <startup-0x1fffff10>
  a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  a4:	0b3a0e03 	bleq	e838b8 <startup-0x1f17c748>
  a8:	0b390b3b 	bleq	e42d9c <startup-0x1f1bd264>
  ac:	01111349 	tsteq	r1, r9, asr #6
  b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b8:	0b000013 	bleq	10c <startup-0x1ffffef4>
  bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	13490b39 	movtne	r0, #39737	; 0x9b39
  c8:	00001802 	andeq	r1, r0, r2, lsl #16
  cc:	3f012e0c 	svccc	0x00012e0c
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	1119270b 	tstne	r9, fp, lsl #14
  dc:	40061201 	andmi	r1, r6, r1, lsl #4
  e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	3f012e0d 	svccc	0x00012e0d
  ec:	3a0e0319 	bcc	380d58 <startup-0x1fc7f2a8>
  f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	1119270b 	tstne	r9, fp, lsl #14
  f8:	40061201 	andmi	r1, r6, r1, lsl #4
  fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 100:	01000000 	mrseq	r0, (UNDEF: 0)
 104:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 108:	0e030b13 	vmoveq.32	d3[0], r0
 10c:	01110e1b 	tsteq	r1, fp, lsl lr
 110:	17100612 			; <UNDEFINED> instruction: 0x17100612
 114:	13020000 	movwne	r0, #8192	; 0x2000
 118:	3a0b0b01 	bcc	2c2d24 <startup-0x1fd3d2dc>
 11c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 120:	0013010b 	andseq	r0, r3, fp, lsl #2
 124:	000d0300 	andeq	r0, sp, r0, lsl #6
 128:	0b3a0803 	bleq	e8213c <startup-0x1f17dec4>
 12c:	0b390b3b 	bleq	e42e20 <startup-0x1f1bd1e0>
 130:	0b381349 	bleq	e04e5c <startup-0x1f1fb1a4>
 134:	24040000 	strcs	r0, [r4], #-0
 138:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 13c:	000e030b 	andeq	r0, lr, fp, lsl #6
 140:	00160500 	andseq	r0, r6, r0, lsl #10
 144:	0b3a0e03 	bleq	e83958 <startup-0x1f17c6a8>
 148:	0b390b3b 	bleq	e42e3c <startup-0x1f1bd1c4>
 14c:	00001349 	andeq	r1, r0, r9, asr #6
 150:	03000d06 	movweq	r0, #3334	; 0xd06
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 15c:	000b3813 	andeq	r3, fp, r3, lsl r8
 160:	00240700 	eoreq	r0, r4, r0, lsl #14
 164:	0b3e0b0b 	bleq	f82d98 <startup-0x1f07d268>
 168:	00000803 	andeq	r0, r0, r3, lsl #16
 16c:	49010108 	stmdbmi	r1, {r3, r8}
 170:	00130113 	andseq	r0, r3, r3, lsl r1
 174:	00210900 	eoreq	r0, r1, r0, lsl #18
 178:	0b2f1349 	bleq	bc4ea4 <startup-0x1f43b15c>
 17c:	0f0a0000 	svceq	0x000a0000
 180:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 184:	0b000013 	bleq	1d8 <startup-0x1ffffe28>
 188:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 18c:	0b3a0b0b 	bleq	e82dc0 <startup-0x1f17d240>
 190:	0b390b3b 	bleq	e42e84 <startup-0x1f1bd17c>
 194:	00001301 	andeq	r1, r0, r1, lsl #6
 198:	2701150c 	strcs	r1, [r1, -ip, lsl #10]
 19c:	00130119 	andseq	r0, r3, r9, lsl r1
 1a0:	00050d00 	andeq	r0, r5, r0, lsl #26
 1a4:	00001349 	andeq	r1, r0, r9, asr #6
 1a8:	0300340e 	movweq	r3, #1038	; 0x40e
 1ac:	3b0b3a0e 	blcc	2ce9ec <startup-0x1fd31614>
 1b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1b4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 1b8:	0f000018 	svceq	0x00000018
 1bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c0:	0b3a0e03 	bleq	e839d4 <startup-0x1f17c62c>
 1c4:	0b390b3b 	bleq	e42eb8 <startup-0x1f1bd148>
 1c8:	13491927 	movtne	r1, #39207	; 0x9927
 1cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1d4:	00130119 	andseq	r0, r3, r9, lsl r1
 1d8:	00051000 	andeq	r1, r5, r0
 1dc:	0b3a0e03 	bleq	e839f0 <startup-0x1f17c610>
 1e0:	0b390b3b 	bleq	e42ed4 <startup-0x1f1bd12c>
 1e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1e8:	34110000 	ldrcc	r0, [r1], #-0
 1ec:	3a0e0300 	bcc	380df4 <startup-0x1fc7f20c>
 1f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1f8:	12000018 	andne	r0, r0, #24
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	0b390b3b 	bleq	e42ef8 <startup-0x1f1bd108>
 208:	01111927 	tsteq	r1, r7, lsr #18
 20c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 210:	01194297 			; <UNDEFINED> instruction: 0x01194297
 214:	13000013 	movwne	r0, #19
 218:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 21c:	0b3a0e03 	bleq	e83a30 <startup-0x1f17c5d0>
 220:	0b390b3b 	bleq	e42f14 <startup-0x1f1bd0ec>
 224:	01111927 	tsteq	r1, r7, lsr #18
 228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 22c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 230:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 234:	0111010b 	tsteq	r1, fp, lsl #2
 238:	00000612 	andeq	r0, r0, r2, lsl r6
 23c:	03003415 	movweq	r3, #1045	; 0x415
 240:	3b0b3a08 	blcc	2cea68 <startup-0x1fd31598>
 244:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 248:	00180213 	andseq	r0, r8, r3, lsl r2
 24c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 250:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 260:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 264:	00000019 	andeq	r0, r0, r9, lsl r0
 268:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 26c:	030b130e 	movweq	r1, #45838	; 0xb30e
 270:	110e1b0e 	tstne	lr, lr, lsl #22
 274:	10061201 	andne	r1, r6, r1, lsl #4
 278:	02000017 	andeq	r0, r0, #23
 27c:	0b0b0113 	bleq	2c06d0 <startup-0x1fd3f930>
 280:	0b3b0b3a 	bleq	ec2f70 <startup-0x1f13d090>
 284:	13010b39 	movwne	r0, #6969	; 0x1b39
 288:	0d030000 	stceq	0, cr0, [r3, #-0]
 28c:	3a080300 	bcc	200e94 <startup-0x1fdff16c>
 290:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 298:	0400000b 	streq	r0, [r0], #-11
 29c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2a0:	0b3b0b3a 	bleq	ec2f90 <startup-0x1f13d070>
 2a4:	13490b39 	movtne	r0, #39737	; 0x9b39
 2a8:	00000b38 	andeq	r0, r0, r8, lsr fp
 2ac:	0b002405 	bleq	92c8 <startup-0x1fff6d38>
 2b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2b4:	0600000e 	streq	r0, [r0], -lr
 2b8:	13490035 	movtne	r0, #36917	; 0x9035
 2bc:	16070000 	strne	r0, [r7], -r0
 2c0:	3a0e0300 	bcc	380ec8 <startup-0x1fc7f138>
 2c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c8:	0013490b 	andseq	r4, r3, fp, lsl #18
 2cc:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 2d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2d4:	0b3b0b3a 	bleq	ec2fc4 <startup-0x1f13d03c>
 2d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2e4:	00130119 	andseq	r0, r3, r9, lsl r1
 2e8:	00050900 	andeq	r0, r5, r0, lsl #18
 2ec:	0b3a0803 	bleq	e82300 <startup-0x1f17dd00>
 2f0:	0b390b3b 	bleq	e42fe4 <startup-0x1f1bd01c>
 2f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2f8:	0f0a0000 	svceq	0x000a0000
 2fc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 300:	0b000013 	bleq	354 <startup-0x1ffffcac>
 304:	0e03012e 	adfeqsp	f0, f3, #0.5
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 310:	06120111 			; <UNDEFINED> instruction: 0x06120111
 314:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 318:	00000019 	andeq	r0, r0, r9, lsl r0
 31c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 320:	030b130e 	movweq	r1, #45838	; 0xb30e
 324:	110e1b0e 	tstne	lr, lr, lsl #22
 328:	10061201 	andne	r1, r6, r1, lsl #4
 32c:	02000017 	andeq	r0, r0, #23
 330:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 334:	0b3a0e03 	bleq	e83b48 <startup-0x1f17c4b8>
 338:	0b390b3b 	bleq	e4302c <startup-0x1f1bcfd4>
 33c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 340:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 344:	03000019 	movweq	r0, #25
 348:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 34c:	0b3a0e03 	bleq	e83b60 <startup-0x1f17c4a0>
 350:	0b390b3b 	bleq	e43044 <startup-0x1f1bcfbc>
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 35c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
 360:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 364:	0b3a0e03 	bleq	e83b78 <startup-0x1f17c488>
 368:	0b390b3b 	bleq	e4305c <startup-0x1f1bcfa4>
 36c:	01111927 	tsteq	r1, r7, lsr #18
 370:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 374:	01194296 			; <UNDEFINED> instruction: 0x01194296
 378:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 37c:	08030005 	stmdaeq	r3, {r0, r2}
 380:	0b3b0b3a 	bleq	ec3070 <startup-0x1f13cf90>
 384:	13490b39 	movtne	r0, #39737	; 0x9b39
 388:	00001802 	andeq	r1, r0, r2, lsl #16
 38c:	11010b06 	tstne	r1, r6, lsl #22
 390:	00061201 	andeq	r1, r6, r1, lsl #4
 394:	00340700 	eorseq	r0, r4, r0, lsl #14
 398:	0b3a0803 	bleq	e823ac <startup-0x1f17dc54>
 39c:	0b390b3b 	bleq	e43090 <startup-0x1f1bcf70>
 3a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3a4:	24080000 	strcs	r0, [r8], #-0
 3a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3ac:	000e030b 	andeq	r0, lr, fp, lsl #6
 3b0:	00240900 	eoreq	r0, r4, r0, lsl #18
 3b4:	0b3e0b0b 	bleq	f82fe8 <startup-0x1f07d018>
 3b8:	00000803 	andeq	r0, r0, r3, lsl #16
 3bc:	01110100 	tsteq	r1, r0, lsl #2
 3c0:	0b130e25 	bleq	4c3c5c <startup-0x1fb3c3a4>
 3c4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3cc:	00001710 	andeq	r1, r0, r0, lsl r7
 3d0:	0b011302 	bleq	44fe0 <startup-0x1ffbb020>
 3d4:	3b0b3a0b 	blcc	2cec08 <startup-0x1fd313f8>
 3d8:	010b390b 	tsteq	fp, fp, lsl #18
 3dc:	03000013 	movweq	r0, #19
 3e0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3e4:	0b3b0b3a 	bleq	ec30d4 <startup-0x1f13cf2c>
 3e8:	13490b39 	movtne	r0, #39737	; 0x9b39
 3ec:	00000b38 	andeq	r0, r0, r8, lsr fp
 3f0:	0b002404 	bleq	9408 <startup-0x1fff6bf8>
 3f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3f8:	0500000e 	streq	r0, [r0, #-14]
 3fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 400:	0b3b0b3a 	bleq	ec30f0 <startup-0x1f13cf10>
 404:	13490b39 	movtne	r0, #39737	; 0x9b39
 408:	13060000 	movwne	r0, #24576	; 0x6000
 40c:	0b0e0301 	bleq	381018 <startup-0x1fc7efe8>
 410:	3b0b3a0b 	blcc	2cec44 <startup-0x1fd313bc>
 414:	010b390b 	tsteq	fp, fp, lsl #18
 418:	07000013 	smladeq	r0, r3, r0, r0
 41c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 420:	0b3b0b3a 	bleq	ec3110 <startup-0x1f13cef0>
 424:	13490b39 	movtne	r0, #39737	; 0x9b39
 428:	00000b38 	andeq	r0, r0, r8, lsr fp
 42c:	0b000f08 	bleq	4054 <startup-0x1fffbfac>
 430:	0013490b 	andseq	r4, r3, fp, lsl #18
 434:	00240900 	eoreq	r0, r4, r0, lsl #18
 438:	0b3e0b0b 	bleq	f8306c <startup-0x1f07cf94>
 43c:	00000803 	andeq	r0, r0, r3, lsl #16
 440:	3f012e0a 	svccc	0x00012e0a
 444:	3a0e0319 	bcc	3810b0 <startup-0x1fc7ef50>
 448:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 44c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 450:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 454:	96184006 	ldrls	r4, [r8], -r6
 458:	13011942 	movwne	r1, #6466	; 0x1942
 45c:	050b0000 	streq	r0, [fp, #-0]
 460:	3a0e0300 	bcc	381068 <startup-0x1fc7ef98>
 464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 468:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 46c:	0c000018 	stceq	0, cr0, [r0], {24}
 470:	08030034 	stmdaeq	r3, {r2, r4, r5}
 474:	0b3b0b3a 	bleq	ec3164 <startup-0x1f13ce9c>
 478:	13490b39 	movtne	r0, #39737	; 0x9b39
 47c:	00001802 	andeq	r1, r0, r2, lsl #16
 480:	11010b0d 	tstne	r1, sp, lsl #22
 484:	00061201 	andeq	r1, r6, r1, lsl #4
 488:	00340e00 	eorseq	r0, r4, r0, lsl #28
 48c:	0b3a0e03 	bleq	e83ca0 <startup-0x1f17c360>
 490:	0b390b3b 	bleq	e43184 <startup-0x1f1bce7c>
 494:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 498:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 49c:	03193f01 	tsteq	r9, #1, 30
 4a0:	3b0b3a0e 	blcc	2cece0 <startup-0x1fd31320>
 4a4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 4a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4ac:	96184006 	ldrls	r4, [r8], -r6
 4b0:	00001942 	andeq	r1, r0, r2, asr #18
 4b4:	03000510 	movweq	r0, #1296	; 0x510
 4b8:	3b0b3a08 	blcc	2cece0 <startup-0x1fd31320>
 4bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4c0:	00180213 	andseq	r0, r8, r3, lsl r2
 4c4:	11010000 	mrsne	r0, (UNDEF: 1)
 4c8:	130e2501 	movwne	r2, #58625	; 0xe501
 4cc:	1b0e030b 	blne	381100 <startup-0x1fc7ef00>
 4d0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4d4:	00171006 	andseq	r1, r7, r6
 4d8:	00240200 	eoreq	r0, r4, r0, lsl #4
 4dc:	0b3e0b0b 	bleq	f83110 <startup-0x1f07cef0>
 4e0:	00000e03 	andeq	r0, r0, r3, lsl #28
 4e4:	3f012e03 	svccc	0x00012e03
 4e8:	3a0e0319 	bcc	381154 <startup-0x1fc7eeac>
 4ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f0:	1119270b 	tstne	r9, fp, lsl #14
 4f4:	40061201 	andmi	r1, r6, r1, lsl #4
 4f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4fc:	00001301 	andeq	r1, r0, r1, lsl #6
 500:	03000504 	movweq	r0, #1284	; 0x504
 504:	3b0b3a08 	blcc	2ced2c <startup-0x1fd312d4>
 508:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 50c:	00180213 	andseq	r0, r8, r3, lsl r2
 510:	00340500 	eorseq	r0, r4, r0, lsl #10
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	0b390b3b 	bleq	e4320c <startup-0x1f1bcdf4>
 51c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 520:	01060000 	mrseq	r0, (UNDEF: 6)
 524:	01134901 	tsteq	r3, r1, lsl #18
 528:	07000013 	smladeq	r0, r3, r0, r0
 52c:	13490021 	movtne	r0, #36897	; 0x9021
 530:	00000b2f 	andeq	r0, r0, pc, lsr #22
 534:	3f012e08 	svccc	0x00012e08
 538:	3a0e0319 	bcc	3811a4 <startup-0x1fc7ee5c>
 53c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 540:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 544:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 548:	96184006 	ldrls	r4, [r8], -r6
 54c:	13011942 	movwne	r1, #6466	; 0x1942
 550:	34090000 	strcc	r0, [r9], #-0
 554:	3a080300 	bcc	20115c <startup-0x1fdfeea4>
 558:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 55c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 560:	0a000018 	beq	5c8 <startup-0x1ffffa38>
 564:	0111010b 	tsteq	r1, fp, lsl #2
 568:	00000612 	andeq	r0, r0, r2, lsl r6
 56c:	0b00240b 	bleq	95a0 <startup-0x1fff6a60>
 570:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 574:	0c000008 	stceq	0, cr0, [r0], {8}
 578:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 57c:	0b3a0e03 	bleq	e83d90 <startup-0x1f17c270>
 580:	0b390b3b 	bleq	e43274 <startup-0x1f1bcd8c>
 584:	01111927 	tsteq	r1, r7, lsr #18
 588:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 58c:	00194297 	mulseq	r9, r7, r2
 590:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 594:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 598:	0b3b0b3a 	bleq	ec3288 <startup-0x1f13cd78>
 59c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 5a0:	01111349 	tsteq	r1, r9, asr #6
 5a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 5b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5b4:	0b3a0e03 	bleq	e83dc8 <startup-0x1f17c238>
 5b8:	0b390b3b 	bleq	e432ac <startup-0x1f1bcd54>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	00194297 	mulseq	r9, r7, r2
 5c8:	11010000 	mrsne	r0, (UNDEF: 1)
 5cc:	130e2501 	movwne	r2, #58625	; 0xe501
 5d0:	1b0e030b 	blne	381204 <startup-0x1fc7edfc>
 5d4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5d8:	00171006 	andseq	r1, r7, r6
 5dc:	01130200 	tsteq	r3, r0, lsl #4
 5e0:	0b3a0b0b 	bleq	e83214 <startup-0x1f17cdec>
 5e4:	0b390b3b 	bleq	e432d8 <startup-0x1f1bcd28>
 5e8:	00001301 	andeq	r1, r0, r1, lsl #6
 5ec:	03000d03 	movweq	r0, #3331	; 0xd03
 5f0:	3b0b3a08 	blcc	2cee18 <startup-0x1fd311e8>
 5f4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5f8:	000b3813 	andeq	r3, fp, r3, lsl r8
 5fc:	00240400 	eoreq	r0, r4, r0, lsl #8
 600:	0b3e0b0b 	bleq	f83234 <startup-0x1f07cdcc>
 604:	00000e03 	andeq	r0, r0, r3, lsl #28
 608:	03001605 	movweq	r1, #1541	; 0x605
 60c:	3b0b3a0e 	blcc	2cee4c <startup-0x1fd311b4>
 610:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 614:	06000013 			; <UNDEFINED> instruction: 0x06000013
 618:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 61c:	0b3b0b3a 	bleq	ec330c <startup-0x1f13ccf4>
 620:	13490b39 	movtne	r0, #39737	; 0x9b39
 624:	00000b38 	andeq	r0, r0, r8, lsr fp
 628:	0b002407 	bleq	964c <startup-0x1fff69b4>
 62c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 630:	08000008 	stmdaeq	r0, {r3}
 634:	13490101 	movtne	r0, #37121	; 0x9101
 638:	00001301 	andeq	r1, r0, r1, lsl #6
 63c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 640:	000b2f13 	andeq	r2, fp, r3, lsl pc
 644:	000f0a00 	andeq	r0, pc, r0, lsl #20
 648:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 64c:	130b0000 	movwne	r0, #45056	; 0xb000
 650:	0b0e0301 	bleq	38125c <startup-0x1fc7eda4>
 654:	3b0b3a0b 	blcc	2cee88 <startup-0x1fd31178>
 658:	010b390b 	tsteq	fp, fp, lsl #18
 65c:	0c000013 	stceq	0, cr0, [r0], {19}
 660:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 664:	00001301 	andeq	r1, r0, r1, lsl #6
 668:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
 66c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 670:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 674:	0b3b0b3a 	bleq	ec3364 <startup-0x1f13cc9c>
 678:	13490b39 	movtne	r0, #39737	; 0x9b39
 67c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 680:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 684:	03193f01 	tsteq	r9, #1, 30
 688:	3b0b3a0e 	blcc	2ceec8 <startup-0x1fd31138>
 68c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 690:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 694:	96184006 	ldrls	r4, [r8], -r6
 698:	13011942 	movwne	r1, #6466	; 0x1942
 69c:	34100000 	ldrcc	r0, [r0], #-0
 6a0:	3a080300 	bcc	2012a8 <startup-0x1fdfed58>
 6a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6ac:	11000018 	tstne	r0, r8, lsl r0
 6b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 6b4:	0b3b0b3a 	bleq	ec33a4 <startup-0x1f13cc5c>
 6b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 6bc:	00001802 	andeq	r1, r0, r2, lsl #16
 6c0:	03000512 	movweq	r0, #1298	; 0x512
 6c4:	3b0b3a0e 	blcc	2cef04 <startup-0x1fd310fc>
 6c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6cc:	00180213 	andseq	r0, r8, r3, lsl r2
 6d0:	002e1300 	eoreq	r1, lr, r0, lsl #6
 6d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6d8:	0b3b0b3a 	bleq	ec33c8 <startup-0x1f13cc38>
 6dc:	01110b39 	tsteq	r1, r9, lsr fp
 6e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6e4:	00194296 	mulseq	r9, r6, r2
 6e8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 6ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6f0:	0b3b0b3a 	bleq	ec33e0 <startup-0x1f13cc20>
 6f4:	01110b39 	tsteq	r1, r9, lsr fp
 6f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 700:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 704:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 708:	0b3a0e03 	bleq	e83f1c <startup-0x1f17c0e4>
 70c:	0b390b3b 	bleq	e43400 <startup-0x1f1bcc00>
 710:	13491927 	movtne	r1, #39207	; 0x9927
 714:	06120111 			; <UNDEFINED> instruction: 0x06120111
 718:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 71c:	00000019 	andeq	r0, r0, r9, lsl r0
 720:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 724:	030b130e 	movweq	r1, #45838	; 0xb30e
 728:	110e1b0e 	tstne	lr, lr, lsl #22
 72c:	10061201 	andne	r1, r6, r1, lsl #4
 730:	02000017 	andeq	r0, r0, #23
 734:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 738:	0b3a0803 	bleq	e8274c <startup-0x1f17d8b4>
 73c:	0b390b3b 	bleq	e43430 <startup-0x1f1bcbd0>
 740:	13491927 	movtne	r1, #39207	; 0x9927
 744:	06120111 			; <UNDEFINED> instruction: 0x06120111
 748:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 74c:	00130119 	andseq	r0, r3, r9, lsl r1
 750:	00050300 	andeq	r0, r5, r0, lsl #6
 754:	0b3a0803 	bleq	e82768 <startup-0x1f17d898>
 758:	0b390b3b 	bleq	e4344c <startup-0x1f1bcbb4>
 75c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 760:	24040000 	strcs	r0, [r4], #-0
 764:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 768:	0008030b 	andeq	r0, r8, fp, lsl #6
 76c:	11010000 	mrsne	r0, (UNDEF: 1)
 770:	130e2501 	movwne	r2, #58625	; 0xe501
 774:	1b0e030b 	blne	3813a8 <startup-0x1fc7ec58>
 778:	1117550e 	tstne	r7, lr, lsl #10
 77c:	00171001 	andseq	r1, r7, r1
 780:	00240200 	eoreq	r0, r4, r0, lsl #4
 784:	0b3e0b0b 	bleq	f833b8 <startup-0x1f07cc48>
 788:	00000e03 	andeq	r0, r0, r3, lsl #28
 78c:	3f012e03 	svccc	0x00012e03
 790:	3a0e0319 	bcc	3813fc <startup-0x1fc7ec04>
 794:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 798:	1119270b 	tstne	r9, fp, lsl #14
 79c:	40061201 	andmi	r1, r6, r1, lsl #4
 7a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7a4:	00001301 	andeq	r1, r0, r1, lsl #6
 7a8:	03000504 	movweq	r0, #1284	; 0x504
 7ac:	3b0b3a08 	blcc	2cefd4 <startup-0x1fd3102c>
 7b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 7b4:	00180213 	andseq	r0, r8, r3, lsl r2
 7b8:	00240500 	eoreq	r0, r4, r0, lsl #10
 7bc:	0b3e0b0b 	bleq	f833f0 <startup-0x1f07cc10>
 7c0:	00000803 	andeq	r0, r0, r3, lsl #16
 7c4:	3f002e06 	svccc	0x00002e06
 7c8:	3a0e0319 	bcc	381434 <startup-0x1fc7ebcc>
 7cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7d0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 7d4:	97184006 	ldrls	r4, [r8, -r6]
 7d8:	00001942 	andeq	r1, r0, r2, asr #18
 7dc:	3f002e07 	svccc	0x00002e07
 7e0:	3a0e0319 	bcc	38144c <startup-0x1fc7ebb4>
 7e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7e8:	1119270b 	tstne	r9, fp, lsl #14
 7ec:	40061201 	andmi	r1, r6, r1, lsl #4
 7f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7f4:	01000000 	mrseq	r0, (UNDEF: 0)
 7f8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 7fc:	0e030b13 	vmoveq.32	d3[0], r0
 800:	01110e1b 	tsteq	r1, fp, lsl lr
 804:	17100612 			; <UNDEFINED> instruction: 0x17100612
 808:	16020000 	strne	r0, [r2], -r0
 80c:	3a0e0300 	bcc	381414 <startup-0x1fc7ebec>
 810:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 814:	0013490b 	andseq	r4, r3, fp, lsl #18
 818:	00240300 	eoreq	r0, r4, r0, lsl #6
 81c:	0b3e0b0b 	bleq	f83450 <startup-0x1f07cbb0>
 820:	00000e03 	andeq	r0, r0, r3, lsl #28
 824:	03011304 	movweq	r1, #4868	; 0x1304
 828:	3a0b0b0e 	bcc	2c3468 <startup-0x1fd3cb98>
 82c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 830:	0013010b 	andseq	r0, r3, fp, lsl #2
 834:	000d0500 	andeq	r0, sp, r0, lsl #10
 838:	0b3a0803 	bleq	e8284c <startup-0x1f17d7b4>
 83c:	0b390b3b 	bleq	e43530 <startup-0x1f1bcad0>
 840:	0b381349 	bleq	e0556c <startup-0x1f1faa94>
 844:	0d060000 	stceq	0, cr0, [r6, #-0]
 848:	3a0e0300 	bcc	381450 <startup-0x1fc7ebb0>
 84c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 850:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 854:	0700000b 	streq	r0, [r0, -fp]
 858:	13490035 	movtne	r0, #36917	; 0x9035
 85c:	16080000 	strne	r0, [r8], -r0
 860:	3a080300 	bcc	201468 <startup-0x1fdfeb98>
 864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 868:	0013490b 	andseq	r4, r3, fp, lsl #18
 86c:	00340900 	eorseq	r0, r4, r0, lsl #18
 870:	0b3a0e03 	bleq	e84084 <startup-0x1f17bf7c>
 874:	0b390b3b 	bleq	e43568 <startup-0x1f1bca98>
 878:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 87c:	240a0000 	strcs	r0, [sl], #-0
 880:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 884:	0008030b 	andeq	r0, r8, fp, lsl #6
 888:	00340b00 	eorseq	r0, r4, r0, lsl #22
 88c:	0b3a0e03 	bleq	e840a0 <startup-0x1f17bf60>
 890:	0b390b3b 	bleq	e43584 <startup-0x1f1bca7c>
 894:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 898:	00001802 	andeq	r1, r0, r2, lsl #16
 89c:	3f002e0c 	svccc	0x00002e0c
 8a0:	3a0e0319 	bcc	38150c <startup-0x1fc7eaf4>
 8a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8a8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 8ac:	97184006 	ldrls	r4, [r8, -r6]
 8b0:	00001942 	andeq	r1, r0, r2, asr #18
 8b4:	3f012e0d 	svccc	0x00012e0d
 8b8:	3a0e0319 	bcc	381524 <startup-0x1fc7eadc>
 8bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8c0:	1119270b 	tstne	r9, fp, lsl #14
 8c4:	40061201 	andmi	r1, r6, r1, lsl #4
 8c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 8cc:	00001301 	andeq	r1, r0, r1, lsl #6
 8d0:	0300050e 	movweq	r0, #1294	; 0x50e
 8d4:	3b0b3a0e 	blcc	2cf114 <startup-0x1fd30eec>
 8d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 8dc:	00180213 	andseq	r0, r8, r3, lsl r2
 8e0:	002e0f00 	eoreq	r0, lr, r0, lsl #30
 8e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 8e8:	0b3b0b3a 	bleq	ec35d8 <startup-0x1f13ca28>
 8ec:	13490b39 	movtne	r0, #39737	; 0x9b39
 8f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8f8:	10000019 	andne	r0, r0, r9, lsl r0
 8fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 900:	0b3a0e03 	bleq	e84114 <startup-0x1f17beec>
 904:	0b390b3b 	bleq	e435f8 <startup-0x1f1bca08>
 908:	06120111 			; <UNDEFINED> instruction: 0x06120111
 90c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 910:	00130119 	andseq	r0, r3, r9, lsl r1
 914:	010b1100 	mrseq	r1, (UNDEF: 27)
 918:	06120111 			; <UNDEFINED> instruction: 0x06120111
 91c:	0f120000 	svceq	0x00120000
 920:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 924:	13000013 	movwne	r0, #19
 928:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 92c:	0b3a0e03 	bleq	e84140 <startup-0x1f17bec0>
 930:	0b390b3b 	bleq	e43624 <startup-0x1f1bc9dc>
 934:	06120111 			; <UNDEFINED> instruction: 0x06120111
 938:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 93c:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
 940:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 944:	0b3a0e03 	bleq	e84158 <startup-0x1f17bea8>
 948:	0b390b3b 	bleq	e4363c <startup-0x1f1bc9c4>
 94c:	01111927 	tsteq	r1, r7, lsr #18
 950:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 954:	01194296 			; <UNDEFINED> instruction: 0x01194296
 958:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 95c:	08030005 	stmdaeq	r3, {r0, r2}
 960:	0b3b0b3a 	bleq	ec3650 <startup-0x1f13c9b0>
 964:	13490b39 	movtne	r0, #39737	; 0x9b39
 968:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000031c 	andeq	r0, r0, ip, lsl r3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02b80002 	adcseq	r0, r8, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000032c 	andcs	r0, r0, ip, lsr #6
  34:	0000029c 	muleq	r0, ip, r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	061b0002 	ldreq	r0, [fp], -r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200005c8 	andcs	r0, r0, r8, asr #11
  54:	0000006a 	andeq	r0, r0, sl, rrx
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	075b0002 	ldrbeq	r0, [fp, -r2]
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	20000634 	andcs	r0, r0, r4, lsr r6
  74:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	07ef0002 	strbeq	r0, [pc, r2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200006c0 	andcs	r0, r0, r0, asr #13
  94:	00000312 	andeq	r0, r0, r2, lsl r3
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	0b250002 	bleq	9400b4 <startup-0x1f6bff4c>
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	200009d4 	ldrdcs	r0, [r0], -r4
  b4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	0c6e0002 	stcleq	0, cr0, [lr], #-8
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000ba4 	andcs	r0, r0, r4, lsr #23
  d4:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	0fb40002 	svceq	0x00b40002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	20001060 	andcs	r1, r0, r0, rrx
  f4:	0000001e 	andeq	r0, r0, lr, lsl r0
	...
 100:	00000024 	andeq	r0, r0, r4, lsr #32
 104:	100b0002 	andne	r0, fp, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	2000107e 	andcs	r1, r0, lr, ror r0
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	20000000 	andcs	r0, r0, r0
 11c:	0000000c 	andeq	r0, r0, ip
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	10e10002 	rscne	r0, r1, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20001098 	mulcs	r0, r8, r0
 13c:	00000220 	andeq	r0, r0, r0, lsr #4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000192 	muleq	r0, r2, r1
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	00632e69 	rsbeq	r2, r3, r9, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	0d051620 	stceq	6, cr1, [r5, #-128]	; 0xffffff80
  34:	200b0568 	andcs	r0, fp, r8, ror #10
  38:	054b1905 	strbeq	r1, [fp, #-2309]	; 0xfffff6fb
  3c:	19056609 	stmdbne	r5, {r0, r3, r9, sl, sp, lr}
  40:	4b010520 	blmi	414c8 <startup-0x1ffbeb38>
  44:	05682205 	strbeq	r2, [r8, #-517]!	; 0xfffffdfb
  48:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
  4c:	4b080520 	blmi	2014d4 <startup-0x1fdfeb2c>
  50:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
  54:	12052f02 	andne	r2, r5, #2, 30
  58:	67010520 	strvs	r0, [r1, -r0, lsr #10]
  5c:	05691e05 	strbeq	r1, [r9, #-3589]!	; 0xfffff1fb
  60:	2f3e3f09 	svccs	0x003e3f09
  64:	05310d05 	ldreq	r0, [r1, #-3333]!	; 0xfffff2fb
  68:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
  6c:	3e10053e 	mrccc	5, 0, r0, cr0, cr14, {1}
  70:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb73 <winning_score+0xdfffe80f>
  74:	0205751a 	andeq	r7, r5, #109051904	; 0x6800000
  78:	2010053d 	andscs	r0, r0, sp, lsr r5
  7c:	05330905 	ldreq	r0, [r3, #-2309]!	; 0xfffff6fb
  80:	0d053d05 	stceq	13, cr3, [r5, #-20]	; 0xffffffec
  84:	5903053e 	stmdbpl	r3, {r1, r2, r3, r4, r5, r8, sl}
  88:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
  8c:	05052f10 	streq	r2, [r5, #-3856]	; 0xfffff0f0
  90:	a017052f 	andsge	r0, r7, pc, lsr #10
  94:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
  98:	20052e02 	andcs	r2, r5, r2, lsl #28
  9c:	2e100520 	cfmul64cs	mvdx0, mvdx0, mvdx0
  a0:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
  a4:	06053d05 	streq	r3, [r5], -r5, lsl #26
  a8:	5912053d 	ldmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
  ac:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
  b0:	10052020 	andne	r2, r5, r0, lsr #32
  b4:	2109052e 	tstcs	r9, lr, lsr #10
  b8:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
  bc:	09059f2e 	stmdbeq	r5, {r1, r2, r3, r5, r8, r9, sl, fp, ip, pc}
  c0:	1a053d68 	bne	14f668 <startup-0x1feb0998>
  c4:	3d090520 	cfstr32cc	mvfx0, [r9, #-128]	; 0xffffff80
  c8:	05053d2f 	streq	r3, [r5, #-3375]	; 0xfffff2d1
  cc:	67230531 			; <UNDEFINED> instruction: 0x67230531
  d0:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
  d4:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
  d8:	054b2405 	strbeq	r2, [fp, #-1029]	; 0xfffffbfb
  dc:	02056703 	andeq	r6, r5, #786432	; 0xc0000
  e0:	01053e3d 	tsteq	r5, sp, lsr lr
  e4:	4c210559 	cfstr32mi	mvfx0, [r1], #-356	; 0xfffffe9c
  e8:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
  ec:	04020009 	streq	r0, [r2], #-9
  f0:	1d052001 	stcne	0, cr2, [r5, #-4]
  f4:	01040200 	mrseq	r0, R12_usr
  f8:	0007053c 	andeq	r0, r7, ip, lsr r5
  fc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 100:	59300205 	ldmdbpl	r0!, {r0, r2, r9}
 104:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 108:	07054c24 	streq	r4, [r5, -r4, lsr #24]
 10c:	00090567 	andeq	r0, r9, r7, ror #10
 110:	20010402 	andcs	r0, r1, r2, lsl #8
 114:	02001d05 	andeq	r1, r0, #320	; 0x140
 118:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 11c:	04020007 	streq	r0, [r2], #-7
 120:	02053c01 	andeq	r3, r5, #256	; 0x100
 124:	01055930 	tsteq	r5, r0, lsr r9
 128:	4c12053d 	cfldr32mi	mvfx0, [r2], {61}	; 0x3d
 12c:	3e300205 	cdpcc	2, 3, cr0, cr0, cr5, {0}
 130:	01053e3e 	tsteq	r5, lr, lsr lr
 134:	3e1a053d 	mrccc	5, 0, r0, cr10, cr13, {1}
 138:	052f0505 	streq	r0, [pc, #-1285]!	; fffffc3b <winning_score+0xdfffe8d7>
 13c:	21053d01 	tstcs	r5, r1, lsl #26
 140:	5906053e 	stmdbpl	r6, {r1, r2, r3, r4, r5, r8, sl}
 144:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 148:	17053d0a 	strne	r3, [r5, -sl, lsl #26]
 14c:	6602053e 			; <UNDEFINED> instruction: 0x6602053e
 150:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
 154:	13054c31 	movwne	r4, #23601	; 0x5c31
 158:	2e060592 	mcrcs	5, 0, r0, cr6, cr2, {4}
 15c:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
 160:	15053c06 	strne	r3, [r5, #-3078]	; 0xfffff3fa
 164:	2e060521 	cfsh32cs	mvfx0, mvfx6, #17
 168:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 16c:	02052010 	andeq	r2, r5, #16
 170:	2011052f 	andscs	r0, r1, pc, lsr #10
 174:	052f0505 	streq	r0, [pc, #-1285]!	; fffffc77 <winning_score+0xdfffe913>
 178:	02052015 	andeq	r2, r5, #21
 17c:	055a673d 	ldrbeq	r6, [sl, #-1853]	; 0xfffff8c3
 180:	02052010 	andeq	r2, r5, #16
 184:	2011052f 	andscs	r0, r1, pc, lsr #10
 188:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 18c:	01052012 	tsteq	r5, r2, lsl r0
 190:	000d022f 	andeq	r0, sp, pc, lsr #4
 194:	01b10101 			; <UNDEFINED> instruction: 0x01b10101
 198:	00030000 	andeq	r0, r3, r0
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1a4:	0101000d 	tsteq	r1, sp
 1a8:	00000101 	andeq	r0, r0, r1, lsl #2
 1ac:	00000100 	andeq	r0, r0, r0, lsl #2
 1b0:	61620001 	cmnvs	r2, r1
 1b4:	6e616c6c 	cdpvs	12, 6, cr6, cr1, cr12, {3}
 1b8:	64617064 	strbtvs	r7, [r1], #-100	; 0xffffff9c
 1bc:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
 1c0:	00000063 	andeq	r0, r0, r3, rrx
 1c4:	73696400 	cmnvc	r9, #0, 8
 1c8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1cc:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
 1d0:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
 1dc:	00032c02 	andeq	r2, r3, r2, lsl #24
 1e0:	01160320 	tsteq	r6, r0, lsr #6
 1e4:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
 1e8:	21052e05 	tstcs	r5, r5, lsl #28
 1ec:	03040200 	movweq	r0, #16896	; 0x4200
 1f0:	002d0521 	eoreq	r0, sp, r1, lsr #10
 1f4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 1f8:	02003605 	andeq	r3, r0, #5242880	; 0x500000
 1fc:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 200:	04020009 	streq	r0, [r2], #-9
 204:	44052e03 	strmi	r2, [r5], #-3587	; 0xfffff1fd
 208:	03040200 	movweq	r0, #16896	; 0x4200
 20c:	00500520 	subseq	r0, r0, r0, lsr #10
 210:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 214:	02005905 	andeq	r5, r0, #81920	; 0x14000
 218:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 21c:	04020009 	streq	r0, [r2], #-9
 220:	31052e03 	tstcc	r5, r3, lsl #28
 224:	03040200 	movweq	r0, #16896	; 0x4200
 228:	001e0549 	andseq	r0, lr, r9, asr #10
 22c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 230:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 234:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 238:	04020005 	streq	r0, [r2], #-5
 23c:	01052001 	tsteq	r5, r1
 240:	5a26053f 	bpl	981744 <startup-0x1f67e8bc>
 244:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 248:	23052e07 	movwcs	r2, #24071	; 0x5e07
 24c:	03040200 	movweq	r0, #16896	; 0x4200
 250:	002f0521 	eoreq	r0, pc, r1, lsr #10
 254:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 258:	02003805 	andeq	r3, r0, #327680	; 0x50000
 25c:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 260:	04020009 	streq	r0, [r2], #-9
 264:	46052e03 	strmi	r2, [r5], -r3, lsl #28
 268:	03040200 	movweq	r0, #16896	; 0x4200
 26c:	00520520 	subseq	r0, r2, r0, lsr #10
 270:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 274:	02005b05 	andeq	r5, r0, #5120	; 0x1400
 278:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 27c:	04020009 	streq	r0, [r2], #-9
 280:	33052e03 	movwcc	r2, #24067	; 0x5e03
 284:	03040200 	movweq	r0, #16896	; 0x4200
 288:	00200549 	eoreq	r0, r0, r9, asr #10
 28c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 290:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 294:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 298:	04020007 	streq	r0, [r2], #-7
 29c:	01052001 	tsteq	r5, r1
 2a0:	5925053f 	stmdbpl	r5!, {r0, r1, r2, r3, r4, r5, r8, sl}
 2a4:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 2a8:	1a054b11 	bne	152ef4 <startup-0x1fead10c>
 2ac:	2e11052e 	cfmul64cs	mvdx0, mvdx1, mvdx14
 2b0:	2e1a053d 	mrccs	5, 0, r0, cr10, cr13, {1}
 2b4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 2b8:	07053e0e 	streq	r3, [r5, -lr, lsl #28]
 2bc:	2f1f052e 	svccs	0x001f052e
 2c0:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 2c4:	0e052016 	mcreq	0, 0, r2, cr5, cr6, {0}
 2c8:	2e070530 	cfmv64hrcs	mvdx7, r0
 2cc:	052f1f05 	streq	r1, [pc, #-3845]!	; fffff3cf <winning_score+0xdfffe06b>
 2d0:	16052e18 			; <UNDEFINED> instruction: 0x16052e18
 2d4:	300e0520 	andcc	r0, lr, r0, lsr #10
 2d8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 2dc:	18052f1f 	stmdane	r5, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
 2e0:	2016052e 	andscs	r0, r6, lr, lsr #10
 2e4:	05300e05 	ldreq	r0, [r0, #-3589]!	; 0xfffff1fb
 2e8:	1f052e07 	svcne	0x00052e07
 2ec:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 2f0:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 2f4:	01053005 	tsteq	r5, r5
 2f8:	4c27054b 	cfstr32mi	mvfx0, [r7], #-300	; 0xfffffed4
 2fc:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 300:	1a054b11 	bne	152f4c <startup-0x1fead0b4>
 304:	2e11052e 	cfmul64cs	mvdx0, mvdx1, mvdx14
 308:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 30c:	16052e07 	strne	r2, [r5], -r7, lsl #28
 310:	0e053d2f 	cdpeq	13, 0, cr3, cr5, cr15, {1}
 314:	2e07053e 	mcrcs	5, 0, r0, cr7, cr14, {1}
 318:	3d2f1605 	stccc	6, cr1, [pc, #-20]!	; 30c <startup-0x1ffffcf4>
 31c:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 320:	42054b01 	andmi	r4, r5, #1024	; 0x400
 324:	6712054d 	ldrvs	r0, [r2, -sp, asr #10]
 328:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 32c:	054c2d05 	strbeq	r2, [ip, #-3333]	; 0xfffff2fb
 330:	0903670c 	stmdbeq	r3, {r2, r3, r8, r9, sl, sp, lr}
 334:	0105ac08 	tsteq	r5, r8, lsl #24
 338:	e62f0583 	strt	r0, [pc], -r3, lsl #11
 33c:	03670c05 	cmneq	r7, #1280	; 0x500
 340:	05ac0809 	streq	r0, [ip, #2057]!	; 0x809
 344:	0e028301 	cdpeq	3, 0, cr8, cr2, cr1, {0}
 348:	72010100 	andvc	r0, r1, #0, 2
 34c:	03000000 	movweq	r0, #0
 350:	00001e00 	andeq	r1, r0, r0, lsl #28
 354:	fb010200 	blx	40b5e <startup-0x1ffbf4a2>
 358:	01000d0e 	tsteq	r0, lr, lsl #26
 35c:	00010101 	andeq	r0, r1, r1, lsl #2
 360:	00010000 	andeq	r0, r1, r0
 364:	64000100 	strvs	r0, [r0], #-256	; 0xffffff00
 368:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
 36c:	0000632e 	andeq	r6, r0, lr, lsr #6
 370:	05000000 	streq	r0, [r0, #-0]
 374:	02050020 	andeq	r0, r5, #32
 378:	200005c8 	andcs	r0, r0, r8, asr #11
 37c:	05011603 	streq	r1, [r1, #-1539]	; 0xfffff9fd
 380:	10056808 	andne	r6, r5, r8, lsl #16
 384:	01040200 	mrseq	r0, R12_usr
 388:	00150520 	andseq	r0, r5, r0, lsr #10
 38c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 390:	02000805 	andeq	r0, r0, #327680	; 0x50000
 394:	223c0104 	eorscs	r0, ip, #4, 2
 398:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 39c:	05053c0d 	streq	r3, [r5, #-3085]	; 0xfffff3f3
 3a0:	4b030521 	blmi	c182c <startup-0x1ff3e7d4>
 3a4:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 3a8:	08056815 	stmdaeq	r5, {r0, r2, r4, fp, sp, lr}
 3ac:	2111054b 	tstcs	r1, fp, asr #10
 3b0:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 3b4:	08054909 	stmdaeq	r5, {r0, r3, r8, fp, lr}
 3b8:	3101052e 	tstcc	r1, lr, lsr #10
 3bc:	01000502 	tsteq	r0, r2, lsl #10
 3c0:	0000af01 	andeq	sl, r0, r1, lsl #30
 3c4:	1e000300 	cdpne	3, 0, cr0, cr0, cr0, {0}
 3c8:	02000000 	andeq	r0, r0, #0
 3cc:	0d0efb01 	vstreq	d15, [lr, #-4]
 3d0:	01010100 	mrseq	r0, (UNDEF: 17)
 3d4:	00000001 	andeq	r0, r0, r1
 3d8:	01000001 	tsteq	r0, r1
 3dc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3e0:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 3e4:	00000000 	andeq	r0, r0, r0
 3e8:	00210500 	eoreq	r0, r1, r0, lsl #10
 3ec:	06340205 	ldrteq	r0, [r4], -r5, lsl #4
 3f0:	05142000 	ldreq	r2, [r4, #-0]
 3f4:	05054b0e 	streq	r4, [r5, #-2830]	; 0xfffff4f2
 3f8:	0009052e 	andeq	r0, r9, lr, lsr #10
 3fc:	21030402 	tstcs	r3, r2, lsl #8
 400:	03040200 	movweq	r0, #16896	; 0x4200
 404:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 408:	02002f03 	andeq	r2, r0, #3, 30
 40c:	052f0304 	streq	r0, [pc, #-772]!	; 110 <startup-0x1ffffef0>
 410:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 414:	16052a03 	strne	r2, [r5], -r3, lsl #20
 418:	01040200 	mrseq	r0, R12_usr
 41c:	0005053c 	andeq	r0, r5, ip, lsr r5
 420:	20010402 	andcs	r0, r1, r2, lsl #8
 424:	05420105 	strbeq	r0, [r2, #-261]	; 0xfffffefb
 428:	02055b13 	andeq	r5, r5, #19456	; 0x4c00
 42c:	2f05052f 	svccs	0x0005052f
 430:	052f0105 	streq	r0, [pc, #-261]!	; 333 <startup-0x1ffffccd>
 434:	05053e13 	streq	r3, [r5, #-3603]	; 0xfffff1ed
 438:	200f052f 	andcs	r0, pc, pc, lsr #10
 43c:	052f0205 	streq	r0, [pc, #-517]!	; 23f <startup-0x1ffffdc1>
 440:	0205200c 	andeq	r2, r5, #12
 444:	200b052f 	andcs	r0, fp, pc, lsr #10
 448:	052f0205 	streq	r0, [pc, #-517]!	; 24b <startup-0x1ffffdb5>
 44c:	0705200c 	streq	r2, [r5, -ip]
 450:	000a052f 	andeq	r0, sl, pc, lsr #10
 454:	20010402 	andcs	r0, r1, r2, lsl #8
 458:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 45c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 460:	04020007 	streq	r0, [r2], #-7
 464:	02053c01 	andeq	r3, r5, #256	; 0x100
 468:	200c0521 	andcs	r0, ip, r1, lsr #10
 46c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
 470:	0101000a 	tsteq	r1, sl
 474:	000001a8 	andeq	r0, r0, r8, lsr #3
 478:	00370003 	eorseq	r0, r7, r3
 47c:	01020000 	mrseq	r0, (UNDEF: 2)
 480:	000d0efb 	strdeq	r0, [sp], -fp
 484:	01010101 	tsteq	r1, r1, lsl #2
 488:	01000000 	mrseq	r0, (UNDEF: 0)
 48c:	00010000 	andeq	r0, r1, r0
 490:	70736964 	rsbsvc	r6, r3, r4, ror #18
 494:	4979616c 	ldmdbmi	r9!, {r2, r3, r5, r6, r8, sp, lr}^
 498:	736d6574 	cmnvc	sp, #116, 10	; 0x1d000000
 49c:	0000632e 	andeq	r6, r0, lr, lsr #6
 4a0:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 4a4:	616c7073 	smcvs	50947	; 0xc703
 4a8:	65744979 	ldrbvs	r4, [r4, #-2425]!	; 0xfffff687
 4ac:	682e736d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00380500 	eorseq	r0, r8, r0, lsl #10
 4b8:	06c00205 	strbeq	r0, [r0], r5, lsl #4
 4bc:	05182000 	ldreq	r2, [r8, #-0]
 4c0:	0805770e 	stmdaeq	r5, {r1, r2, r3, r8, r9, sl, ip, sp, lr}
 4c4:	3c19053c 	cfldr32cc	mvfx0, [r9], {60}	; 0x3c
 4c8:	053c1305 	ldreq	r1, [ip, #-773]!	; 0xfffffcfb
 4cc:	0f053c07 	svceq	0x00053c07
 4d0:	07055a2f 	streq	r5, [r5, -pc, lsr #20]
 4d4:	5909054c 	stmdbpl	r9, {r2, r3, r6, r8, sl}
 4d8:	68070568 	stmdavs	r7, {r3, r5, r6, r8, sl}
 4dc:	684b0905 	stmdavs	fp, {r0, r2, r8, fp}^
 4e0:	4b180569 	blmi	601a8c <startup-0x1f9fe574>
 4e4:	4b3c0905 	blmi	f02900 <startup-0x1f0fd700>
 4e8:	3007052f 	andcc	r0, r7, pc, lsr #10
 4ec:	3e4b0f05 	cdpcc	15, 4, cr0, cr11, cr5, {0}
 4f0:	053e0d05 	ldreq	r0, [lr, #-3333]!	; 0xfffff2fb
 4f4:	0b052e05 	bleq	14bd10 <startup-0x1feb42f0>
 4f8:	590d0521 	stmdbpl	sp, {r0, r5, r8, sl}
 4fc:	690f0576 	stmdbvs	pc, {r1, r2, r4, r5, r6, r8, sl}	; <UNPREDICTABLE>
 500:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
 504:	0f052e0b 	svceq	0x00052e0b
 508:	4b13053d 	blmi	4c1a04 <startup-0x1fb3e5fc>
 50c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 510:	76030204 	strvc	r0, [r3], -r4, lsl #4
 514:	0005054a 	andeq	r0, r5, sl, asr #10
 518:	3c010402 	cfstrscc	mvf0, [r1], {2}
 51c:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
 520:	5a1d054a 	bpl	741a50 <startup-0x1f8be5b0>
 524:	05591905 	ldrbeq	r1, [r9, #-2309]	; 0xfffff6fb
 528:	19052e0d 	stmdbne	r5, {r0, r2, r3, r9, sl, fp, sp}
 52c:	2e0d0521 	cfsh32cs	mvfx0, mvfx13, #17
 530:	05221905 	streq	r1, [r2, #-2309]!	; 0xfffff6fb
 534:	19052e0d 	stmdbne	r5, {r0, r2, r3, r9, sl, fp, sp}
 538:	2e0d0521 	cfsh32cs	mvfx0, mvfx13, #17
 53c:	05210705 	streq	r0, [r1, #-1797]!	; 0xfffff8fb
 540:	04020010 	streq	r0, [r2], #-16
 544:	09053c01 	stmdbeq	r5, {r0, sl, fp, ip, sp}
 548:	6710053d 			; <UNDEFINED> instruction: 0x6710053d
 54c:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
 550:	1a052101 	bne	14895c <startup-0x1feb76a4>
 554:	5b0b054d 	blpl	2c1a90 <startup-0x1fd3e570>
 558:	59590a05 	ldmdbpl	r9, {r0, r2, r9, fp}^
 55c:	055b1405 	ldrbeq	r1, [fp, #-1029]	; 0xfffffbfb
 560:	27052e0d 	strcs	r2, [r5, -sp, lsl #28]
 564:	2e20053c 	mcrcs	5, 1, r0, cr0, cr12, {1}
 568:	052e3805 	streq	r3, [lr, #-2053]!	; 0xfffff7fb
 56c:	31052e3b 	tstcc	r5, fp, lsr lr
 570:	3c4d054a 	cfstr64cc	mvdx0, [sp], {74}	; 0x4a
 574:	052e4605 	streq	r4, [lr, #-1541]!	; 0xfffff9fb
 578:	6b052e5a 	blvs	14bee8 <startup-0x1feb4118>
 57c:	58720566 	ldmdapl	r2!, {r1, r2, r5, r6, r8, sl}^
 580:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 584:	0d052e17 	stceq	14, cr2, [r5, #-92]	; 0xffffffa4
 588:	2e2b0558 	mcrcs	5, 1, r0, cr11, cr8, {2}
 58c:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
 590:	35052e3c 	strcc	r2, [r5, #-3644]	; 0xfffff1c4
 594:	2e4d053c 	mcrcs	5, 2, r0, cr13, cr12, {1}
 598:	052e5005 	streq	r5, [lr, #-5]!
 59c:	5d055846 	stcpl	8, cr5, [r5, #-280]	; 0xfffffee8
 5a0:	666e052e 	strbtvs	r0, [lr], -lr, lsr #10
 5a4:	05587505 	ldrbeq	r7, [r8, #-1285]	; 0xfffffafb
 5a8:	17054b14 	smladne	r5, r4, fp, r4
 5ac:	580d052e 	stmdapl	sp, {r1, r2, r3, r5, r8, sl}
 5b0:	053c2b05 	ldreq	r2, [ip, #-2821]!	; 0xfffff4fb
 5b4:	24052e2d 	strcs	r2, [r5], #-3629	; 0xfffff1d3
 5b8:	2e3e0558 	mrccs	5, 1, r0, cr14, cr8, {2}
 5bc:	052e3705 	streq	r3, [lr, #-1797]!	; 0xfffff8fb
 5c0:	52052e4f 	andpl	r2, r5, #1264	; 0x4f0
 5c4:	4a48052e 	bmi	1201a84 <startup-0x1edfe57c>
 5c8:	052e5f05 	streq	r5, [lr, #-3845]!	; 0xfffff0fb
 5cc:	77056670 	smlsdxvc	r5, r0, r6, r6
 5d0:	4b1b0558 	blmi	6c1b38 <startup-0x1f93e4c8>
 5d4:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
 5d8:	26054b01 	strcs	r4, [r5], -r1, lsl #22
 5dc:	6914054c 	ldmdbvs	r4, {r2, r3, r6, r8, sl}
 5e0:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 5e4:	1d053c27 	stcne	12, cr3, [r5, #-156]	; 0xffffff64
 5e8:	2f1a052e 	svccs	0x001a052e
 5ec:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 5f0:	0e052115 	mcreq	1, 0, r2, cr5, cr5, {0}
 5f4:	3d13052e 	cfldr32cc	mvfx0, [r3, #-184]	; 0xffffff48
 5f8:	2f2e0e05 	svccs	0x002e0e05
 5fc:	05bb0905 	ldreq	r0, [fp, #2309]!	; 0x905
 600:	0e054b12 	vmoveq.32	d5[0], r4
 604:	2f12053c 	svccs	0x0012053c
 608:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
 60c:	0a052f0d 	beq	14c248 <startup-0x1feb3db8>
 610:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
 614:	3c0a030c 	stccc	3, cr0, [sl], {12}
 618:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
 61c:	01010004 	tsteq	r1, r4
 620:	00000132 	andeq	r0, r0, r2, lsr r1
 624:	001d0003 	andseq	r0, sp, r3
 628:	01020000 	mrseq	r0, (UNDEF: 2)
 62c:	000d0efb 	strdeq	r0, [sp], -fp
 630:	01010101 	tsteq	r1, r1, lsl #2
 634:	01000000 	mrseq	r0, (UNDEF: 0)
 638:	00010000 	andeq	r0, r1, r0
 63c:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 640:	0000632e 	andeq	r6, r0, lr, lsr #6
 644:	05000000 	streq	r0, [r0, #-0]
 648:	0205001a 	andeq	r0, r5, #26
 64c:	200009d4 	ldrdcs	r0, [r0], -r4
 650:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
 654:	11054c05 	tstne	r5, r5, lsl #24
 658:	21052f08 	tstcs	r5, r8, lsl #30
 65c:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 660:	05211105 	streq	r1, [r1, #-261]!	; 0xfffffefb
 664:	09052022 	stmdbeq	r5, {r1, r5, sp}
 668:	2111052e 	tstcs	r1, lr, lsr #10
 66c:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
 670:	11052e09 	tstne	r5, r9, lsl #28
 674:	20220521 	eorcs	r0, r2, r1, lsr #10
 678:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 67c:	23052112 	movwcs	r2, #20754	; 0x5112
 680:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 684:	05230105 	streq	r0, [r3, #-261]!	; 0xfffffefb
 688:	02057616 	andeq	r7, r5, #23068672	; 0x1600000
 68c:	2010053e 	andscs	r0, r0, lr, lsr r5
 690:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff793 <winning_score+0xdfffe42f>
 694:	053d200a 	ldreq	r2, [sp, #-10]!
 698:	10054a07 	andne	r4, r5, r7, lsl #20
 69c:	300a0521 	andcc	r0, sl, r1, lsr #10
 6a0:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 6a4:	0a052110 	beq	148aec <startup-0x1feb7514>
 6a8:	4a070530 	bmi	1c1b70 <startup-0x1fe3e490>
 6ac:	05211005 	streq	r1, [r1, #-5]!
 6b0:	0705300a 	streq	r3, [r5, -sl]
 6b4:	2110054a 	tstcs	r0, sl, asr #10
 6b8:	05300c05 	ldreq	r0, [r0, #-3077]!	; 0xfffff3fb
 6bc:	14052101 	strne	r2, [r5], #-257	; 0xfffffeff
 6c0:	310905ae 	smlatbcc	r9, lr, r5, r0
 6c4:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
 6c8:	18053f09 	stmdane	r5, {r0, r3, r8, r9, sl, fp, ip, sp}
 6cc:	30090520 	andcc	r0, r9, r0, lsr #10
 6d0:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
 6d4:	25053f05 	strcs	r3, [r5, #-3845]	; 0xfffff0fb
 6d8:	30020520 	andcc	r0, r2, r0, lsr #10
 6dc:	05201005 	streq	r1, [r0, #-5]!
 6e0:	05e62f01 	strbeq	r2, [r6, #3841]!	; 0xf01
 6e4:	09053e10 	stmdbeq	r5, {r4, r9, sl, fp, ip, sp}
 6e8:	2205052e 	andcs	r0, r5, #192937984	; 0xb800000
 6ec:	052f0a05 	streq	r0, [pc, #-2565]!	; fffffcef <winning_score+0xdfffe98b>
 6f0:	0505690e 	streq	r6, [r5, #-2318]	; 0xfffff6f2
 6f4:	2109052e 	tstcs	r9, lr, lsr #10
 6f8:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 6fc:	0d054b0c 	vstreq	d4, [r5, #-48]	; 0xffffffd0
 700:	4b1f053d 	blmi	7c1bfc <startup-0x1f83e404>
 704:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
 708:	2205202a 	andcs	r2, r5, #42	; 0x2a
 70c:	2018052e 	andscs	r0, r8, lr, lsr #10
 710:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 714:	05370204 	ldreq	r0, [r7, #-516]!	; 0xfffffdfc
 718:	04020005 	streq	r0, [r2], #-5
 71c:	09033c01 	stmdbeq	r3, {r0, sl, fp, ip, sp}
 720:	2013053c 	andscs	r0, r3, ip, lsr r5
 724:	052f0d05 	streq	r0, [pc, #-3333]!	; fffffa27 <winning_score+0xdfffe6c3>
 728:	04020001 	streq	r0, [r2], #-1
 72c:	1f052101 	svcne	0x00052101
 730:	680a05b1 	stmdavs	sl, {r0, r4, r5, r7, r8, sl}
 734:	11030405 	tstne	r3, r5, lsl #8
 738:	4b220574 	blmi	881d10 <startup-0x1f77e2f0>
 73c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 740:	15052022 	strne	r2, [r5, #-34]	; 0xffffffde
 744:	2501052e 	strcs	r0, [r1, #-1326]	; 0xfffffad2
 748:	051e0505 	ldreq	r0, [lr, #-1285]	; 0xfffffafb
 74c:	01052015 	tsteq	r5, r5, lsl r0
 750:	00090230 	andeq	r0, r9, r0, lsr r2
 754:	01c10101 	biceq	r0, r1, r1, lsl #2
 758:	00030000 	andeq	r0, r3, r0
 75c:	0000002f 	andeq	r0, r0, pc, lsr #32
 760:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 764:	0101000d 	tsteq	r1, sp
 768:	00000101 	andeq	r0, r0, r1, lsl #2
 76c:	00000100 	andeq	r0, r0, r0, lsl #2
 770:	616d0001 	cmnvs	sp, r1
 774:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 778:	00000000 	andeq	r0, r0, r0
 77c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 780:	4979616c 	ldmdbmi	r9!, {r2, r3, r5, r6, r8, sp, lr}^
 784:	736d6574 	cmnvc	sp, #116, 10	; 0x1d000000
 788:	0000682e 	andeq	r6, r0, lr, lsr #16
 78c:	05000000 	streq	r0, [r0, #-0]
 790:	02050031 	andeq	r0, r5, #49	; 0x31
 794:	20000ba4 	andcs	r0, r0, r4, lsr #23
 798:	05011003 	streq	r1, [r1, #-3]
 79c:	29059f1a 	stmdbcs	r5, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
 7a0:	4a20053c 	bmi	801c98 <startup-0x1f7fe368>
 7a4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
 7a8:	29054b1a 	stmdbcs	r5, {r1, r3, r4, r8, r9, fp, lr}
 7ac:	4a20052e 	bmi	801c6c <startup-0x1f7fe394>
 7b0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
 7b4:	0e054b04 	vmlaeq.f64	d4, d5, d4
 7b8:	01040200 	mrseq	r0, R12_usr
 7bc:	3d0a053c 	cfstr32cc	mvfx0, [sl, #-240]	; 0xffffff10
 7c0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 7c4:	17052101 	strne	r2, [r5, -r1, lsl #2]
 7c8:	3d080576 	cfstr32cc	mvfx0, [r8, #-472]	; 0xfffffe28
 7cc:	2f2f0205 	svccs	0x002f0205
 7d0:	4b07052f 	blmi	1c1c94 <startup-0x1fe3e36c>
 7d4:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 7d8:	08055904 	stmdaeq	r5, {r2, r8, fp, ip, lr}
 7dc:	2e07053a 	mcrcs	5, 0, r0, cr7, cr10, {1}
 7e0:	05320205 	ldreq	r0, [r2, #-517]!	; 0xfffffdfb
 7e4:	03054b07 	movweq	r4, #23303	; 0x5b07
 7e8:	670e0521 	strvs	r0, [lr, -r1, lsr #10]
 7ec:	05560805 	ldrbeq	r0, [r6, #-2053]	; 0xfffff7fb
 7f0:	01053c07 	tsteq	r5, r7, lsl #24
 7f4:	a0140532 	andsge	r0, r4, r2, lsr r5
 7f8:	2f3d0905 	svccs	0x003d0905
 7fc:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 800:	03054b08 	movweq	r4, #23304	; 0x5b08
 804:	59180521 	ldmdbpl	r8, {r0, r5, r8, sl}
 808:	053a0905 	ldreq	r0, [sl, #-2309]!	; 0xfffff6fb
 80c:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
 810:	07057632 	smladxeq	r5, r2, r6, r7
 814:	2103054b 	tstcs	r3, fp, asr #10
 818:	05591805 	ldrbeq	r1, [r9, #-2053]	; 0xfffff7fb
 81c:	07053a08 	streq	r3, [r5, -r8, lsl #20]
 820:	3202052e 	andcc	r0, r2, #192937984	; 0xb800000
 824:	05780105 	ldrbeq	r0, [r8, #-261]!	; 0xfffffefb
 828:	0205ca10 	andeq	ip, r5, #16, 20	; 0x10000
 82c:	10052f2f 	andne	r2, r5, pc, lsr #30
 830:	2f020520 	svccs	0x00020520
 834:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 838:	15052f05 	strne	r2, [r5, #-3845]	; 0xfffff0fb
 83c:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 840:	2f01052f 	svccs	0x0001052f
 844:	05bc3205 	ldreq	r3, [ip, #517]!	; 0x205
 848:	11059f10 	tstne	r5, r0, lsl pc
 84c:	6706054b 	strvs	r0, [r6, -fp, asr #10]
 850:	4d2e0205 	sfmmi	f0, 4, [lr, #-20]!	; 0xffffffec
 854:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 858:	0a053c03 	beq	14f86c <startup-0x1feb0794>
 85c:	4a03053d 	bmi	c1d58 <startup-0x1ff3e2a8>
 860:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 864:	07052e03 	streq	r2, [r5, -r3, lsl #28]
 868:	6703053d 	smladxvs	r3, sp, r5, r0
 86c:	05f31305 	ldrbeq	r1, [r3, #773]!	; 0x305
 870:	0405580c 	streq	r5, [r5], #-2060	; 0xfffff7f4
 874:	21130566 	tstcs	r3, r6, ror #10
 878:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
 87c:	13055804 	movwne	r5, #22532	; 0x5804
 880:	3c0c0521 	cfstr32cc	mvfx0, [ip], {33}	; 0x21
 884:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
 888:	0c052113 	stfeqs	f2, [r5], {19}
 88c:	5804053c 	stmdapl	r4, {r2, r3, r4, r5, r8, sl}
 890:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 894:	059e0804 	ldreq	r0, [lr, #2052]	; 0x804
 898:	0f052116 	svceq	0x00052116
 89c:	5804053c 	stmdapl	r4, {r2, r3, r4, r5, r8, sl}
 8a0:	05260605 	streq	r0, [r6, #-1541]!	; 0xfffff9fb
 8a4:	05900805 	ldreq	r0, [r0, #2053]	; 0x805
 8a8:	11052116 	tstne	r5, r6, lsl r1
 8ac:	200f052e 	andcs	r0, pc, lr, lsr #10
 8b0:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
 8b4:	05ac0805 	streq	r0, [ip, #2053]!	; 0x805
 8b8:	11052116 	tstne	r5, r6, lsl r1
 8bc:	200f052e 	andcs	r0, pc, lr, lsr #10
 8c0:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 8c4:	12052e05 	andne	r2, r5, #5, 28	; 0x50
 8c8:	6704052f 	strvs	r0, [r4, -pc, lsr #10]
 8cc:	080a052f 	stmdaeq	sl, {r0, r1, r2, r3, r5, r8, sl}
 8d0:	2e0505a0 	cfsh32cs	mvfx0, mvfx5, #-48
 8d4:	052f1205 	streq	r1, [pc, #-517]!	; 6d7 <startup-0x1ffff929>
 8d8:	052f6704 	streq	r6, [pc, #-1796]!	; 1dc <startup-0x1ffffe24>
 8dc:	05a00815 	streq	r0, [r0, #2069]!	; 0x815
 8e0:	10054a05 	andne	r4, r5, r5, lsl #20
 8e4:	3d04052f 	cfstr32cc	mvfx0, [r4, #-188]	; 0xffffff44
 8e8:	211b052f 	tstcs	fp, pc, lsr #10
 8ec:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
 8f0:	04053d10 	streq	r3, [r5], #-3344	; 0xfffff2f0
 8f4:	3601053d 			; <UNDEFINED> instruction: 0x3601053d
 8f8:	60081105 	andvs	r1, r8, r5, lsl #2
 8fc:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 900:	11052f10 	tstne	r5, r0, lsl pc
 904:	7506054b 	strvc	r0, [r6, #-1355]	; 0xfffffab5
 908:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
 90c:	05754b14 	ldrbeq	r4, [r5, #-2836]!	; 0xfffff4ec
 910:	01056702 	tsteq	r5, r2, lsl #14
 914:	04027508 	streq	r7, [r2], #-1288	; 0xfffffaf8
 918:	3e010100 	adfccs	f0, f1, f0
 91c:	03000000 	movweq	r0, #0
 920:	00001d00 	andeq	r1, r0, r0, lsl #26
 924:	fb010200 	blx	4112e <startup-0x1ffbeed2>
 928:	01000d0e 	tsteq	r0, lr, lsl #26
 92c:	00010101 	andeq	r0, r1, r1, lsl #2
 930:	00010000 	andeq	r0, r1, r0
 934:	6d000100 	stfvss	f0, [r0, #-0]
 938:	2e687461 	cdpcs	4, 6, cr7, cr8, cr1, {3}
 93c:	00000063 	andeq	r0, r0, r3, rrx
 940:	11050000 	mrsne	r0, (UNDEF: 5)
 944:	60020500 	andvs	r0, r2, r0, lsl #10
 948:	16200010 			; <UNDEFINED> instruction: 0x16200010
 94c:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 950:	0c053d10 	stceq	13, cr3, [r5], {16}
 954:	2101053e 	tstcs	r1, lr, lsr r5
 958:	01000402 	tsteq	r0, r2, lsl #8
 95c:	00007401 	andeq	r7, r0, r1, lsl #8
 960:	20000300 	andcs	r0, r0, r0, lsl #6
 964:	02000000 	andeq	r0, r0, #0
 968:	0d0efb01 	vstreq	d15, [lr, #-4]
 96c:	01010100 	mrseq	r0, (UNDEF: 17)
 970:	00000001 	andeq	r0, r0, r1
 974:	01000001 	tsteq	r0, r1
 978:	61747300 	cmnvs	r4, r0, lsl #6
 97c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 980:	0000632e 	andeq	r6, r0, lr, lsr #6
 984:	05000000 	streq	r0, [r0, #-0]
 988:	0205000f 	andeq	r0, r5, #15
 98c:	20000000 	andcs	r0, r0, r0
 990:	13020517 	movwne	r0, #9495	; 0x2517
 994:	052f2121 	streq	r2, [pc, #-289]!	; 87b <startup-0x1ffff785>
 998:	03022101 	movweq	r2, #8449	; 0x2101
 99c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
 9a0:	02050031 	andeq	r0, r5, #49	; 0x31
 9a4:	2000107e 	andcs	r1, r0, lr, ror r0
 9a8:	05011003 	streq	r1, [r1, #-3]
 9ac:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 9b0:	33052101 	movwcc	r2, #20737	; 0x5101
 9b4:	21020523 	tstcs	r2, r3, lsr #10
 9b8:	21010513 	tstcs	r1, r3, lsl r5
 9bc:	05223c05 	streq	r3, [r2, #-3077]!	; 0xfffff3fb
 9c0:	05132102 	ldreq	r2, [r3, #-258]	; 0xfffffefe
 9c4:	3e052101 	adfccs	f2, f5, f1
 9c8:	21020523 	tstcs	r2, r3, lsr #10
 9cc:	21010513 	tstcs	r1, r3, lsl r5
 9d0:	01000102 	tsteq	r0, r2, lsl #2
 9d4:	00011201 	andeq	r1, r1, r1, lsl #4
 9d8:	2d000300 	stccs	3, cr0, [r0, #-0]
 9dc:	02000000 	andeq	r0, r0, #0
 9e0:	0d0efb01 	vstreq	d15, [lr, #-4]
 9e4:	01010100 	mrseq	r0, (UNDEF: 17)
 9e8:	00000001 	andeq	r0, r0, r1
 9ec:	01000001 	tsteq	r0, r1
 9f0:	73797300 	cmnvc	r9, #0, 6
 9f4:	6b636974 	blvs	18dafcc <startup-0x1e725034>
 9f8:	0000632e 	andeq	r6, r0, lr, lsr #6
 9fc:	74730000 	ldrbtvc	r0, [r3], #-0
 a00:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 a04:	00682e70 	rsbeq	r2, r8, r0, ror lr
 a08:	00000000 	andeq	r0, r0, r0
 a0c:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
 a10:	00109802 	andseq	r9, r0, r2, lsl #16
 a14:	010f0320 	tsteq	pc, r0, lsr #6
 a18:	052f0f05 	streq	r0, [pc, #-3845]!	; fffffb1b <winning_score+0xdfffe7b7>
 a1c:	0c053d02 	stceq	13, cr3, [r5], {2}
 a20:	2f020520 	svccs	0x00020520
 a24:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 a28:	0c052f02 	stceq	15, cr2, [r5], {2}
 a2c:	2f010520 	svccs	0x00010520
 a30:	05bc1d05 	ldreq	r1, [ip, #3333]!	; 0xd05
 a34:	02054b0e 	andeq	r4, r5, #14336	; 0x3800
 a38:	2f01053d 	svccs	0x0001053d
 a3c:	05761b05 	ldrbeq	r1, [r6, #-2821]!	; 0xfffff4fb
 a40:	0c053002 	stceq	0, cr3, [r5], {2}
 a44:	2f1b0520 	svccs	0x001b0520
 a48:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
 a4c:	04052f11 	streq	r2, [r5], #-3857	; 0xfffff0ef
 a50:	2f03052e 	svccs	0x0003052e
 a54:	05320105 	ldreq	r0, [r2, #-261]!	; 0xfffffefb
 a58:	01051e10 	tsteq	r5, r0, lsl lr
 a5c:	a020053e 	eorge	r0, r0, lr, lsr r5
 a60:	053f0a05 	ldreq	r0, [pc, #-2565]!	; 63 <startup-0x1fffff9d>
 a64:	0b056707 	bleq	15a688 <startup-0x1fea5978>
 a68:	2e040567 	cfsh32cs	mvfx0, mvfx4, #55
 a6c:	052f0905 	streq	r0, [pc, #-2309]!	; 16f <startup-0x1ffffe91>
 a70:	05673d0a 	strbeq	r3, [r7, #-3338]!	; 0xfffff2f6
 a74:	0d052f03 	stceq	15, cr2, [r5, #-12]
 a78:	58040576 	stmdapl	r4, {r1, r2, r4, r5, r6, r8, sl}
 a7c:	052f0e05 	streq	r0, [pc, #-3589]!	; fffffc7f <winning_score+0xdfffe91b>
 a80:	01053d0c 	tsteq	r5, ip, lsl #26
 a84:	e6160568 	ldr	r0, [r6], -r8, ror #10
 a88:	052f0905 	streq	r0, [pc, #-2309]!	; 18b <startup-0x1ffffe75>
 a8c:	13052f01 	movwne	r2, #24321	; 0x5f01
 a90:	2f080568 	svccs	0x00080568
 a94:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 a98:	02053e0b 	andeq	r3, r5, #11, 28	; 0xb0
 a9c:	20210567 	eorcs	r0, r1, r7, ror #10
 aa0:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
 aa4:	0b057602 	bleq	15e2b4 <startup-0x1fea1d4c>
 aa8:	2f020520 	svccs	0x00020520
 aac:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 ab0:	0b052f0c 	bleq	14c6e8 <startup-0x1feb3918>
 ab4:	67010567 	strvs	r0, [r1, -r7, ror #10]
 ab8:	22081f05 	andcs	r1, r8, #5, 30
 abc:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 ac0:	02054b10 	andeq	r4, r5, #16, 22	; 0x4000
 ac4:	200b0582 	andcs	r0, fp, r2, lsl #11
 ac8:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 acc:	0c05200b 	stceq	0, cr2, [r5], {11}
 ad0:	670b052f 	strvs	r0, [fp, -pc, lsr #10]
 ad4:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 ad8:	0305af1c 	movweq	sl, #24348	; 0x5f1c
 adc:	2022052f 	eorcs	r0, r2, pc, lsr #10
 ae0:	052f1005 	streq	r1, [pc, #-5]!	; ae3 <startup-0x1ffff51d>
 ae4:	0a023d01 	beq	8fef0 <startup-0x1ff70110>
 ae8:	Address 0x00000ae8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20373143 	eorscs	r3, r7, r3, asr #2
   8:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
   c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  10:	30313230 	eorscc	r3, r1, r0, lsr r2
  14:	20343238 	eorscs	r3, r4, r8, lsr r2
  18:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  1c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  20:	6d2d2029 	stcvs	0, cr2, [sp, #-164]!	; 0xffffff5c
  24:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  28:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  2c:	752d6f6e 	strvc	r6, [sp, #-3950]!	; 0xfffff092
  30:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
  34:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  38:	6363612d 	cmnvs	r3, #1073741835	; 0x4000000b
  3c:	20737365 	rsbscs	r7, r3, r5, ror #6
  40:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  44:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  48:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  4c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  64:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  68:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  6c:	31756e67 	cmncc	r5, r7, ror #28
  70:	64610037 	strbtvs	r0, [r1], #-55	; 0xffffffc9
  74:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
  78:	63736100 	cmnvs	r3, #0, 2
  7c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  80:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  84:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
  88:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
  8c:	63736100 	cmnvs	r3, #0, 2
  90:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
  94:	0074696e 	rsbseq	r6, r4, lr, ror #18
  98:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  9c:	6f675f69 	svcvs	0x00675f69
  a0:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  a4:	63736100 	cmnvs	r3, #0, 2
  a8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  ac:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  b0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
  b4:	736e7500 	cmnvc	lr, #0, 10
  b8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  bc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  c0:	61007261 	tstvs	r0, r1, ror #4
  c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  c8:	6165725f 	cmnvs	r5, pc, asr r2
  cc:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  d0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
  d4:	6f687300 	svcvs	0x00687300
  d8:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  dc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e0:	2064656e 	rsbcs	r6, r4, lr, ror #10
  e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
  e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  ec:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  f0:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
  f4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  f8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  fc:	73610072 	cmnvc	r1, #114	; 0x72
 100:	5f696963 	svcpl	0x00696963
 104:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 108:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 10c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 110:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 114:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 118:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 11c:	6f6d0065 	svcvs	0x006d0065
 120:	5f726564 	svcpl	0x00726564
 124:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0xfffffe8d
 128:	63736100 	cmnvs	r3, #0, 2
 12c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 130:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 134:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 138:	73610061 	cmnvc	r1, #97	; 0x61
 13c:	5f696963 	svcpl	0x00696963
 140:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 144:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 148:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 14c:	61007261 	tstvs	r0, r1, ror #4
 150:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 154:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 158:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 15c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 160:	746f006e 	strbtvc	r0, [pc], #-110	; 168 <startup-0x1ffffe98>
 164:	72657079 	rsbvc	r7, r5, #121	; 0x79
 168:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 16c:	73610065 	cmnvc	r1, #101	; 0x65
 170:	5f696963 	svcpl	0x00696963
 174:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 178:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 17c:	73610061 	cmnvc	r1, #97	; 0x61
 180:	5f696963 	svcpl	0x00696963
 184:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 188:	00646e61 	rsbeq	r6, r4, r1, ror #28
 18c:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 190:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 194:	7361635c 	cmnvc	r1, #92, 6	; 0x70000001
 198:	445c6168 	ldrbmi	r6, [ip], #-360	; 0xfffffe98
 19c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1a0:	73746e65 	cmnvc	r4, #1616	; 0x650
 1a4:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
 1a8:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
 1ac:	73696467 	cmnvc	r9, #1728053248	; 0x67000000
 1b0:	6f6f5070 	svcvs	0x006f5070
 1b4:	675c676e 	ldrbvs	r6, [ip, -lr, ror #14]
 1b8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 1bc:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 1c0:	63736100 	cmnvs	r3, #0, 2
 1c4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1cc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1d0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8 <startup-0x1ffffff8>
 1d4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1dc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1e0:	5f657469 	svcpl	0x00657469
 1e4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e8:	63736100 	cmnvs	r3, #0, 2
 1ec:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 1f0:	45475000 	strbmi	r5, [r7, #-0]
 1f4:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 1f8:	6d005952 	vstrvs.16	s10, [r0, #-164]	; 0xffffff5c	; <UNPREDICTABLE>
 1fc:	5f65766f 	svcpl	0x0065766f
 200:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 204:	626f656c 	rsbvs	r6, pc, #108, 10	; 0x1b000000
 208:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 20c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 210:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
 214:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
 218:	00797269 	rsbseq	r7, r9, r9, ror #4
 21c:	5f746573 	svcpl	0x00746573
 220:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 224:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 228:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 22c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 230:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 234:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 238:	70006465 	andvc	r6, r0, r5, ror #8
 23c:	0078736f 	rsbseq	r7, r8, pc, ror #6
 240:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 244:	6c616200 	sfmvs	f6, 2, [r1], #-0
 248:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 24c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 250:	70007972 	andvc	r7, r0, r2, ror r9
 254:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 258:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
 25c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 260:	63007972 	movwvs	r7, #2418	; 0x972
 264:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 268:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 26c:	6a626f6c 	bvs	189c024 <startup-0x1e763fdc>
 270:	00746365 	rsbseq	r6, r4, r5, ror #6
 274:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 278:	73007964 	movwvc	r7, #2404	; 0x964
 27c:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 280:	7a697300 	bvc	1a5ce88 <startup-0x1e5a3178>
 284:	63007965 	movwvs	r7, #2405	; 0x965
 288:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
 28c:	61705f65 	cmnvs	r0, r5, ror #30
 290:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 294:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 298:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 29c:	00776172 	rsbseq	r6, r7, r2, ror r1
 2a0:	61657263 	cmnvs	r5, r3, ror #4
 2a4:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
 2a8:	6f6c6c61 	svcvs	0x006c6c61
 2ac:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b0:	4f740074 	svcmi	0x00740074
 2b4:	6e006a62 	vmlsvs.f32	s12, s0, s5
 2b8:	6f706d75 	svcvs	0x00706d75
 2bc:	73746e69 	cmnvc	r4, #1680	; 0x690
 2c0:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 2c4:	61625f65 	cmnvs	r2, r5, ror #30
 2c8:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 2cc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2d0:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 2d4:	00786465 	rsbseq	r6, r8, r5, ror #8
 2d8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2dc:	70646e61 	rsbvc	r6, r4, r1, ror #28
 2e0:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 2e4:	00632e65 	rsbeq	r2, r3, r5, ror #28
 2e8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2ec:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 2f0:	6a626f6c 	bvs	189c0a8 <startup-0x1e763f58>
 2f4:	00746365 	rsbseq	r6, r4, r5, ror #6
 2f8:	72617355 	rsbvc	r7, r1, #1409286145	; 0x54000001
 2fc:	755f0074 	ldrbvc	r0, [pc, #-116]	; 290 <startup-0x1ffffd70>
 300:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 304:	64003064 	strvs	r3, [r0], #-100	; 0xffffff9c
 308:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
 30c:	5f00632e 	svcpl	0x0000632e
 310:	73756e75 	cmnvc	r5, #1872	; 0x750
 314:	00316465 	eorseq	r6, r1, r5, ror #8
 318:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 31c:	32646573 	rsbcc	r6, r4, #482344960	; 0x1cc00000
 320:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 324:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 328:	755f0033 	ldrbvc	r0, [pc, #-51]	; 2fd <startup-0x1ffffd03>
 32c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 330:	5f003464 	svcpl	0x00003464
 334:	73756e75 	cmnvc	r5, #1872	; 0x750
 338:	00356465 	eorseq	r6, r5, r5, ror #8
 33c:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
 340:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 344:	7000746e 	andvc	r7, r0, lr, ror #8
 348:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 34c:	6168635f 	cmnvs	r8, pc, asr r3
 350:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 354:	5f79616c 	svcpl	0x0079616c
 358:	696c696d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
 35c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 360:	315f7961 	cmpcc	pc, r1, ror #18
 364:	736e3532 	cmnvc	lr, #209715200	; 0xc800000
 368:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 36c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 370:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 374:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 378:	736e3035 	cmnvc	lr, #53	; 0x35
 37c:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 380:	73790074 	cmnvc	r9, #116	; 0x74
 384:	00706574 	rsbseq	r6, r0, r4, ror r5
 388:	594c4f50 	stmdbpl	ip, {r4, r6, r8, r9, sl, fp, lr}^
 38c:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 390:	6c700054 	ldclvs	0, cr0, [r0], #-336	; 0xfffffeb0
 394:	705f746f 	subsvc	r7, pc, pc, ror #8
 398:	67796c6f 	ldrbvs	r6, [r9, -pc, ror #24]!
 39c:	64006e6f 	strvs	r6, [r0], #-3695	; 0xfffff191
 3a0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 3a4:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
 3a8:	00656e69 	rsbeq	r6, r5, r9, ror #28
 3ac:	706d6574 	rsbvc	r6, sp, r4, ror r5
 3b0:	72726500 	rsbsvc	r6, r2, #0, 10
 3b4:	6400726f 	strvs	r7, [r0], #-623	; 0xfffffd91
 3b8:	61746c65 	cmnvs	r4, r5, ror #24
 3bc:	72640079 	rsbvc	r0, r4, #121	; 0x79
 3c0:	6c5f7761 	mrrcvs	7, 6, r7, pc, cr1	; <UNPREDICTABLE>
 3c4:	5f656e69 	svcpl	0x00656e69
 3c8:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 238 <startup-0x1ffffdc8>
 3cc:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 3d0:	0073746e 	rsbseq	r7, r3, lr, ror #8
 3d4:	796c6f70 	stmdbvc	ip!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 3d8:	316e6f67 	cmncc	lr, r7, ror #30
 3dc:	4e494c00 	cdpmi	12, 4, cr4, cr9, cr0, {0}
 3e0:	74730045 	ldrbtvc	r0, [r3], #-69	; 0xffffffbb
 3e4:	00706565 	rsbseq	r6, r0, r5, ror #10
 3e8:	746f6c70 	strbtvc	r6, [pc], #-3184	; 3f0 <startup-0x1ffffc10>
 3ec:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
 3f0:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 3f4:	7861746c 	stmdavc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
 3f8:	43455200 	movtmi	r5, #20992	; 0x5200
 3fc:	6f700054 	svcvs	0x00700054
 400:	6f67796c 	svcvs	0x0067796c
 404:	696f706e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 408:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 40c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 410:	74497961 	strbvc	r7, [r9], #-2401	; 0xfffff69f
 414:	2e736d65 	cdpcs	13, 7, cr6, cr3, cr5, {3}
 418:	63610063 	cmnvs	r1, #99	; 0x63
 41c:	61766974 	cmnvs	r6, r4, ror r9
 420:	6f526574 	svcvs	0x00526574
 424:	65720077 	ldrbvs	r0, [r2, #-119]!	; 0xffffff89
 428:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 42c:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
 430:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
 434:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 438:	61657200 	cmnvs	r5, r0, lsl #4
 43c:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 2b4 <startup-0x1ffffd4c>
 440:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 444:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 448:	6300632e 	movwvs	r6, #814	; 0x32e
 44c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 450:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 454:	654b7469 	strbvs	r7, [fp, #-1129]	; 0xfffffb97
 458:	6f006279 	svcvs	0x00006279
 45c:	73377475 	teqvc	r7, #1962934272	; 0x75000000
 460:	6f006765 	svcvs	0x00006765
 464:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 468:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
 46c:	7300656c 	movwvc	r6, #1388	; 0x56c
 470:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 474:	6f705f67 	svcvs	0x00705f67
 478:	73746e69 	cmnvc	r4, #1680	; 0x690
 47c:	616c705f 	qdsubvs	r7, pc, ip	; <UNPREDICTABLE>
 480:	32726579 	rsbscc	r6, r2, #507510784	; 0x1e400000
 484:	6a626f00 	bvs	189c08c <startup-0x1e763f74>
 488:	31746365 	cmncc	r4, r5, ror #6
 48c:	6a626f00 	bvs	189c094 <startup-0x1e763f6c>
 490:	32746365 	rsbscc	r6, r4, #-1811939327	; 0x94000001
 494:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
 498:	47656c67 	strbmi	r6, [r5, -r7, ror #24]!
 49c:	00656d61 	rsbeq	r6, r5, r1, ror #26
 4a0:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 4a4:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 4a8:	5f72656e 	svcpl	0x0072656e
 4ac:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 4b0:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 4b4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 4b8:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 4bc:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 4c0:	6f725f67 	svcvs	0x00725f67
 4c4:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
 4c8:	616d0065 	cmnvs	sp, r5, rrx
 4cc:	70006e69 	andvc	r6, r0, r9, ror #28
 4d0:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 4d4:	77003265 	strvc	r3, [r0, -r5, ror #4]
 4d8:	696e6e69 	stmdbvs	lr!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 4dc:	735f676e 	cmpvc	pc, #28835840	; 0x1b80000
 4e0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 4e4:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 4ec <startup-0x1ffffb14>
 4e8:	6973696c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 4ec:	6d006e6f 	stcvs	14, cr6, [r0, #-444]	; 0xfffffe44
 4f0:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 4f4:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
 4f8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 4fc:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 500:	5f73746e 	svcpl	0x0073746e
 504:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 508:	00317265 	eorseq	r7, r1, r5, ror #4
 50c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 510:	0031656c 	eorseq	r6, r1, ip, ror #10
 514:	4a424f50 	bmi	109425c <startup-0x1ef6bda4>
 518:	00544345 	subseq	r4, r4, r5, asr #6
 51c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 520:	63735f74 	cmnvs	r3, #116, 30	; 0x1d0
 524:	7365726f 	cmnvc	r5, #-268435450	; 0xf0000006
 528:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xfffff300
 52c:	00632e68 	rsbeq	r2, r3, r8, ror #28
 530:	70617267 	rsbvc	r7, r1, r7, ror #4
 534:	5f636968 	svcpl	0x00636968
 538:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 53c:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
 540:	00726165 	rsbseq	r6, r2, r5, ror #2
 544:	70617267 	rsbvc	r7, r1, r7, ror #4
 548:	5f636968 	svcpl	0x00636968
 54c:	61656c63 	cmnvs	r5, r3, ror #24
 550:	63735f72 	cmnvs	r3, #456	; 0x1c8
 554:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 558:	61726700 	cmnvs	r2, r0, lsl #14
 55c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 560:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 564:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 568:	00657a69 	rsbeq	r7, r5, r9, ror #20
 56c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 570:	00707574 	rsbseq	r7, r0, r4, ror r5
 574:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 578:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 57c:	72670063 	rsbvc	r0, r7, #99	; 0x63
 580:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 584:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 588:	5f6c6578 	svcpl	0x006c6578
 58c:	00746573 	rsbseq	r6, r4, r3, ror r5
 590:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 594:	695f3672 	ldmdbvs	pc, {r1, r4, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
 598:	0074696e 	rsbseq	r6, r4, lr, ror #18
 59c:	6b636974 	blvs	18dab74 <startup-0x1e72548c>
 5a0:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 5a4:	3672656d 	ldrbtcc	r6, [r2], -sp, ror #10
 5a8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 5ac:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 5b0:	685f7470 	ldmdavs	pc, {r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 5b4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 5b8:	45007265 	strmi	r7, [r0, #-613]	; 0xfffffd9b
 5bc:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 5c0:	6d450031 	stclvs	0, cr0, [r5, #-196]	; 0xffffff3c
 5c4:	32797470 	rsbscc	r7, r9, #112, 8	; 0x70000000
 5c8:	706d4500 	rsbvc	r4, sp, r0, lsl #10
 5cc:	00337974 	eorseq	r7, r3, r4, ror r9
 5d0:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
 5d4:	73003479 	movwvc	r3, #1145	; 0x479
 5d8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 5dc:	65735f67 	ldrbvs	r5, [r3, #-3943]!	; 0xfffff099
 5e0:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
 5e4:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 5e8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 5ec:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 5f0:	685f6b63 	ldmdavs	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 5f4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 5f8:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
 5fc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 600:	756f635f 	strbvc	r6, [pc, #-863]!	; 2a9 <startup-0x1ffffd57>
 604:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 608:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 60c:	696d315f 	stmdbvs	sp!, {r0, r1, r2, r3, r4, r6, r8, ip, sp}^
 610:	5f6f7263 	svcpl	0x006f7263
 614:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 618:	006b6369 	rsbeq	r6, fp, r9, ror #6
 61c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 620:	5f6b6369 	svcpl	0x006b6369
 624:	5f717269 	svcpl	0x00717269
 628:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 62c:	0072656c 	rsbseq	r6, r2, ip, ror #10
 630:	5f676174 	svcpl	0x00676174
 634:	006d6974 	rsbeq	r6, sp, r4, ror r9
 638:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 63c:	745f3233 	ldrbvc	r3, [pc], #-563	; 644 <startup-0x1ffff9bc>
 640:	73797300 	cmnvc	r9, #0, 6
 644:	6b636974 	blvs	18dac1c <startup-0x1e7253e4>
 648:	616c665f 	cmnvs	ip, pc, asr r6
 64c:	49440067 	stmdbmi	r4, {r0, r1, r2, r5, r6}^
 650:	74005245 	strvc	r5, [r0], #-581	; 0xfffffdbb
 654:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 658:	74735f36 	ldrbtvc	r5, [r3], #-3894	; 0xfffff0ca
 65c:	00747261 	rsbseq	r7, r4, r1, ror #4
 660:	5f746567 	svcpl	0x00746567
 664:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 668:	6c665f72 	stclvs	15, cr5, [r6], #-456	; 0xfffffe38
 66c:	69006761 	stmdbvs	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
 670:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 674:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
 678:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 67c:	73007961 	movwvc	r7, #2401	; 0x961
 680:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
 684:	632e6b63 			; <UNDEFINED> instruction: 0x632e6b63
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000048 	andcs	r0, r0, r8, asr #32
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000090 	mulcs	r0, r0, r0
  5c:	00000034 	andeq	r0, r0, r4, lsr r0
  60:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  64:	41018e02 	tstmi	r1, r2, lsl #28
  68:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  6c:	00000007 	andeq	r0, r0, r7
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000c4 	andcs	r0, r0, r4, asr #1
  7c:	00000040 	andeq	r0, r0, r0, asr #32
  80:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  84:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000104 	andcs	r0, r0, r4, lsl #2
  9c:	0000004c 	andeq	r0, r0, ip, asr #32
  a0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000150 	andcs	r0, r0, r0, asr r1
  bc:	00000034 	andeq	r0, r0, r4, lsr r0
  c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c4:	41018e02 	tstmi	r1, r2, lsl #28
  c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  cc:	00000007 	andeq	r0, r0, r7
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000184 	andcs	r0, r0, r4, lsl #3
  dc:	0000002a 	andeq	r0, r0, sl, lsr #32
  e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e4:	41018e02 	tstmi	r1, r2, lsl #28
  e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  ec:	00000007 	andeq	r0, r0, r7
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200001ae 	andcs	r0, r0, lr, lsr #3
  fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 100:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 104:	41018e02 	tstmi	r1, r2, lsl #28
 108:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 10c:	00000007 	andeq	r0, r0, r7
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200001d8 	ldrdcs	r0, [r0], -r8
 11c:	00000036 	andeq	r0, r0, r6, lsr r0
 120:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 124:	41018e02 	tstmi	r1, r2, lsl #28
 128:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 12c:	00000007 	andeq	r0, r0, r7
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	2000020e 	andcs	r0, r0, lr, lsl #4
 13c:	00000036 	andeq	r0, r0, r6, lsr r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	00000018 	andeq	r0, r0, r8, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000244 	andcs	r0, r0, r4, asr #4
 15c:	00000022 	andeq	r0, r0, r2, lsr #32
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0000070d 	andeq	r0, r0, sp, lsl #14
 16c:	00000018 	andeq	r0, r0, r8, lsl r0
 170:	00000000 	andeq	r0, r0, r0
 174:	20000266 	andcs	r0, r0, r6, ror #4
 178:	00000010 	andeq	r0, r0, r0, lsl r0
 17c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 180:	41018e02 	tstmi	r1, r2, lsl #28
 184:	0000070d 	andeq	r0, r0, sp, lsl #14
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	20000276 	andcs	r0, r0, r6, ror r2
 194:	00000038 	andeq	r0, r0, r8, lsr r0
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	200002ae 	andcs	r0, r0, lr, lsr #5
 1b4:	0000007e 	andeq	r0, r0, lr, ror r0
 1b8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1c0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	0000000c 	andeq	r0, r0, ip
 1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000001c8 	andeq	r0, r0, r8, asr #3
 1e0:	2000032c 	andcs	r0, r0, ip, lsr #6
 1e4:	00000060 	andeq	r0, r0, r0, rrx
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000001c8 	andeq	r0, r0, r8, asr #3
 200:	2000038c 	andcs	r0, r0, ip, lsl #7
 204:	00000060 	andeq	r0, r0, r0, rrx
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000001c8 	andeq	r0, r0, r8, asr #3
 220:	200003ec 	andcs	r0, r0, ip, ror #7
 224:	00000084 	andeq	r0, r0, r4, lsl #1
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	000001c8 	andeq	r0, r0, r8, asr #3
 240:	20000470 	andcs	r0, r0, r0, ror r4
 244:	00000056 	andeq	r0, r0, r6, asr r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	000001c8 	andeq	r0, r0, r8, asr #3
 260:	200004c6 	andcs	r0, r0, r6, asr #9
 264:	00000020 	andeq	r0, r0, r0, lsr #32
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	000001c8 	andeq	r0, r0, r8, asr #3
 280:	200004e6 	andcs	r0, r0, r6, ror #9
 284:	00000072 	andeq	r0, r0, r2, ror r0
 288:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 28c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 290:	480e4101 	stmdami	lr, {r0, r8, lr}
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	000001c8 	andeq	r0, r0, r8, asr #3
 2a0:	20000558 	andcs	r0, r0, r8, asr r5
 2a4:	00000070 	andeq	r0, r0, r0, ror r0
 2a8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2b0:	480e4101 	stmdami	lr, {r0, r8, lr}
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2d0:	200005c8 	andcs	r0, r0, r8, asr #11
 2d4:	00000040 	andeq	r0, r0, r0, asr #32
 2d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2dc:	41018e02 	tstmi	r1, r2, lsl #28
 2e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e4:	00000007 	andeq	r0, r0, r7
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2f0:	20000608 	andcs	r0, r0, r8, lsl #12
 2f4:	0000002a 	andeq	r0, r0, sl, lsr #32
 2f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2fc:	41018e02 	tstmi	r1, r2, lsl #28
 300:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 304:	00000007 	andeq	r0, r0, r7
 308:	0000000c 	andeq	r0, r0, ip
 30c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 310:	7c020001 	stcvc	0, cr0, [r2], {1}
 314:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000308 	andeq	r0, r0, r8, lsl #6
 320:	20000634 	andcs	r0, r0, r4, lsr r6
 324:	00000036 	andeq	r0, r0, r6, lsr r0
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	00000018 	andeq	r0, r0, r8, lsl r0
 33c:	00000308 	andeq	r0, r0, r8, lsl #6
 340:	2000066a 	andcs	r0, r0, sl, ror #12
 344:	00000012 	andeq	r0, r0, r2, lsl r0
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0000070d 	andeq	r0, r0, sp, lsl #14
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	00000308 	andeq	r0, r0, r8, lsl #6
 35c:	2000067c 	andcs	r0, r0, ip, ror r6
 360:	00000044 	andeq	r0, r0, r4, asr #32
 364:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 368:	41018e02 	tstmi	r1, r2, lsl #28
 36c:	0000070d 	andeq	r0, r0, sp, lsl #14
 370:	0000000c 	andeq	r0, r0, ip
 374:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 378:	7c020001 	stcvc	0, cr0, [r2], {1}
 37c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	00000370 	andeq	r0, r0, r0, ror r3
 388:	200006c0 	andcs	r0, r0, r0, asr #13
 38c:	00000114 	andeq	r0, r0, r4, lsl r1
 390:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 394:	41018e02 	tstmi	r1, r2, lsl #28
 398:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 39c:	00000007 	andeq	r0, r0, r7
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000370 	andeq	r0, r0, r0, ror r3
 3a8:	200007d4 	ldrdcs	r0, [r0], -r4
 3ac:	00000048 	andeq	r0, r0, r8, asr #32
 3b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b4:	41018e02 	tstmi	r1, r2, lsl #28
 3b8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 3bc:	00000007 	andeq	r0, r0, r7
 3c0:	00000020 	andeq	r0, r0, r0, lsr #32
 3c4:	00000370 	andeq	r0, r0, r0, ror r3
 3c8:	2000081c 	andcs	r0, r0, ip, lsl r8
 3cc:	00000136 	andeq	r0, r0, r6, lsr r1
 3d0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 3d4:	86048505 	strhi	r8, [r4], -r5, lsl #10
 3d8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3dc:	300e4101 	andcc	r4, lr, r1, lsl #2
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	00000020 	andeq	r0, r0, r0, lsr #32
 3e8:	00000370 	andeq	r0, r0, r0, ror r3
 3ec:	20000952 	andcs	r0, r0, r2, asr r9
 3f0:	00000080 	andeq	r0, r0, r0, lsl #1
 3f4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 3f8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 3fc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 400:	300e4101 	andcc	r4, lr, r1, lsl #2
 404:	00070d41 	andeq	r0, r7, r1, asr #26
 408:	0000000c 	andeq	r0, r0, ip
 40c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 410:	7c020001 	stcvc	0, cr0, [r2], {1}
 414:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	00000408 	andeq	r0, r0, r8, lsl #8
 420:	200009d4 	ldrdcs	r0, [r0], -r4
 424:	00000064 	andeq	r0, r0, r4, rrx
 428:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 42c:	41018e02 	tstmi	r1, r2, lsl #28
 430:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 434:	00000007 	andeq	r0, r0, r7
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	00000408 	andeq	r0, r0, r8, lsl #8
 440:	20000a38 	andcs	r0, r0, r8, lsr sl
 444:	00000064 	andeq	r0, r0, r4, rrx
 448:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 44c:	41018e02 	tstmi	r1, r2, lsl #28
 450:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 454:	00000007 	andeq	r0, r0, r7
 458:	00000018 	andeq	r0, r0, r8, lsl r0
 45c:	00000408 	andeq	r0, r0, r8, lsl #8
 460:	20000a9c 	mulcs	r0, ip, sl
 464:	00000044 	andeq	r0, r0, r4, asr #32
 468:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 46c:	41018e02 	tstmi	r1, r2, lsl #28
 470:	0000070d 	andeq	r0, r0, sp, lsl #14
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	00000408 	andeq	r0, r0, r8, lsl #8
 47c:	20000ae0 	andcs	r0, r0, r0, ror #21
 480:	0000007c 	andeq	r0, r0, ip, ror r0
 484:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 488:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 48c:	300e4101 	andcc	r4, lr, r1, lsl #2
 490:	00070d41 	andeq	r0, r7, r1, asr #26
 494:	00000020 	andeq	r0, r0, r0, lsr #32
 498:	00000408 	andeq	r0, r0, r8, lsl #8
 49c:	20000b5c 	andcs	r0, r0, ip, asr fp
 4a0:	00000048 	andeq	r0, r0, r8, asr #32
 4a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 4a8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 4ac:	41018e02 	tstmi	r1, r2, lsl #28
 4b0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 4b4:	00000007 	andeq	r0, r0, r7
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4c8:	00000020 	andeq	r0, r0, r0, lsr #32
 4cc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4d0:	20000ba4 	andcs	r0, r0, r4, lsr #23
 4d4:	00000062 	andeq	r0, r0, r2, rrx
 4d8:	41100e41 	tstmi	r0, r1, asr #28
 4dc:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 4e0:	06870785 	streq	r0, [r7], r5, lsl #15
 4e4:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 4e8:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4f4:	20000c06 	andcs	r0, r0, r6, lsl #24
 4f8:	00000072 	andeq	r0, r0, r2, ror r0
 4fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 500:	41018e02 	tstmi	r1, r2, lsl #28
 504:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 508:	00000007 	andeq	r0, r0, r7
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 514:	20000c78 	andcs	r0, r0, r8, ror ip
 518:	00000088 	andeq	r0, r0, r8, lsl #1
 51c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 520:	41018e02 	tstmi	r1, r2, lsl #28
 524:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 528:	00000007 	andeq	r0, r0, r7
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 534:	20000d00 	andcs	r0, r0, r0, lsl #26
 538:	0000003c 	andeq	r0, r0, ip, lsr r0
 53c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 540:	41018e02 	tstmi	r1, r2, lsl #28
 544:	0000070d 	andeq	r0, r0, sp, lsl #14
 548:	00000024 	andeq	r0, r0, r4, lsr #32
 54c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 550:	20000d3c 	andcs	r0, r0, ip, lsr sp
 554:	000002a4 	andeq	r0, r0, r4, lsr #5
 558:	41100e41 	tstmi	r0, r1, asr #28
 55c:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 560:	06870785 	streq	r0, [r7], r5, lsl #15
 564:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 568:	0c410180 	stfeqe	f0, [r1], {128}	; 0x80
 56c:	00004807 	andeq	r4, r0, r7, lsl #16
 570:	00000020 	andeq	r0, r0, r0, lsr #32
 574:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 578:	20000fe0 	andcs	r0, r0, r0, ror #31
 57c:	00000080 	andeq	r0, r0, r0, lsl #1
 580:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 584:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 588:	41018e02 	tstmi	r1, r2, lsl #28
 58c:	4101b80e 	tstmi	r1, lr, lsl #16
 590:	0180070c 	orreq	r0, r0, ip, lsl #14
 594:	0000000c 	andeq	r0, r0, ip
 598:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 59c:	7c020001 	stcvc	0, cr0, [r2], {1}
 5a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	00000594 	muleq	r0, r4, r5
 5ac:	20001060 	andcs	r1, r0, r0, rrx
 5b0:	0000001e 	andeq	r0, r0, lr, lsl r0
 5b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5b8:	41018e02 	tstmi	r1, r2, lsl #28
 5bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5c0:	00000007 	andeq	r0, r0, r7
 5c4:	0000000c 	andeq	r0, r0, ip
 5c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 5d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5d4:	0000000c 	andeq	r0, r0, ip
 5d8:	000005c4 	andeq	r0, r0, r4, asr #11
 5dc:	20000000 	andcs	r0, r0, r0
 5e0:	0000000c 	andeq	r0, r0, ip
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	000005c4 	andeq	r0, r0, r4, asr #11
 5ec:	2000107e 	andcs	r1, r0, lr, ror r0
 5f0:	00000006 	andeq	r0, r0, r6
 5f4:	0000000c 	andeq	r0, r0, ip
 5f8:	000005c4 	andeq	r0, r0, r4, asr #11
 5fc:	20001084 	andcs	r1, r0, r4, lsl #1
 600:	00000006 	andeq	r0, r0, r6
 604:	0000000c 	andeq	r0, r0, ip
 608:	000005c4 	andeq	r0, r0, r4, asr #11
 60c:	2000108a 	andcs	r1, r0, sl, lsl #1
 610:	00000006 	andeq	r0, r0, r6
 614:	0000000c 	andeq	r0, r0, ip
 618:	000005c4 	andeq	r0, r0, r4, asr #11
 61c:	20001090 	mulcs	r0, r0, r0
 620:	00000006 	andeq	r0, r0, r6
 624:	0000000c 	andeq	r0, r0, ip
 628:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 62c:	7c020001 	stcvc	0, cr0, [r2], {1}
 630:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 634:	00000018 	andeq	r0, r0, r8, lsl r0
 638:	00000624 	andeq	r0, r0, r4, lsr #12
 63c:	20001098 	mulcs	r0, r8, r0
 640:	00000034 	andeq	r0, r0, r4, lsr r0
 644:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 648:	41018e02 	tstmi	r1, r2, lsl #28
 64c:	0000070d 	andeq	r0, r0, sp, lsl #14
 650:	0000001c 	andeq	r0, r0, ip, lsl r0
 654:	00000624 	andeq	r0, r0, r4, lsr #12
 658:	200010cc 	andcs	r1, r0, ip, asr #1
 65c:	00000020 	andeq	r0, r0, r0, lsr #32
 660:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 664:	41018e02 	tstmi	r1, r2, lsl #28
 668:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 66c:	00000007 	andeq	r0, r0, r7
 670:	00000018 	andeq	r0, r0, r8, lsl r0
 674:	00000624 	andeq	r0, r0, r4, lsr #12
 678:	200010ec 	andcs	r1, r0, ip, ror #1
 67c:	0000003c 	andeq	r0, r0, ip, lsr r0
 680:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 684:	41018e02 	tstmi	r1, r2, lsl #28
 688:	0000070d 	andeq	r0, r0, sp, lsl #14
 68c:	0000001c 	andeq	r0, r0, ip, lsl r0
 690:	00000624 	andeq	r0, r0, r4, lsr #12
 694:	20001128 	andcs	r1, r0, r8, lsr #2
 698:	00000088 	andeq	r0, r0, r8, lsl #1
 69c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6a0:	41018e02 	tstmi	r1, r2, lsl #28
 6a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6a8:	00000007 	andeq	r0, r0, r7
 6ac:	00000018 	andeq	r0, r0, r8, lsl r0
 6b0:	00000624 	andeq	r0, r0, r4, lsr #12
 6b4:	200011b0 			; <UNDEFINED> instruction: 0x200011b0
 6b8:	00000014 	andeq	r0, r0, r4, lsl r0
 6bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6c0:	41018e02 	tstmi	r1, r2, lsl #28
 6c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c8:	00000018 	andeq	r0, r0, r8, lsl r0
 6cc:	00000624 	andeq	r0, r0, r4, lsr #12
 6d0:	200011c4 	andcs	r1, r0, r4, asr #3
 6d4:	00000078 	andeq	r0, r0, r8, ror r0
 6d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6dc:	41018e02 	tstmi	r1, r2, lsl #28
 6e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e8:	00000624 	andeq	r0, r0, r4, lsr #12
 6ec:	2000123c 	andcs	r1, r0, ip, lsr r2
 6f0:	00000058 	andeq	r0, r0, r8, asr r0
 6f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6f8:	41018e02 	tstmi	r1, r2, lsl #28
 6fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 700:	00000007 	andeq	r0, r0, r7
 704:	00000018 	andeq	r0, r0, r8, lsl r0
 708:	00000624 	andeq	r0, r0, r4, lsr #12
 70c:	20001294 	mulcs	r0, r4, r2
 710:	00000024 	andeq	r0, r0, r4, lsr #32
 714:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 718:	41018e02 	tstmi	r1, r2, lsl #28
 71c:	0000070d 	andeq	r0, r0, sp, lsl #14

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	2000107e 	andcs	r1, r0, lr, ror r0
   4:	20001096 	mulcs	r0, r6, r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
