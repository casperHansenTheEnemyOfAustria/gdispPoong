
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f001 f906 	bl	20001214 <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:
#include "ascii.h"
#include "startup.h"
#include "delay.h"

void ascii_ctrl_bit_set(char x){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
        char c;
        c = *GPIO_E_ODR_LOW;
2000001c:	4a09      	ldr	r2, [pc, #36]	; (20000044 <ascii_ctrl_bit_set+0x34>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7812      	ldrb	r2, [r2, #0]
20000024:	701a      	strb	r2, [r3, #0]
        *GPIO_E_ODR_LOW = B_SELECT | x | c;
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2db      	uxtb	r3, r3
20000032:	4a04      	ldr	r2, [pc, #16]	; (20000044 <ascii_ctrl_bit_set+0x34>)
20000034:	2104      	movs	r1, #4
20000036:	430b      	orrs	r3, r1
20000038:	b2db      	uxtb	r3, r3
2000003a:	7013      	strb	r3, [r2, #0]
}
2000003c:	46c0      	nop			; (mov r8, r8)
2000003e:	46bd      	mov	sp, r7
20000040:	b004      	add	sp, #16
20000042:	bd80      	pop	{r7, pc}
20000044:	40021014 	andmi	r1, r2, r4, lsl r0

20000048 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(char x){
20000048:	b580      	push	{r7, lr}
2000004a:	b084      	sub	sp, #16
2000004c:	af00      	add	r7, sp, #0
2000004e:	0002      	movs	r2, r0
20000050:	1dfb      	adds	r3, r7, #7
20000052:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
20000054:	4a0d      	ldr	r2, [pc, #52]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000056:	210f      	movs	r1, #15
20000058:	187b      	adds	r3, r7, r1
2000005a:	7812      	ldrb	r2, [r2, #0]
2000005c:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
2000005e:	1dfb      	adds	r3, r7, #7
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	b25b      	sxtb	r3, r3
20000064:	43db      	mvns	r3, r3
20000066:	b25b      	sxtb	r3, r3
20000068:	187a      	adds	r2, r7, r1
2000006a:	7812      	ldrb	r2, [r2, #0]
2000006c:	b252      	sxtb	r2, r2
2000006e:	4013      	ands	r3, r2
20000070:	b25a      	sxtb	r2, r3
20000072:	187b      	adds	r3, r7, r1
20000074:	701a      	strb	r2, [r3, #0]
	*GPIO_E_ODR_LOW = B_SELECT | c;
20000076:	4a05      	ldr	r2, [pc, #20]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000078:	187b      	adds	r3, r7, r1
2000007a:	781b      	ldrb	r3, [r3, #0]
2000007c:	2104      	movs	r1, #4
2000007e:	430b      	orrs	r3, r1
20000080:	b2db      	uxtb	r3, r3
20000082:	7013      	strb	r3, [r2, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	b004      	add	sp, #16
2000008a:	bd80      	pop	{r7, pc}
2000008c:	40021014 	andmi	r1, r2, r4, lsl r0

20000090 <ascii_read_controller>:


char  ascii_read_controller(){
20000090:	b580      	push	{r7, lr}
20000092:	b082      	sub	sp, #8
20000094:	af00      	add	r7, sp, #0
        
        char c;
        ascii_ctrl_bit_set(B_E);
20000096:	2040      	movs	r0, #64	; 0x40
20000098:	f7ff ffba 	bl	20000010 <ascii_ctrl_bit_set>

        delay_250ns();
2000009c:	f000 fb75 	bl	2000078a <delay_250ns>
        delay_250ns();
200000a0:	f000 fb73 	bl	2000078a <delay_250ns>


        c = *GPIO_E_IDR_HIGH;
200000a4:	4a06      	ldr	r2, [pc, #24]	; (200000c0 <ascii_read_controller+0x30>)
200000a6:	1dfb      	adds	r3, r7, #7
200000a8:	7812      	ldrb	r2, [r2, #0]
200000aa:	701a      	strb	r2, [r3, #0]

        ascii_ctrl_bit_clear(B_E);
200000ac:	2040      	movs	r0, #64	; 0x40
200000ae:	f7ff ffcb 	bl	20000048 <ascii_ctrl_bit_clear>
        
        return c;
200000b2:	1dfb      	adds	r3, r7, #7
200000b4:	781b      	ldrb	r3, [r3, #0]
    }
200000b6:	0018      	movs	r0, r3
200000b8:	46bd      	mov	sp, r7
200000ba:	b002      	add	sp, #8
200000bc:	bd80      	pop	{r7, pc}
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	40021011 	andmi	r1, r2, r1, lsl r0

200000c4 <ascii_read_status>:
char  ascii_read_status(){
200000c4:	b590      	push	{r4, r7, lr}
200000c6:	b083      	sub	sp, #12
200000c8:	af00      	add	r7, sp, #0
	*GPIO_E_MODER = 0x00005555;
200000ca:	4b0b      	ldr	r3, [pc, #44]	; (200000f8 <ascii_read_status+0x34>)
200000cc:	4a0b      	ldr	r2, [pc, #44]	; (200000fc <ascii_read_status+0x38>)
200000ce:	601a      	str	r2, [r3, #0]
        char c;

        // vilket kommando vil vi göra
      
        ascii_ctrl_bit_clear(B_RS);
200000d0:	2001      	movs	r0, #1
200000d2:	f7ff ffb9 	bl	20000048 <ascii_ctrl_bit_clear>
		  ascii_ctrl_bit_set(B_RW);
200000d6:	2002      	movs	r0, #2
200000d8:	f7ff ff9a 	bl	20000010 <ascii_ctrl_bit_set>
        // kicka ingång det hela
        c = ascii_read_controller();
200000dc:	1dfc      	adds	r4, r7, #7
200000de:	f7ff ffd7 	bl	20000090 <ascii_read_controller>
200000e2:	0003      	movs	r3, r0
200000e4:	7023      	strb	r3, [r4, #0]
		*GPIO_E_MODER = 0x55555555;
200000e6:	4b04      	ldr	r3, [pc, #16]	; (200000f8 <ascii_read_status+0x34>)
200000e8:	4a05      	ldr	r2, [pc, #20]	; (20000100 <ascii_read_status+0x3c>)
200000ea:	601a      	str	r2, [r3, #0]
        return c;
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	781b      	ldrb	r3, [r3, #0]
    }
200000f0:	0018      	movs	r0, r3
200000f2:	46bd      	mov	sp, r7
200000f4:	b003      	add	sp, #12
200000f6:	bd90      	pop	{r4, r7, pc}
200000f8:	40021000 	andmi	r1, r2, r0
200000fc:	00005555 	andeq	r5, r0, r5, asr r5
20000100:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000104 <ascii_read_data>:

char ascii_read_data(){
20000104:	b590      	push	{r4, r7, lr}
20000106:	b083      	sub	sp, #12
20000108:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = *GPIO_E_MODER & 0x00005555;
2000010a:	4b0e      	ldr	r3, [pc, #56]	; (20000144 <ascii_read_data+0x40>)
2000010c:	681a      	ldr	r2, [r3, #0]
2000010e:	4b0d      	ldr	r3, [pc, #52]	; (20000144 <ascii_read_data+0x40>)
20000110:	490d      	ldr	r1, [pc, #52]	; (20000148 <ascii_read_data+0x44>)
20000112:	400a      	ands	r2, r1
20000114:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000116:	2002      	movs	r0, #2
20000118:	f7ff ff7a 	bl	20000010 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
2000011c:	2001      	movs	r0, #1
2000011e:	f7ff ff77 	bl	20000010 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
20000122:	1dfc      	adds	r4, r7, #7
20000124:	f7ff ffb4 	bl	20000090 <ascii_read_controller>
20000128:	0003      	movs	r3, r0
2000012a:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER = *GPIO_E_MODER & 0x55555555;
2000012c:	4b05      	ldr	r3, [pc, #20]	; (20000144 <ascii_read_data+0x40>)
2000012e:	681a      	ldr	r2, [r3, #0]
20000130:	4b04      	ldr	r3, [pc, #16]	; (20000144 <ascii_read_data+0x40>)
20000132:	4906      	ldr	r1, [pc, #24]	; (2000014c <ascii_read_data+0x48>)
20000134:	400a      	ands	r2, r1
20000136:	601a      	str	r2, [r3, #0]
	return c;
20000138:	1dfb      	adds	r3, r7, #7
2000013a:	781b      	ldrb	r3, [r3, #0]

}
2000013c:	0018      	movs	r0, r3
2000013e:	46bd      	mov	sp, r7
20000140:	b003      	add	sp, #12
20000142:	bd90      	pop	{r4, r7, pc}
20000144:	40021000 	andmi	r1, r2, r0
20000148:	00005555 	andeq	r5, r0, r5, asr r5
2000014c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000150 <ascii_write_controller>:
    void ascii_write_controller(char command){
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
        char c;
        ascii_ctrl_bit_set(B_E);
2000015c:	2040      	movs	r0, #64	; 0x40
2000015e:	f7ff ff57 	bl	20000010 <ascii_ctrl_bit_set>
        *GPIO_E_ODR_HIGH = command;
20000162:	4a07      	ldr	r2, [pc, #28]	; (20000180 <ascii_write_controller+0x30>)
20000164:	1dfb      	adds	r3, r7, #7
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	7013      	strb	r3, [r2, #0]
        delay_250ns();
2000016a:	f000 fb0e 	bl	2000078a <delay_250ns>
        ascii_ctrl_bit_clear(B_E);
2000016e:	2040      	movs	r0, #64	; 0x40
20000170:	f7ff ff6a 	bl	20000048 <ascii_ctrl_bit_clear>
        delay_250ns();
20000174:	f000 fb09 	bl	2000078a <delay_250ns>
        
        
    }
20000178:	46c0      	nop			; (mov r8, r8)
2000017a:	46bd      	mov	sp, r7
2000017c:	b002      	add	sp, #8
2000017e:	bd80      	pop	{r7, pc}
20000180:	40021015 	andmi	r1, r2, r5, lsl r0

20000184 <ascii_write_cmd>:
void ascii_write_cmd(char command){
20000184:	b580      	push	{r7, lr}
20000186:	b082      	sub	sp, #8
20000188:	af00      	add	r7, sp, #0
2000018a:	0002      	movs	r2, r0
2000018c:	1dfb      	adds	r3, r7, #7
2000018e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RW);
20000190:	2002      	movs	r0, #2
20000192:	f7ff ff59 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RS);
20000196:	2001      	movs	r0, #1
20000198:	f7ff ff56 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	781b      	ldrb	r3, [r3, #0]
200001a0:	0018      	movs	r0, r3
200001a2:	f7ff ffd5 	bl	20000150 <ascii_write_controller>
}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	46bd      	mov	sp, r7
200001aa:	b002      	add	sp, #8
200001ac:	bd80      	pop	{r7, pc}

200001ae <ascii_write_data>:
void ascii_write_data(char command){
200001ae:	b580      	push	{r7, lr}
200001b0:	b082      	sub	sp, #8
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
		ascii_ctrl_bit_set(B_RS);
200001ba:	2001      	movs	r0, #1
200001bc:	f7ff ff28 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200001c0:	2002      	movs	r0, #2
200001c2:	f7ff ff41 	bl	20000048 <ascii_ctrl_bit_clear>

	ascii_write_controller(command);
200001c6:	1dfb      	adds	r3, r7, #7
200001c8:	781b      	ldrb	r3, [r3, #0]
200001ca:	0018      	movs	r0, r3
200001cc:	f7ff ffc0 	bl	20000150 <ascii_write_controller>
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	b002      	add	sp, #8
200001d6:	bd80      	pop	{r7, pc}

200001d8 <ascii_command>:

void ascii_command(char command){
200001d8:	b580      	push	{r7, lr}
200001da:	b082      	sub	sp, #8
200001dc:	af00      	add	r7, sp, #0
200001de:	0002      	movs	r2, r0
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	f7ff ff6d 	bl	200000c4 <ascii_read_status>
200001ea:	0003      	movs	r3, r0
200001ec:	001a      	movs	r2, r3
200001ee:	2380      	movs	r3, #128	; 0x80
200001f0:	4013      	ands	r3, r2
200001f2:	2b80      	cmp	r3, #128	; 0x80
200001f4:	d0f7      	beq.n	200001e6 <ascii_command+0xe>
	}
	ascii_write_cmd(command);
200001f6:	1dfb      	adds	r3, r7, #7
200001f8:	781b      	ldrb	r3, [r3, #0]
200001fa:	0018      	movs	r0, r3
200001fc:	f7ff ffc2 	bl	20000184 <ascii_write_cmd>
	delay_mili(2);
20000200:	2002      	movs	r0, #2
20000202:	f000 faa7 	bl	20000754 <delay_mili>
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}

2000020e <ascii_write_char>:

void ascii_write_char(char command){
2000020e:	b580      	push	{r7, lr}
20000210:	b082      	sub	sp, #8
20000212:	af00      	add	r7, sp, #0
20000214:	0002      	movs	r2, r0
20000216:	1dfb      	adds	r3, r7, #7
20000218:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	f7ff ff52 	bl	200000c4 <ascii_read_status>
20000220:	0003      	movs	r3, r0
20000222:	001a      	movs	r2, r3
20000224:	2380      	movs	r3, #128	; 0x80
20000226:	4013      	ands	r3, r2
20000228:	2b80      	cmp	r3, #128	; 0x80
2000022a:	d0f7      	beq.n	2000021c <ascii_write_char+0xe>
	}
	ascii_write_data(command);
2000022c:	1dfb      	adds	r3, r7, #7
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	0018      	movs	r0, r3
20000232:	f7ff ffbc 	bl	200001ae <ascii_write_data>
	delay_mili(2);
20000236:	2002      	movs	r0, #2
20000238:	f000 fa8c 	bl	20000754 <delay_mili>
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	b002      	add	sp, #8
20000242:	bd80      	pop	{r7, pc}

20000244 <ascii_init>:

void ascii_init(){
20000244:	b580      	push	{r7, lr}
20000246:	af00      	add	r7, sp, #0
	// functions set
	ascii_command(0x38);
20000248:	2038      	movs	r0, #56	; 0x38
2000024a:	f7ff ffc5 	bl	200001d8 <ascii_command>
	//display init blinking cursor
	ascii_command(0xC);
2000024e:	200c      	movs	r0, #12
20000250:	f7ff ffc2 	bl	200001d8 <ascii_command>
	//clear display
	ascii_command(1);
20000254:	2001      	movs	r0, #1
20000256:	f7ff ffbf 	bl	200001d8 <ascii_command>
	// entry mode left, no increment
	ascii_command(0x6);
2000025a:	2006      	movs	r0, #6
2000025c:	f7ff ffbc 	bl	200001d8 <ascii_command>
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	bd80      	pop	{r7, pc}

20000266 <ascii_clear_screen>:

void ascii_clear_screen(){
20000266:	b580      	push	{r7, lr}
20000268:	af00      	add	r7, sp, #0
    ascii_command(1);
2000026a:	2001      	movs	r0, #1
2000026c:	f7ff ffb4 	bl	200001d8 <ascii_command>
}
20000270:	46c0      	nop			; (mov r8, r8)
20000272:	46bd      	mov	sp, r7
20000274:	bd80      	pop	{r7, pc}

20000276 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y ){
20000276:	b580      	push	{r7, lr}
20000278:	b084      	sub	sp, #16
2000027a:	af00      	add	r7, sp, #0
2000027c:	6078      	str	r0, [r7, #4]
2000027e:	6039      	str	r1, [r7, #0]
	int adress = x-1;
20000280:	687b      	ldr	r3, [r7, #4]
20000282:	3b01      	subs	r3, #1
20000284:	60fb      	str	r3, [r7, #12]
	if(y == 2){
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	2b02      	cmp	r3, #2
2000028a:	d102      	bne.n	20000292 <ascii_gotoxy+0x1c>
		adress = adress + 0x40;
2000028c:	68fb      	ldr	r3, [r7, #12]
2000028e:	3340      	adds	r3, #64	; 0x40
20000290:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80 | adress);
20000292:	68fb      	ldr	r3, [r7, #12]
20000294:	b25b      	sxtb	r3, r3
20000296:	2280      	movs	r2, #128	; 0x80
20000298:	4252      	negs	r2, r2
2000029a:	4313      	orrs	r3, r2
2000029c:	b25b      	sxtb	r3, r3
2000029e:	b2db      	uxtb	r3, r3
200002a0:	0018      	movs	r0, r3
200002a2:	f7ff ff6f 	bl	20000184 <ascii_write_cmd>

}
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	46bd      	mov	sp, r7
200002aa:	b004      	add	sp, #16
200002ac:	bd80      	pop	{r7, pc}

200002ae <ascii_write_text_at>:

void ascii_write_text_at(char num, int x, int y){
200002ae:	b590      	push	{r4, r7, lr}
200002b0:	b089      	sub	sp, #36	; 0x24
200002b2:	af00      	add	r7, sp, #0
200002b4:	60b9      	str	r1, [r7, #8]
200002b6:	607a      	str	r2, [r7, #4]
200002b8:	240f      	movs	r4, #15
200002ba:	193b      	adds	r3, r7, r4
200002bc:	1c02      	adds	r2, r0, #0
200002be:	701a      	strb	r2, [r3, #0]
	
	int moder_save = *GPIO_E_MODER;
200002c0:	4b16      	ldr	r3, [pc, #88]	; (2000031c <ascii_write_text_at+0x6e>)
200002c2:	681b      	ldr	r3, [r3, #0]
200002c4:	61fb      	str	r3, [r7, #28]
	int otyper_save = *GPIO_E_OTYPER;
200002c6:	4b16      	ldr	r3, [pc, #88]	; (20000320 <ascii_write_text_at+0x72>)
200002c8:	881b      	ldrh	r3, [r3, #0]
200002ca:	b29b      	uxth	r3, r3
200002cc:	61bb      	str	r3, [r7, #24]
	int ospeedr_save = *GPIO_E_OSPEEDR;
200002ce:	4b15      	ldr	r3, [pc, #84]	; (20000324 <ascii_write_text_at+0x76>)
200002d0:	681b      	ldr	r3, [r3, #0]
200002d2:	617b      	str	r3, [r7, #20]
	*GPIO_E_MODER = 0x55555555;
200002d4:	4b11      	ldr	r3, [pc, #68]	; (2000031c <ascii_write_text_at+0x6e>)
200002d6:	4a14      	ldr	r2, [pc, #80]	; (20000328 <ascii_write_text_at+0x7a>)
200002d8:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
200002da:	4b11      	ldr	r3, [pc, #68]	; (20000320 <ascii_write_text_at+0x72>)
200002dc:	2200      	movs	r2, #0
200002de:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
200002e0:	4b10      	ldr	r3, [pc, #64]	; (20000324 <ascii_write_text_at+0x76>)
200002e2:	2201      	movs	r2, #1
200002e4:	4252      	negs	r2, r2
200002e6:	601a      	str	r2, [r3, #0]
	ascii_gotoxy(x,y);
200002e8:	687a      	ldr	r2, [r7, #4]
200002ea:	68bb      	ldr	r3, [r7, #8]
200002ec:	0011      	movs	r1, r2
200002ee:	0018      	movs	r0, r3
200002f0:	f7ff ffc1 	bl	20000276 <ascii_gotoxy>
	ascii_write_char(num);
200002f4:	193b      	adds	r3, r7, r4
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	0018      	movs	r0, r3
200002fa:	f7ff ff88 	bl	2000020e <ascii_write_char>

	*GPIO_E_MODER = moder_save;
200002fe:	4b07      	ldr	r3, [pc, #28]	; (2000031c <ascii_write_text_at+0x6e>)
20000300:	69fa      	ldr	r2, [r7, #28]
20000302:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = otyper_save;
20000304:	4b06      	ldr	r3, [pc, #24]	; (20000320 <ascii_write_text_at+0x72>)
20000306:	69ba      	ldr	r2, [r7, #24]
20000308:	b292      	uxth	r2, r2
2000030a:	801a      	strh	r2, [r3, #0]
	*GPIO_E_OSPEEDR = ospeedr_save;
2000030c:	4b05      	ldr	r3, [pc, #20]	; (20000324 <ascii_write_text_at+0x76>)
2000030e:	697a      	ldr	r2, [r7, #20]
20000310:	601a      	str	r2, [r3, #0]
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b009      	add	sp, #36	; 0x24
20000318:	bd90      	pop	{r4, r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40021000 	andmi	r1, r2, r0
20000320:	40021004 	andmi	r1, r2, r4
20000324:	40021008 	andmi	r1, r2, r8
20000328:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000032c <draw_ballobject>:
    {4,7},{4,6},{4,5},{4,4},{4,3},{4,2},{4,1},
    {2,3},{2,4},{2,5}}
};


void draw_ballobject(OBJECT* object){
2000032c:	b580      	push	{r7, lr}
2000032e:	b084      	sub	sp, #16
20000330:	af00      	add	r7, sp, #0
20000332:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < object->geo->numpoints; i++){
20000334:	2300      	movs	r3, #0
20000336:	60fb      	str	r3, [r7, #12]
20000338:	e01d      	b.n	20000376 <draw_ballobject+0x4a>
        graphic_pixel_set(object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy);
2000033a:	687b      	ldr	r3, [r7, #4]
2000033c:	681a      	ldr	r2, [r3, #0]
2000033e:	68fb      	ldr	r3, [r7, #12]
20000340:	3304      	adds	r3, #4
20000342:	005b      	lsls	r3, r3, #1
20000344:	18d3      	adds	r3, r2, r3
20000346:	3304      	adds	r3, #4
20000348:	781b      	ldrb	r3, [r3, #0]
2000034a:	001a      	movs	r2, r3
2000034c:	687b      	ldr	r3, [r7, #4]
2000034e:	68db      	ldr	r3, [r3, #12]
20000350:	18d0      	adds	r0, r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	681a      	ldr	r2, [r3, #0]
20000356:	68fb      	ldr	r3, [r7, #12]
20000358:	3304      	adds	r3, #4
2000035a:	005b      	lsls	r3, r3, #1
2000035c:	18d3      	adds	r3, r2, r3
2000035e:	3305      	adds	r3, #5
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	001a      	movs	r2, r3
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	691b      	ldr	r3, [r3, #16]
20000368:	18d3      	adds	r3, r2, r3
2000036a:	0019      	movs	r1, r3
2000036c:	f000 ffa9 	bl	200012c2 <graphic_pixel_set>
    for(int i = 0; i < object->geo->numpoints; i++){
20000370:	68fb      	ldr	r3, [r7, #12]
20000372:	3301      	adds	r3, #1
20000374:	60fb      	str	r3, [r7, #12]
20000376:	687b      	ldr	r3, [r7, #4]
20000378:	681b      	ldr	r3, [r3, #0]
2000037a:	681b      	ldr	r3, [r3, #0]
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	429a      	cmp	r2, r3
20000380:	dbdb      	blt.n	2000033a <draw_ballobject+0xe>
    }
}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	46c0      	nop			; (mov r8, r8)
20000386:	46bd      	mov	sp, r7
20000388:	b004      	add	sp, #16
2000038a:	bd80      	pop	{r7, pc}

2000038c <clear_ballobject>:

void clear_ballobject(OBJECT* object){
2000038c:	b580      	push	{r7, lr}
2000038e:	b084      	sub	sp, #16
20000390:	af00      	add	r7, sp, #0
20000392:	6078      	str	r0, [r7, #4]
      for(int i = 0; i < object->geo->numpoints; i++){
20000394:	2300      	movs	r3, #0
20000396:	60fb      	str	r3, [r7, #12]
20000398:	e01d      	b.n	200003d6 <clear_ballobject+0x4a>
        graphic_pixel_clear(object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy);
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	681a      	ldr	r2, [r3, #0]
2000039e:	68fb      	ldr	r3, [r7, #12]
200003a0:	3304      	adds	r3, #4
200003a2:	005b      	lsls	r3, r3, #1
200003a4:	18d3      	adds	r3, r2, r3
200003a6:	3304      	adds	r3, #4
200003a8:	781b      	ldrb	r3, [r3, #0]
200003aa:	001a      	movs	r2, r3
200003ac:	687b      	ldr	r3, [r7, #4]
200003ae:	68db      	ldr	r3, [r3, #12]
200003b0:	18d0      	adds	r0, r2, r3
200003b2:	687b      	ldr	r3, [r7, #4]
200003b4:	681a      	ldr	r2, [r3, #0]
200003b6:	68fb      	ldr	r3, [r7, #12]
200003b8:	3304      	adds	r3, #4
200003ba:	005b      	lsls	r3, r3, #1
200003bc:	18d3      	adds	r3, r2, r3
200003be:	3305      	adds	r3, #5
200003c0:	781b      	ldrb	r3, [r3, #0]
200003c2:	001a      	movs	r2, r3
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	691b      	ldr	r3, [r3, #16]
200003c8:	18d3      	adds	r3, r2, r3
200003ca:	0019      	movs	r1, r3
200003cc:	f000 ff7c 	bl	200012c8 <graphic_pixel_clear>
      for(int i = 0; i < object->geo->numpoints; i++){
200003d0:	68fb      	ldr	r3, [r7, #12]
200003d2:	3301      	adds	r3, #1
200003d4:	60fb      	str	r3, [r7, #12]
200003d6:	687b      	ldr	r3, [r7, #4]
200003d8:	681b      	ldr	r3, [r3, #0]
200003da:	681b      	ldr	r3, [r3, #0]
200003dc:	68fa      	ldr	r2, [r7, #12]
200003de:	429a      	cmp	r2, r3
200003e0:	dbdb      	blt.n	2000039a <clear_ballobject+0xe>
    }
}
200003e2:	46c0      	nop			; (mov r8, r8)
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b004      	add	sp, #16
200003ea:	bd80      	pop	{r7, pc}

200003ec <move_ballobject>:
void move_ballobject(OBJECT* object){
200003ec:	b580      	push	{r7, lr}
200003ee:	b082      	sub	sp, #8
200003f0:	af00      	add	r7, sp, #0
200003f2:	6078      	str	r0, [r7, #4]
    clear_ballobject(object);
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	0018      	movs	r0, r3
200003f8:	f7ff ffc8 	bl	2000038c <clear_ballobject>
    object->posx+= object->dirx;
200003fc:	687b      	ldr	r3, [r7, #4]
200003fe:	68da      	ldr	r2, [r3, #12]
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	685b      	ldr	r3, [r3, #4]
20000404:	18d2      	adds	r2, r2, r3
20000406:	687b      	ldr	r3, [r7, #4]
20000408:	60da      	str	r2, [r3, #12]
    object->posy+= object->diry;
2000040a:	687b      	ldr	r3, [r7, #4]
2000040c:	691a      	ldr	r2, [r3, #16]
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	689b      	ldr	r3, [r3, #8]
20000412:	18d2      	adds	r2, r2, r3
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	611a      	str	r2, [r3, #16]

    if(object->posx >127){
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	68db      	ldr	r3, [r3, #12]
2000041c:	2b7f      	cmp	r3, #127	; 0x7f
2000041e:	dd04      	ble.n	2000042a <move_ballobject+0x3e>
        object->dirx = -object->dirx;
20000420:	687b      	ldr	r3, [r7, #4]
20000422:	685b      	ldr	r3, [r3, #4]
20000424:	425a      	negs	r2, r3
20000426:	687b      	ldr	r3, [r7, #4]
20000428:	605a      	str	r2, [r3, #4]
    }
    if(object->posx <1){
2000042a:	687b      	ldr	r3, [r7, #4]
2000042c:	68db      	ldr	r3, [r3, #12]
2000042e:	2b00      	cmp	r3, #0
20000430:	dc04      	bgt.n	2000043c <move_ballobject+0x50>
        object->dirx = -object->dirx;
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	685b      	ldr	r3, [r3, #4]
20000436:	425a      	negs	r2, r3
20000438:	687b      	ldr	r3, [r7, #4]
2000043a:	605a      	str	r2, [r3, #4]
    }
    if(object->posy >64){
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	691b      	ldr	r3, [r3, #16]
20000440:	2b40      	cmp	r3, #64	; 0x40
20000442:	dd04      	ble.n	2000044e <move_ballobject+0x62>
        object->diry = -object->diry;
20000444:	687b      	ldr	r3, [r7, #4]
20000446:	689b      	ldr	r3, [r3, #8]
20000448:	425a      	negs	r2, r3
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	609a      	str	r2, [r3, #8]
    }
    if(object->posy <1){
2000044e:	687b      	ldr	r3, [r7, #4]
20000450:	691b      	ldr	r3, [r3, #16]
20000452:	2b00      	cmp	r3, #0
20000454:	dc04      	bgt.n	20000460 <move_ballobject+0x74>
        object->diry = -object->diry;
20000456:	687b      	ldr	r3, [r7, #4]
20000458:	689b      	ldr	r3, [r3, #8]
2000045a:	425a      	negs	r2, r3
2000045c:	687b      	ldr	r3, [r7, #4]
2000045e:	609a      	str	r2, [r3, #8]
    }
    draw_ballobject(object);
20000460:	687b      	ldr	r3, [r7, #4]
20000462:	0018      	movs	r0, r3
20000464:	f7ff ff62 	bl	2000032c <draw_ballobject>
}
20000468:	46c0      	nop			; (mov r8, r8)
2000046a:	46bd      	mov	sp, r7
2000046c:	b002      	add	sp, #8
2000046e:	bd80      	pop	{r7, pc}

20000470 <move_paddleobject>:

void move_paddleobject(OBJECT* object){
20000470:	b580      	push	{r7, lr}
20000472:	b082      	sub	sp, #8
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
    clear_ballobject(object);
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ff86 	bl	2000038c <clear_ballobject>
    object->posy+= object->diry;
20000480:	687b      	ldr	r3, [r7, #4]
20000482:	691a      	ldr	r2, [r3, #16]
20000484:	687b      	ldr	r3, [r7, #4]
20000486:	689b      	ldr	r3, [r3, #8]
20000488:	18d2      	adds	r2, r2, r3
2000048a:	687b      	ldr	r3, [r7, #4]
2000048c:	611a      	str	r2, [r3, #16]

    if(object->posy >64){
2000048e:	687b      	ldr	r3, [r7, #4]
20000490:	691b      	ldr	r3, [r3, #16]
20000492:	2b40      	cmp	r3, #64	; 0x40
20000494:	dd05      	ble.n	200004a2 <move_paddleobject+0x32>
        object->diry = 0;
20000496:	687b      	ldr	r3, [r7, #4]
20000498:	2200      	movs	r2, #0
2000049a:	609a      	str	r2, [r3, #8]
        object->posy = 60;
2000049c:	687b      	ldr	r3, [r7, #4]
2000049e:	223c      	movs	r2, #60	; 0x3c
200004a0:	611a      	str	r2, [r3, #16]
    }
    if(object->posy <1){
200004a2:	687b      	ldr	r3, [r7, #4]
200004a4:	691b      	ldr	r3, [r3, #16]
200004a6:	2b00      	cmp	r3, #0
200004a8:	dc05      	bgt.n	200004b6 <move_paddleobject+0x46>
        object->diry = 0;
200004aa:	687b      	ldr	r3, [r7, #4]
200004ac:	2200      	movs	r2, #0
200004ae:	609a      	str	r2, [r3, #8]
        object->posy = 4;
200004b0:	687b      	ldr	r3, [r7, #4]
200004b2:	2204      	movs	r2, #4
200004b4:	611a      	str	r2, [r3, #16]
    }
    draw_ballobject(object);
200004b6:	687b      	ldr	r3, [r7, #4]
200004b8:	0018      	movs	r0, r3
200004ba:	f7ff ff37 	bl	2000032c <draw_ballobject>
}
200004be:	46c0      	nop			; (mov r8, r8)
200004c0:	46bd      	mov	sp, r7
200004c2:	b002      	add	sp, #8
200004c4:	bd80      	pop	{r7, pc}

200004c6 <set_ballobject_speed>:


void set_ballobject_speed(OBJECT* object, int speedx, int speedy){
200004c6:	b580      	push	{r7, lr}
200004c8:	b084      	sub	sp, #16
200004ca:	af00      	add	r7, sp, #0
200004cc:	60f8      	str	r0, [r7, #12]
200004ce:	60b9      	str	r1, [r7, #8]
200004d0:	607a      	str	r2, [r7, #4]
    object->dirx = speedx;
200004d2:	68fb      	ldr	r3, [r7, #12]
200004d4:	68ba      	ldr	r2, [r7, #8]
200004d6:	605a      	str	r2, [r3, #4]
    object->diry = speedy;
200004d8:	68fb      	ldr	r3, [r7, #12]
200004da:	687a      	ldr	r2, [r7, #4]
200004dc:	609a      	str	r2, [r3, #8]
}
200004de:	46c0      	nop			; (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	b004      	add	sp, #16
200004e4:	bd80      	pop	{r7, pc}

200004e6 <create_ballobject>:

OBJECT create_ballobject(int posx, int posy){
200004e6:	b590      	push	{r4, r7, lr}
200004e8:	b08f      	sub	sp, #60	; 0x3c
200004ea:	af00      	add	r7, sp, #0
200004ec:	60f8      	str	r0, [r7, #12]
200004ee:	60b9      	str	r1, [r7, #8]
200004f0:	607a      	str	r2, [r7, #4]
    OBJECT ballobject = {
200004f2:	2114      	movs	r1, #20
200004f4:	187b      	adds	r3, r7, r1
200004f6:	4a13      	ldr	r2, [pc, #76]	; (20000544 <create_ballobject+0x5e>)
200004f8:	601a      	str	r2, [r3, #0]
200004fa:	187b      	adds	r3, r7, r1
200004fc:	2200      	movs	r2, #0
200004fe:	605a      	str	r2, [r3, #4]
20000500:	187b      	adds	r3, r7, r1
20000502:	2200      	movs	r2, #0
20000504:	609a      	str	r2, [r3, #8]
20000506:	187b      	adds	r3, r7, r1
20000508:	68ba      	ldr	r2, [r7, #8]
2000050a:	60da      	str	r2, [r3, #12]
2000050c:	187b      	adds	r3, r7, r1
2000050e:	687a      	ldr	r2, [r7, #4]
20000510:	611a      	str	r2, [r3, #16]
20000512:	187b      	adds	r3, r7, r1
20000514:	4a0c      	ldr	r2, [pc, #48]	; (20000548 <create_ballobject+0x62>)
20000516:	615a      	str	r2, [r3, #20]
20000518:	187b      	adds	r3, r7, r1
2000051a:	4a0c      	ldr	r2, [pc, #48]	; (2000054c <create_ballobject+0x66>)
2000051c:	619a      	str	r2, [r3, #24]
2000051e:	187b      	adds	r3, r7, r1
20000520:	4a0b      	ldr	r2, [pc, #44]	; (20000550 <create_ballobject+0x6a>)
20000522:	61da      	str	r2, [r3, #28]
20000524:	187b      	adds	r3, r7, r1
20000526:	4a0b      	ldr	r2, [pc, #44]	; (20000554 <create_ballobject+0x6e>)
20000528:	621a      	str	r2, [r3, #32]
        draw_ballobject,
        clear_ballobject,
        move_ballobject,
        set_ballobject_speed
    };
    return ballobject;
2000052a:	68fb      	ldr	r3, [r7, #12]
2000052c:	187a      	adds	r2, r7, r1
2000052e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000530:	c313      	stmia	r3!, {r0, r1, r4}
20000532:	ca13      	ldmia	r2!, {r0, r1, r4}
20000534:	c313      	stmia	r3!, {r0, r1, r4}
20000536:	ca13      	ldmia	r2!, {r0, r1, r4}
20000538:	c313      	stmia	r3!, {r0, r1, r4}
}
2000053a:	68f8      	ldr	r0, [r7, #12]
2000053c:	46bd      	mov	sp, r7
2000053e:	b00f      	add	sp, #60	; 0x3c
20000540:	bd90      	pop	{r4, r7, pc}
20000542:	46c0      	nop			; (mov r8, r8)
20000544:	20001300 	andcs	r1, r0, r0, lsl #6
20000548:	2000032d 	andcs	r0, r0, sp, lsr #6
2000054c:	2000038d 	andcs	r0, r0, sp, lsl #7
20000550:	200003ed 	andcs	r0, r0, sp, ror #7
20000554:	200004c7 	andcs	r0, r0, r7, asr #9

20000558 <create_paddleobject>:

OBJECT create_paddleobject(int posx, int posy){
20000558:	b590      	push	{r4, r7, lr}
2000055a:	b08f      	sub	sp, #60	; 0x3c
2000055c:	af00      	add	r7, sp, #0
2000055e:	60f8      	str	r0, [r7, #12]
20000560:	60b9      	str	r1, [r7, #8]
20000562:	607a      	str	r2, [r7, #4]
    OBJECT paddleobject = {
20000564:	2114      	movs	r1, #20
20000566:	187b      	adds	r3, r7, r1
20000568:	4a12      	ldr	r2, [pc, #72]	; (200005b4 <create_paddleobject+0x5c>)
2000056a:	601a      	str	r2, [r3, #0]
2000056c:	187b      	adds	r3, r7, r1
2000056e:	2200      	movs	r2, #0
20000570:	605a      	str	r2, [r3, #4]
20000572:	187b      	adds	r3, r7, r1
20000574:	2200      	movs	r2, #0
20000576:	609a      	str	r2, [r3, #8]
20000578:	187b      	adds	r3, r7, r1
2000057a:	68ba      	ldr	r2, [r7, #8]
2000057c:	60da      	str	r2, [r3, #12]
2000057e:	187b      	adds	r3, r7, r1
20000580:	687a      	ldr	r2, [r7, #4]
20000582:	611a      	str	r2, [r3, #16]
20000584:	187b      	adds	r3, r7, r1
20000586:	4a0c      	ldr	r2, [pc, #48]	; (200005b8 <create_paddleobject+0x60>)
20000588:	615a      	str	r2, [r3, #20]
2000058a:	187b      	adds	r3, r7, r1
2000058c:	4a0b      	ldr	r2, [pc, #44]	; (200005bc <create_paddleobject+0x64>)
2000058e:	619a      	str	r2, [r3, #24]
20000590:	187b      	adds	r3, r7, r1
20000592:	4a0b      	ldr	r2, [pc, #44]	; (200005c0 <create_paddleobject+0x68>)
20000594:	61da      	str	r2, [r3, #28]
20000596:	187b      	adds	r3, r7, r1
20000598:	4a0a      	ldr	r2, [pc, #40]	; (200005c4 <create_paddleobject+0x6c>)
2000059a:	621a      	str	r2, [r3, #32]
        draw_ballobject,
        clear_ballobject,
        move_paddleobject,
        set_ballobject_speed
    };
    return paddleobject;
2000059c:	68fb      	ldr	r3, [r7, #12]
2000059e:	187a      	adds	r2, r7, r1
200005a0:	ca13      	ldmia	r2!, {r0, r1, r4}
200005a2:	c313      	stmia	r3!, {r0, r1, r4}
200005a4:	ca13      	ldmia	r2!, {r0, r1, r4}
200005a6:	c313      	stmia	r3!, {r0, r1, r4}
200005a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200005aa:	c313      	stmia	r3!, {r0, r1, r4}
200005ac:	68f8      	ldr	r0, [r7, #12]
200005ae:	46bd      	mov	sp, r7
200005b0:	b00f      	add	sp, #60	; 0x3c
200005b2:	bd90      	pop	{r4, r7, pc}
200005b4:	20001348 	andcs	r1, r0, r8, asr #6
200005b8:	2000032d 	andcs	r0, r0, sp, lsr #6
200005bc:	2000038d 	andcs	r0, r0, sp, lsl #7
200005c0:	20000471 	andcs	r0, r0, r1, ror r4
200005c4:	200004c7 	andcs	r0, r0, r7, asr #9

200005c8 <timer6_init>:





void timer6_init(){
200005c8:	b580      	push	{r7, lr}
200005ca:	af00      	add	r7, sp, #0
	time.seconds = 0;
200005cc:	4b13      	ldr	r3, [pc, #76]	; (2000061c <timer6_init+0x54>)
200005ce:	2200      	movs	r2, #0
200005d0:	601a      	str	r2, [r3, #0]
	*TIM6_CR1 &= ~CEN;
200005d2:	4b13      	ldr	r3, [pc, #76]	; (20000620 <timer6_init+0x58>)
200005d4:	681a      	ldr	r2, [r3, #0]
200005d6:	4b12      	ldr	r3, [pc, #72]	; (20000620 <timer6_init+0x58>)
200005d8:	2101      	movs	r1, #1
200005da:	438a      	bics	r2, r1
200005dc:	601a      	str	r2, [r3, #0]
	*TIM6_IRQVEC = timer6_interrupt;
200005de:	4b11      	ldr	r3, [pc, #68]	; (20000624 <timer6_init+0x5c>)
200005e0:	4a11      	ldr	r2, [pc, #68]	; (20000628 <timer6_init+0x60>)
200005e2:	601a      	str	r2, [r3, #0]
	*NVIC_TIM6_ISER |= NVIC_TIM6_IRQ_BPOS;
200005e4:	4b11      	ldr	r3, [pc, #68]	; (2000062c <timer6_init+0x64>)
200005e6:	681a      	ldr	r2, [r3, #0]
200005e8:	4b10      	ldr	r3, [pc, #64]	; (2000062c <timer6_init+0x64>)
200005ea:	2180      	movs	r1, #128	; 0x80
200005ec:	03c9      	lsls	r1, r1, #15
200005ee:	430a      	orrs	r2, r1
200005f0:	601a      	str	r2, [r3, #0]
	
	*TIM6_PSC = 8399;
200005f2:	4b0f      	ldr	r3, [pc, #60]	; (20000630 <timer6_init+0x68>)
200005f4:	4a0f      	ldr	r2, [pc, #60]	; (20000634 <timer6_init+0x6c>)
200005f6:	601a      	str	r2, [r3, #0]
	*TIM6_ARR = 999;
200005f8:	4b0f      	ldr	r3, [pc, #60]	; (20000638 <timer6_init+0x70>)
200005fa:	4a10      	ldr	r2, [pc, #64]	; (2000063c <timer6_init+0x74>)
200005fc:	601a      	str	r2, [r3, #0]
	*TIM6_DIER |= UIE;
200005fe:	4b10      	ldr	r3, [pc, #64]	; (20000640 <timer6_init+0x78>)
20000600:	681a      	ldr	r2, [r3, #0]
20000602:	4b0f      	ldr	r3, [pc, #60]	; (20000640 <timer6_init+0x78>)
20000604:	2101      	movs	r1, #1
20000606:	430a      	orrs	r2, r1
20000608:	601a      	str	r2, [r3, #0]
	*TIM6_CR1 |= CEN;
2000060a:	4b05      	ldr	r3, [pc, #20]	; (20000620 <timer6_init+0x58>)
2000060c:	681a      	ldr	r2, [r3, #0]
2000060e:	4b04      	ldr	r3, [pc, #16]	; (20000620 <timer6_init+0x58>)
20000610:	2101      	movs	r1, #1
20000612:	430a      	orrs	r2, r1
20000614:	601a      	str	r2, [r3, #0]
}
20000616:	46c0      	nop			; (mov r8, r8)
20000618:	46bd      	mov	sp, r7
2000061a:	bd80      	pop	{r7, pc}
2000061c:	200012dc 	ldrdcs	r1, [r0], -ip
20000620:	40001000 	andmi	r1, r0, r0
20000624:	2001c118 	andcs	ip, r1, r8, lsl r1
20000628:	20000cc5 	andcs	r0, r0, r5, asr #25
2000062c:	e000e104 	and	lr, r0, r4, lsl #2
20000630:	40001028 	andmi	r1, r0, r8, lsr #32
20000634:	000020cf 	andeq	r2, r0, pc, asr #1
20000638:	4000102c 	andmi	r1, r0, ip, lsr #32
2000063c:	000003e7 	andeq	r0, r0, r7, ror #7
20000640:	4000100c 	andmi	r1, r0, ip

20000644 <get_current_time>:

int get_current_time(){
20000644:	b580      	push	{r7, lr}
20000646:	af00      	add	r7, sp, #0
	return time.seconds+ time.ten_seconds*10 + time.minutes*60;
20000648:	4b09      	ldr	r3, [pc, #36]	; (20000670 <get_current_time+0x2c>)
2000064a:	6819      	ldr	r1, [r3, #0]
2000064c:	4b08      	ldr	r3, [pc, #32]	; (20000670 <get_current_time+0x2c>)
2000064e:	685a      	ldr	r2, [r3, #4]
20000650:	0013      	movs	r3, r2
20000652:	009b      	lsls	r3, r3, #2
20000654:	189b      	adds	r3, r3, r2
20000656:	005b      	lsls	r3, r3, #1
20000658:	18c9      	adds	r1, r1, r3
2000065a:	4b05      	ldr	r3, [pc, #20]	; (20000670 <get_current_time+0x2c>)
2000065c:	689a      	ldr	r2, [r3, #8]
2000065e:	0013      	movs	r3, r2
20000660:	011b      	lsls	r3, r3, #4
20000662:	1a9b      	subs	r3, r3, r2
20000664:	009b      	lsls	r3, r3, #2
20000666:	18cb      	adds	r3, r1, r3
}
20000668:	0018      	movs	r0, r3
2000066a:	46bd      	mov	sp, r7
2000066c:	bd80      	pop	{r7, pc}
2000066e:	46c0      	nop			; (mov r8, r8)
20000670:	200012dc 	ldrdcs	r1, [r0], -ip

20000674 <tim6_disable>:

void tim6_disable(){
20000674:	b580      	push	{r7, lr}
20000676:	af00      	add	r7, sp, #0
	*TIM6_CR1 &= ~CEN;
20000678:	4b04      	ldr	r3, [pc, #16]	; (2000068c <tim6_disable+0x18>)
2000067a:	681a      	ldr	r2, [r3, #0]
2000067c:	4b03      	ldr	r3, [pc, #12]	; (2000068c <tim6_disable+0x18>)
2000067e:	2101      	movs	r1, #1
20000680:	438a      	bics	r2, r1
20000682:	601a      	str	r2, [r3, #0]
}
20000684:	46c0      	nop			; (mov r8, r8)
20000686:	46bd      	mov	sp, r7
20000688:	bd80      	pop	{r7, pc}
2000068a:	46c0      	nop			; (mov r8, r8)
2000068c:	40001000 	andmi	r1, r0, r0

20000690 <tim6_enable>:

void tim6_enable(){
20000690:	b580      	push	{r7, lr}
20000692:	af00      	add	r7, sp, #0
	*TIM6_CR1 |= CEN;
20000694:	4b04      	ldr	r3, [pc, #16]	; (200006a8 <tim6_enable+0x18>)
20000696:	681a      	ldr	r2, [r3, #0]
20000698:	4b03      	ldr	r3, [pc, #12]	; (200006a8 <tim6_enable+0x18>)
2000069a:	2101      	movs	r1, #1
2000069c:	430a      	orrs	r2, r1
2000069e:	601a      	str	r2, [r3, #0]
}
200006a0:	46c0      	nop			; (mov r8, r8)
200006a2:	46bd      	mov	sp, r7
200006a4:	bd80      	pop	{r7, pc}
200006a6:	46c0      	nop			; (mov r8, r8)
200006a8:	40001000 	andmi	r1, r0, r0

200006ac <gpio_init>:

void gpio_init(){
200006ac:	b580      	push	{r7, lr}
200006ae:	af00      	add	r7, sp, #0
	*SCB_VTOR = 0x2001c000;
200006b0:	4b07      	ldr	r3, [pc, #28]	; (200006d0 <gpio_init+0x24>)
200006b2:	4a08      	ldr	r2, [pc, #32]	; (200006d4 <gpio_init+0x28>)
200006b4:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER = 0x55555555;
200006b6:	4b08      	ldr	r3, [pc, #32]	; (200006d8 <gpio_init+0x2c>)
200006b8:	4a08      	ldr	r2, [pc, #32]	; (200006dc <gpio_init+0x30>)
200006ba:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
200006bc:	4b08      	ldr	r3, [pc, #32]	; (200006e0 <gpio_init+0x34>)
200006be:	2200      	movs	r2, #0
200006c0:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
200006c2:	4b08      	ldr	r3, [pc, #32]	; (200006e4 <gpio_init+0x38>)
200006c4:	2201      	movs	r2, #1
200006c6:	4252      	negs	r2, r2
200006c8:	601a      	str	r2, [r3, #0]
}
200006ca:	46c0      	nop			; (mov r8, r8)
200006cc:	46bd      	mov	sp, r7
200006ce:	bd80      	pop	{r7, pc}
200006d0:	e000ed20 	and	lr, r0, r0, lsr #26
200006d4:	2001c000 	andcs	ip, r1, r0
200006d8:	40021000 	andmi	r1, r2, r0
200006dc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200006e0:	40021004 	andmi	r1, r2, r4
200006e4:	40021008 	andmi	r1, r2, r8

200006e8 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
200006e8:	b580      	push	{r7, lr}
200006ea:	b082      	sub	sp, #8
200006ec:	af00      	add	r7, sp, #0
200006ee:	0002      	movs	r2, r0
200006f0:	1dfb      	adds	r3, r7, #7
200006f2:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
200006f4:	46c0      	nop			; (mov r8, r8)
200006f6:	4b0b      	ldr	r3, [pc, #44]	; (20000724 <print_char+0x3c>)
200006f8:	881b      	ldrh	r3, [r3, #0]
200006fa:	b29b      	uxth	r3, r3
200006fc:	001a      	movs	r2, r3
200006fe:	2380      	movs	r3, #128	; 0x80
20000700:	4013      	ands	r3, r2
20000702:	d0f8      	beq.n	200006f6 <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
20000704:	4a07      	ldr	r2, [pc, #28]	; (20000724 <print_char+0x3c>)
20000706:	1dfb      	adds	r3, r7, #7
20000708:	781b      	ldrb	r3, [r3, #0]
2000070a:	b29b      	uxth	r3, r3
2000070c:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
2000070e:	1dfb      	adds	r3, r7, #7
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	2b0a      	cmp	r3, #10
20000714:	d102      	bne.n	2000071c <print_char+0x34>
		print_char('\r');
20000716:	200d      	movs	r0, #13
20000718:	f7ff ffe6 	bl	200006e8 <print_char>
	}
}
2000071c:	46c0      	nop			; (mov r8, r8)
2000071e:	46bd      	mov	sp, r7
20000720:	b002      	add	sp, #8
20000722:	bd80      	pop	{r7, pc}
20000724:	40011000 	andmi	r1, r1, r0

20000728 <print>:

void print(char *s) {
20000728:	b580      	push	{r7, lr}
2000072a:	b082      	sub	sp, #8
2000072c:	af00      	add	r7, sp, #0
2000072e:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
20000730:	e006      	b.n	20000740 <print+0x18>
		print_char(*(s++));
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	1c5a      	adds	r2, r3, #1
20000736:	607a      	str	r2, [r7, #4]
20000738:	781b      	ldrb	r3, [r3, #0]
2000073a:	0018      	movs	r0, r3
2000073c:	f7ff ffd4 	bl	200006e8 <print_char>
	while (*s != '\0') {
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	781b      	ldrb	r3, [r3, #0]
20000744:	2b00      	cmp	r3, #0
20000746:	d1f4      	bne.n	20000732 <print+0xa>
	}
}
20000748:	46c0      	nop			; (mov r8, r8)
2000074a:	46c0      	nop			; (mov r8, r8)
2000074c:	46bd      	mov	sp, r7
2000074e:	b002      	add	sp, #8
20000750:	bd80      	pop	{r7, pc}
20000752:	46c0      	nop			; (mov r8, r8)

20000754 <delay_mili>:
#include "delay.h"

void delay_mili(unsigned int ms){
20000754:	b580      	push	{r7, lr}
20000756:	b084      	sub	sp, #16
20000758:	af00      	add	r7, sp, #0
2000075a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i< ms; i++){
2000075c:	2300      	movs	r3, #0
2000075e:	60fb      	str	r3, [r7, #12]
20000760:	e00a      	b.n	20000778 <delay_mili+0x24>
        delay_250ns();
20000762:	f000 f812 	bl	2000078a <delay_250ns>
        delay_250ns();
20000766:	f000 f810 	bl	2000078a <delay_250ns>
        delay_250ns();
2000076a:	f000 f80e 	bl	2000078a <delay_250ns>
        delay_250ns();
2000076e:	f000 f80c 	bl	2000078a <delay_250ns>
    for (int i = 0; i< ms; i++){
20000772:	68fb      	ldr	r3, [r7, #12]
20000774:	3301      	adds	r3, #1
20000776:	60fb      	str	r3, [r7, #12]
20000778:	68fb      	ldr	r3, [r7, #12]
2000077a:	687a      	ldr	r2, [r7, #4]
2000077c:	429a      	cmp	r2, r3
2000077e:	d8f0      	bhi.n	20000762 <delay_mili+0xe>
    }
}
20000780:	46c0      	nop			; (mov r8, r8)
20000782:	46c0      	nop			; (mov r8, r8)
20000784:	46bd      	mov	sp, r7
20000786:	b004      	add	sp, #16
20000788:	bd80      	pop	{r7, pc}

2000078a <delay_250ns>:


void delay_250ns(){
2000078a:	b580      	push	{r7, lr}
2000078c:	af00      	add	r7, sp, #0
	delay_125ns();
2000078e:	f000 f805 	bl	2000079c <delay_125ns>
    delay_125ns();
20000792:	f000 f803 	bl	2000079c <delay_125ns>
}
20000796:	46c0      	nop			; (mov r8, r8)
20000798:	46bd      	mov	sp, r7
2000079a:	bd80      	pop	{r7, pc}

2000079c <delay_125ns>:

void delay_125ns(){
2000079c:	b580      	push	{r7, lr}
2000079e:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
200007a0:	4b0c      	ldr	r3, [pc, #48]	; (200007d4 <delay_125ns+0x38>)
200007a2:	2200      	movs	r2, #0
200007a4:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168/8 );
200007a6:	4b0c      	ldr	r3, [pc, #48]	; (200007d8 <delay_125ns+0x3c>)
200007a8:	2215      	movs	r2, #21
200007aa:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200007ac:	4b0b      	ldr	r3, [pc, #44]	; (200007dc <delay_125ns+0x40>)
200007ae:	2200      	movs	r2, #0
200007b0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200007b2:	4b08      	ldr	r3, [pc, #32]	; (200007d4 <delay_125ns+0x38>)
200007b4:	2205      	movs	r2, #5
200007b6:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
200007b8:	46c0      	nop			; (mov r8, r8)
200007ba:	4b06      	ldr	r3, [pc, #24]	; (200007d4 <delay_125ns+0x38>)
200007bc:	681a      	ldr	r2, [r3, #0]
200007be:	2380      	movs	r3, #128	; 0x80
200007c0:	025b      	lsls	r3, r3, #9
200007c2:	4013      	ands	r3, r2
200007c4:	d0f9      	beq.n	200007ba <delay_125ns+0x1e>
	*STK_CTRL = 0;
200007c6:	4b03      	ldr	r3, [pc, #12]	; (200007d4 <delay_125ns+0x38>)
200007c8:	2200      	movs	r2, #0
200007ca:	601a      	str	r2, [r3, #0]
}
200007cc:	46c0      	nop			; (mov r8, r8)
200007ce:	46bd      	mov	sp, r7
200007d0:	bd80      	pop	{r7, pc}
200007d2:	46c0      	nop			; (mov r8, r8)
200007d4:	e000e010 	and	lr, r0, r0, lsl r0
200007d8:	e000e014 	and	lr, r0, r4, lsl r0
200007dc:	e000e018 	and	lr, r0, r8, lsl r0

200007e0 <draw_line_from_points>:
#include "startup.h"
#include "math.h"



void draw_line_from_points(int x0,int x1,int y0,int y1){
200007e0:	b580      	push	{r7, lr}
200007e2:	b08c      	sub	sp, #48	; 0x30
200007e4:	af00      	add	r7, sp, #0
200007e6:	60f8      	str	r0, [r7, #12]
200007e8:	60b9      	str	r1, [r7, #8]
200007ea:	607a      	str	r2, [r7, #4]
200007ec:	603b      	str	r3, [r7, #0]
    char steep;
    int temp;
    if(abs(y1-y0)>abs(x1-x0)){
200007ee:	683a      	ldr	r2, [r7, #0]
200007f0:	687b      	ldr	r3, [r7, #4]
200007f2:	1ad3      	subs	r3, r2, r3
200007f4:	17d9      	asrs	r1, r3, #31
200007f6:	185a      	adds	r2, r3, r1
200007f8:	404a      	eors	r2, r1
200007fa:	68b9      	ldr	r1, [r7, #8]
200007fc:	68fb      	ldr	r3, [r7, #12]
200007fe:	1acb      	subs	r3, r1, r3
20000800:	17d9      	asrs	r1, r3, #31
20000802:	185b      	adds	r3, r3, r1
20000804:	404b      	eors	r3, r1
20000806:	429a      	cmp	r2, r3
20000808:	dd04      	ble.n	20000814 <draw_line_from_points+0x34>
        steep = 1;
2000080a:	232f      	movs	r3, #47	; 0x2f
2000080c:	18fb      	adds	r3, r7, r3
2000080e:	2201      	movs	r2, #1
20000810:	701a      	strb	r2, [r3, #0]
20000812:	e003      	b.n	2000081c <draw_line_from_points+0x3c>
    }else{
        steep = 0;
20000814:	232f      	movs	r3, #47	; 0x2f
20000816:	18fb      	adds	r3, r7, r3
20000818:	2200      	movs	r2, #0
2000081a:	701a      	strb	r2, [r3, #0]
    }
    if(steep){
2000081c:	232f      	movs	r3, #47	; 0x2f
2000081e:	18fb      	adds	r3, r7, r3
20000820:	781b      	ldrb	r3, [r3, #0]
20000822:	2b00      	cmp	r3, #0
20000824:	d00b      	beq.n	2000083e <draw_line_from_points+0x5e>
        swap(x0, y0);
20000826:	68fb      	ldr	r3, [r7, #12]
20000828:	61bb      	str	r3, [r7, #24]
2000082a:	687b      	ldr	r3, [r7, #4]
2000082c:	60fb      	str	r3, [r7, #12]
2000082e:	69bb      	ldr	r3, [r7, #24]
20000830:	607b      	str	r3, [r7, #4]

        swap(x1, y1);
20000832:	68bb      	ldr	r3, [r7, #8]
20000834:	61bb      	str	r3, [r7, #24]
20000836:	683b      	ldr	r3, [r7, #0]
20000838:	60bb      	str	r3, [r7, #8]
2000083a:	69bb      	ldr	r3, [r7, #24]
2000083c:	603b      	str	r3, [r7, #0]
    }
    if(x0>x1){
2000083e:	68fa      	ldr	r2, [r7, #12]
20000840:	68bb      	ldr	r3, [r7, #8]
20000842:	429a      	cmp	r2, r3
20000844:	dd0b      	ble.n	2000085e <draw_line_from_points+0x7e>
        swap(x0,x1);
20000846:	68fb      	ldr	r3, [r7, #12]
20000848:	61bb      	str	r3, [r7, #24]
2000084a:	68bb      	ldr	r3, [r7, #8]
2000084c:	60fb      	str	r3, [r7, #12]
2000084e:	69bb      	ldr	r3, [r7, #24]
20000850:	60bb      	str	r3, [r7, #8]
       
        swap(y0,y1);
20000852:	687b      	ldr	r3, [r7, #4]
20000854:	61bb      	str	r3, [r7, #24]
20000856:	683b      	ldr	r3, [r7, #0]
20000858:	607b      	str	r3, [r7, #4]
2000085a:	69bb      	ldr	r3, [r7, #24]
2000085c:	603b      	str	r3, [r7, #0]

    }
    int deltax = x1-x0;
2000085e:	68ba      	ldr	r2, [r7, #8]
20000860:	68fb      	ldr	r3, [r7, #12]
20000862:	1ad3      	subs	r3, r2, r3
20000864:	617b      	str	r3, [r7, #20]
    int deltay = abs(y1-y0);
20000866:	683a      	ldr	r2, [r7, #0]
20000868:	687b      	ldr	r3, [r7, #4]
2000086a:	1ad3      	subs	r3, r2, r3
2000086c:	17da      	asrs	r2, r3, #31
2000086e:	189b      	adds	r3, r3, r2
20000870:	4053      	eors	r3, r2
20000872:	613b      	str	r3, [r7, #16]
    int error = 0;
20000874:	2300      	movs	r3, #0
20000876:	62bb      	str	r3, [r7, #40]	; 0x28
    int y = y0;
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep;
    if(y0 < y1){
2000087c:	687a      	ldr	r2, [r7, #4]
2000087e:	683b      	ldr	r3, [r7, #0]
20000880:	429a      	cmp	r2, r3
20000882:	da02      	bge.n	2000088a <draw_line_from_points+0xaa>
        ystep = 1;
20000884:	2301      	movs	r3, #1
20000886:	623b      	str	r3, [r7, #32]
20000888:	e002      	b.n	20000890 <draw_line_from_points+0xb0>
    }else{
        ystep = -1;
2000088a:	2301      	movs	r3, #1
2000088c:	425b      	negs	r3, r3
2000088e:	623b      	str	r3, [r7, #32]
    }
    for(int x = x0; x < x1; x++){
20000890:	68fb      	ldr	r3, [r7, #12]
20000892:	61fb      	str	r3, [r7, #28]
20000894:	e025      	b.n	200008e2 <draw_line_from_points+0x102>
        if(steep){
20000896:	232f      	movs	r3, #47	; 0x2f
20000898:	18fb      	adds	r3, r7, r3
2000089a:	781b      	ldrb	r3, [r3, #0]
2000089c:	2b00      	cmp	r3, #0
2000089e:	d006      	beq.n	200008ae <draw_line_from_points+0xce>
            graphic_pixel_set(y,x);
200008a0:	69fa      	ldr	r2, [r7, #28]
200008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200008a4:	0011      	movs	r1, r2
200008a6:	0018      	movs	r0, r3
200008a8:	f000 fd0b 	bl	200012c2 <graphic_pixel_set>
200008ac:	e005      	b.n	200008ba <draw_line_from_points+0xda>
        }else{
            graphic_pixel_set(x,y);
200008ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200008b0:	69fb      	ldr	r3, [r7, #28]
200008b2:	0011      	movs	r1, r2
200008b4:	0018      	movs	r0, r3
200008b6:	f000 fd04 	bl	200012c2 <graphic_pixel_set>
        }
        // graphic_pixel_set(x,y1);
        error = error+deltay;
200008ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
200008bc:	693b      	ldr	r3, [r7, #16]
200008be:	18d3      	adds	r3, r2, r3
200008c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if(error* 2 >= deltax){
200008c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200008c4:	005b      	lsls	r3, r3, #1
200008c6:	697a      	ldr	r2, [r7, #20]
200008c8:	429a      	cmp	r2, r3
200008ca:	dc07      	bgt.n	200008dc <draw_line_from_points+0xfc>
            y = y +ystep;
200008cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200008ce:	6a3b      	ldr	r3, [r7, #32]
200008d0:	18d3      	adds	r3, r2, r3
200008d2:	627b      	str	r3, [r7, #36]	; 0x24
            error = error-deltax;
200008d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
200008d6:	697b      	ldr	r3, [r7, #20]
200008d8:	1ad3      	subs	r3, r2, r3
200008da:	62bb      	str	r3, [r7, #40]	; 0x28
    for(int x = x0; x < x1; x++){
200008dc:	69fb      	ldr	r3, [r7, #28]
200008de:	3301      	adds	r3, #1
200008e0:	61fb      	str	r3, [r7, #28]
200008e2:	69fa      	ldr	r2, [r7, #28]
200008e4:	68bb      	ldr	r3, [r7, #8]
200008e6:	429a      	cmp	r2, r3
200008e8:	dbd5      	blt.n	20000896 <draw_line_from_points+0xb6>
        }
    }
}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	46c0      	nop			; (mov r8, r8)
200008ee:	46bd      	mov	sp, r7
200008f0:	b00c      	add	sp, #48	; 0x30
200008f2:	bd80      	pop	{r7, pc}

200008f4 <display_line>:

char display_line(LINE line){
200008f4:	b580      	push	{r7, lr}
200008f6:	b086      	sub	sp, #24
200008f8:	af00      	add	r7, sp, #0
200008fa:	1d3b      	adds	r3, r7, #4
200008fc:	6018      	str	r0, [r3, #0]
        int x0 = line.p1.x;
200008fe:	1d3b      	adds	r3, r7, #4
20000900:	781b      	ldrb	r3, [r3, #0]
20000902:	617b      	str	r3, [r7, #20]
        int x1 = line.p2.x;
20000904:	1d3b      	adds	r3, r7, #4
20000906:	789b      	ldrb	r3, [r3, #2]
20000908:	613b      	str	r3, [r7, #16]

        int y0 = line.p1.y;
2000090a:	1d3b      	adds	r3, r7, #4
2000090c:	785b      	ldrb	r3, [r3, #1]
2000090e:	60fb      	str	r3, [r7, #12]
        int y1 = line.p2.y;
20000910:	1d3b      	adds	r3, r7, #4
20000912:	78db      	ldrb	r3, [r3, #3]
20000914:	60bb      	str	r3, [r7, #8]
    if(y0<= 64 && y1 <= 64){
20000916:	68fb      	ldr	r3, [r7, #12]
20000918:	2b40      	cmp	r3, #64	; 0x40
2000091a:	dc0a      	bgt.n	20000932 <display_line+0x3e>
2000091c:	68bb      	ldr	r3, [r7, #8]
2000091e:	2b40      	cmp	r3, #64	; 0x40
20000920:	dc07      	bgt.n	20000932 <display_line+0x3e>
        draw_line_from_points(x0,x1, y0, y1);
20000922:	68bb      	ldr	r3, [r7, #8]
20000924:	68fa      	ldr	r2, [r7, #12]
20000926:	6939      	ldr	r1, [r7, #16]
20000928:	6978      	ldr	r0, [r7, #20]
2000092a:	f7ff ff59 	bl	200007e0 <draw_line_from_points>
        return 1;
2000092e:	2301      	movs	r3, #1
20000930:	e000      	b.n	20000934 <display_line+0x40>
    }
    return 0;    
20000932:	2300      	movs	r3, #0
}
20000934:	0018      	movs	r0, r3
20000936:	46bd      	mov	sp, r7
20000938:	b006      	add	sp, #24
2000093a:	bd80      	pop	{r7, pc}

2000093c <plot_rect>:


char plot_rect(RECT rect){
2000093c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000093e:	b087      	sub	sp, #28
20000940:	af00      	add	r7, sp, #0
20000942:	1d3b      	adds	r3, r7, #4
20000944:	6018      	str	r0, [r3, #0]
    POINT start;
    POINT end;
    POINT point = rect.p;
20000946:	240c      	movs	r4, #12
20000948:	193b      	adds	r3, r7, r4
2000094a:	1d3a      	adds	r2, r7, #4
2000094c:	8812      	ldrh	r2, [r2, #0]
2000094e:	801a      	strh	r2, [r3, #0]
    char x = rect.x;
20000950:	2017      	movs	r0, #23
20000952:	183b      	adds	r3, r7, r0
20000954:	1d3a      	adds	r2, r7, #4
20000956:	7892      	ldrb	r2, [r2, #2]
20000958:	701a      	strb	r2, [r3, #0]
    char y = rect.y;
2000095a:	2516      	movs	r5, #22
2000095c:	197b      	adds	r3, r7, r5
2000095e:	1d3a      	adds	r2, r7, #4
20000960:	78d2      	ldrb	r2, [r2, #3]
20000962:	701a      	strb	r2, [r3, #0]
    LINE line;
    
    start.x = point.x; start.y = point.y; end.x = point.x + x; end.y = point.y ; line.p1 = start; line.p2 = end; display_line(line);
20000964:	193b      	adds	r3, r7, r4
20000966:	781a      	ldrb	r2, [r3, #0]
20000968:	2114      	movs	r1, #20
2000096a:	187b      	adds	r3, r7, r1
2000096c:	701a      	strb	r2, [r3, #0]
2000096e:	193b      	adds	r3, r7, r4
20000970:	785a      	ldrb	r2, [r3, #1]
20000972:	187b      	adds	r3, r7, r1
20000974:	705a      	strb	r2, [r3, #1]
20000976:	193b      	adds	r3, r7, r4
20000978:	781a      	ldrb	r2, [r3, #0]
2000097a:	183b      	adds	r3, r7, r0
2000097c:	781b      	ldrb	r3, [r3, #0]
2000097e:	18d3      	adds	r3, r2, r3
20000980:	b2da      	uxtb	r2, r3
20000982:	2610      	movs	r6, #16
20000984:	19bb      	adds	r3, r7, r6
20000986:	701a      	strb	r2, [r3, #0]
20000988:	193b      	adds	r3, r7, r4
2000098a:	785a      	ldrb	r2, [r3, #1]
2000098c:	19bb      	adds	r3, r7, r6
2000098e:	705a      	strb	r2, [r3, #1]
20000990:	2008      	movs	r0, #8
20000992:	183b      	adds	r3, r7, r0
20000994:	000d      	movs	r5, r1
20000996:	187a      	adds	r2, r7, r1
20000998:	8812      	ldrh	r2, [r2, #0]
2000099a:	801a      	strh	r2, [r3, #0]
2000099c:	183b      	adds	r3, r7, r0
2000099e:	2102      	movs	r1, #2
200009a0:	19ba      	adds	r2, r7, r6
200009a2:	8812      	ldrh	r2, [r2, #0]
200009a4:	525a      	strh	r2, [r3, r1]
200009a6:	183b      	adds	r3, r7, r0
200009a8:	6818      	ldr	r0, [r3, #0]
200009aa:	f7ff ffa3 	bl	200008f4 <display_line>
    start.x = point.x + x; start.y = point.y; end.x = start.x; end.y = point.y + y; line.p1 = start; line.p2 = end; display_line(line);
200009ae:	193b      	adds	r3, r7, r4
200009b0:	781a      	ldrb	r2, [r3, #0]
200009b2:	2317      	movs	r3, #23
200009b4:	18fb      	adds	r3, r7, r3
200009b6:	781b      	ldrb	r3, [r3, #0]
200009b8:	18d3      	adds	r3, r2, r3
200009ba:	b2da      	uxtb	r2, r3
200009bc:	197b      	adds	r3, r7, r5
200009be:	701a      	strb	r2, [r3, #0]
200009c0:	193b      	adds	r3, r7, r4
200009c2:	785a      	ldrb	r2, [r3, #1]
200009c4:	197b      	adds	r3, r7, r5
200009c6:	705a      	strb	r2, [r3, #1]
200009c8:	0029      	movs	r1, r5
200009ca:	197b      	adds	r3, r7, r5
200009cc:	781a      	ldrb	r2, [r3, #0]
200009ce:	19bb      	adds	r3, r7, r6
200009d0:	701a      	strb	r2, [r3, #0]
200009d2:	193b      	adds	r3, r7, r4
200009d4:	785a      	ldrb	r2, [r3, #1]
200009d6:	2516      	movs	r5, #22
200009d8:	197b      	adds	r3, r7, r5
200009da:	781b      	ldrb	r3, [r3, #0]
200009dc:	18d3      	adds	r3, r2, r3
200009de:	b2da      	uxtb	r2, r3
200009e0:	19bb      	adds	r3, r7, r6
200009e2:	705a      	strb	r2, [r3, #1]
200009e4:	2008      	movs	r0, #8
200009e6:	183b      	adds	r3, r7, r0
200009e8:	000d      	movs	r5, r1
200009ea:	187a      	adds	r2, r7, r1
200009ec:	8812      	ldrh	r2, [r2, #0]
200009ee:	801a      	strh	r2, [r3, #0]
200009f0:	183b      	adds	r3, r7, r0
200009f2:	2102      	movs	r1, #2
200009f4:	19ba      	adds	r2, r7, r6
200009f6:	8812      	ldrh	r2, [r2, #0]
200009f8:	525a      	strh	r2, [r3, r1]
200009fa:	183b      	adds	r3, r7, r0
200009fc:	6818      	ldr	r0, [r3, #0]
200009fe:	f7ff ff79 	bl	200008f4 <display_line>
    start.x = point.x + x; start.y = point.y+y; end.x = point.x; end.y = point.y + y; line.p1 = start; line.p2 = end; display_line(line );
20000a02:	193b      	adds	r3, r7, r4
20000a04:	781a      	ldrb	r2, [r3, #0]
20000a06:	2317      	movs	r3, #23
20000a08:	18fb      	adds	r3, r7, r3
20000a0a:	781b      	ldrb	r3, [r3, #0]
20000a0c:	18d3      	adds	r3, r2, r3
20000a0e:	b2da      	uxtb	r2, r3
20000a10:	0029      	movs	r1, r5
20000a12:	187b      	adds	r3, r7, r1
20000a14:	701a      	strb	r2, [r3, #0]
20000a16:	193b      	adds	r3, r7, r4
20000a18:	785a      	ldrb	r2, [r3, #1]
20000a1a:	2516      	movs	r5, #22
20000a1c:	197b      	adds	r3, r7, r5
20000a1e:	781b      	ldrb	r3, [r3, #0]
20000a20:	18d3      	adds	r3, r2, r3
20000a22:	b2da      	uxtb	r2, r3
20000a24:	187b      	adds	r3, r7, r1
20000a26:	705a      	strb	r2, [r3, #1]
20000a28:	193b      	adds	r3, r7, r4
20000a2a:	781a      	ldrb	r2, [r3, #0]
20000a2c:	19bb      	adds	r3, r7, r6
20000a2e:	701a      	strb	r2, [r3, #0]
20000a30:	193b      	adds	r3, r7, r4
20000a32:	785a      	ldrb	r2, [r3, #1]
20000a34:	197b      	adds	r3, r7, r5
20000a36:	781b      	ldrb	r3, [r3, #0]
20000a38:	18d3      	adds	r3, r2, r3
20000a3a:	b2da      	uxtb	r2, r3
20000a3c:	19bb      	adds	r3, r7, r6
20000a3e:	705a      	strb	r2, [r3, #1]
20000a40:	2008      	movs	r0, #8
20000a42:	183b      	adds	r3, r7, r0
20000a44:	000d      	movs	r5, r1
20000a46:	187a      	adds	r2, r7, r1
20000a48:	8812      	ldrh	r2, [r2, #0]
20000a4a:	801a      	strh	r2, [r3, #0]
20000a4c:	183b      	adds	r3, r7, r0
20000a4e:	2102      	movs	r1, #2
20000a50:	19ba      	adds	r2, r7, r6
20000a52:	8812      	ldrh	r2, [r2, #0]
20000a54:	525a      	strh	r2, [r3, r1]
20000a56:	183b      	adds	r3, r7, r0
20000a58:	6818      	ldr	r0, [r3, #0]
20000a5a:	f7ff ff4b 	bl	200008f4 <display_line>
    return start.x = point.x ; start.y = point.y+y; end.x = point.x; end.y = point.y; line.p1 = start; line.p2 = end; display_line(line);
20000a5e:	193b      	adds	r3, r7, r4
20000a60:	781a      	ldrb	r2, [r3, #0]
20000a62:	197b      	adds	r3, r7, r5
20000a64:	701a      	strb	r2, [r3, #0]
20000a66:	197b      	adds	r3, r7, r5
20000a68:	781b      	ldrb	r3, [r3, #0]
}
20000a6a:	0018      	movs	r0, r3
20000a6c:	46bd      	mov	sp, r7
20000a6e:	b007      	add	sp, #28
20000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000a72 <plot_polygon>:

char plot_polygon(POLYPOINT polygon1){
20000a72:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a74:	b087      	sub	sp, #28
20000a76:	af00      	add	r7, sp, #0
20000a78:	003b      	movs	r3, r7
20000a7a:	6018      	str	r0, [r3, #0]
20000a7c:	6059      	str	r1, [r3, #4]
    POINT p0;
    POINT p1;
    p0.x = polygon1.x; p0.y = polygon1.y;
20000a7e:	003b      	movs	r3, r7
20000a80:	781a      	ldrb	r2, [r3, #0]
20000a82:	2110      	movs	r1, #16
20000a84:	187b      	adds	r3, r7, r1
20000a86:	701a      	strb	r2, [r3, #0]
20000a88:	003b      	movs	r3, r7
20000a8a:	785a      	ldrb	r2, [r3, #1]
20000a8c:	187b      	adds	r3, r7, r1
20000a8e:	705a      	strb	r2, [r3, #1]
    struct polygonpoint *ptr = polygon1.next;
20000a90:	003b      	movs	r3, r7
20000a92:	685b      	ldr	r3, [r3, #4]
20000a94:	617b      	str	r3, [r7, #20]
    while(ptr != 0){
20000a96:	e024      	b.n	20000ae2 <plot_polygon+0x70>
        p1.x =   ptr->x;
20000a98:	697b      	ldr	r3, [r7, #20]
20000a9a:	781a      	ldrb	r2, [r3, #0]
20000a9c:	200c      	movs	r0, #12
20000a9e:	183b      	adds	r3, r7, r0
20000aa0:	701a      	strb	r2, [r3, #0]
        p1.y = ptr->y;
20000aa2:	697b      	ldr	r3, [r7, #20]
20000aa4:	785a      	ldrb	r2, [r3, #1]
20000aa6:	183b      	adds	r3, r7, r0
20000aa8:	705a      	strb	r2, [r3, #1]
        LINE line =  {p0,p1};
20000aaa:	2508      	movs	r5, #8
20000aac:	197b      	adds	r3, r7, r5
20000aae:	2610      	movs	r6, #16
20000ab0:	19ba      	adds	r2, r7, r6
20000ab2:	8812      	ldrh	r2, [r2, #0]
20000ab4:	801a      	strh	r2, [r3, #0]
20000ab6:	197b      	adds	r3, r7, r5
20000ab8:	2102      	movs	r1, #2
20000aba:	0004      	movs	r4, r0
20000abc:	183a      	adds	r2, r7, r0
20000abe:	8812      	ldrh	r2, [r2, #0]
20000ac0:	525a      	strh	r2, [r3, r1]
        display_line(line);
20000ac2:	197b      	adds	r3, r7, r5
20000ac4:	6818      	ldr	r0, [r3, #0]
20000ac6:	f7ff ff15 	bl	200008f4 <display_line>
        p0.x = p1.x;
20000aca:	0020      	movs	r0, r4
20000acc:	183b      	adds	r3, r7, r0
20000ace:	781a      	ldrb	r2, [r3, #0]
20000ad0:	19bb      	adds	r3, r7, r6
20000ad2:	701a      	strb	r2, [r3, #0]
        p0.y = p1.y;
20000ad4:	183b      	adds	r3, r7, r0
20000ad6:	785a      	ldrb	r2, [r3, #1]
20000ad8:	19bb      	adds	r3, r7, r6
20000ada:	705a      	strb	r2, [r3, #1]
        ptr = ptr->next;
20000adc:	697b      	ldr	r3, [r7, #20]
20000ade:	685b      	ldr	r3, [r3, #4]
20000ae0:	617b      	str	r3, [r7, #20]
    while(ptr != 0){
20000ae2:	697b      	ldr	r3, [r7, #20]
20000ae4:	2b00      	cmp	r3, #0
20000ae6:	d1d7      	bne.n	20000a98 <plot_polygon+0x26>

    }
    return 1;
20000ae8:	2301      	movs	r3, #1


}
20000aea:	0018      	movs	r0, r3
20000aec:	46bd      	mov	sp, r7
20000aee:	b007      	add	sp, #28
20000af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000af4 <activateRow>:





void activateRow(int row){
20000af4:	b580      	push	{r7, lr}
20000af6:	b082      	sub	sp, #8
20000af8:	af00      	add	r7, sp, #0
20000afa:	6078      	str	r0, [r7, #4]

    switch (row) {
20000afc:	687b      	ldr	r3, [r7, #4]
20000afe:	2b04      	cmp	r3, #4
20000b00:	d01b      	beq.n	20000b3a <activateRow+0x46>
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	2b04      	cmp	r3, #4
20000b06:	dc1c      	bgt.n	20000b42 <activateRow+0x4e>
20000b08:	687b      	ldr	r3, [r7, #4]
20000b0a:	2b03      	cmp	r3, #3
20000b0c:	d011      	beq.n	20000b32 <activateRow+0x3e>
20000b0e:	687b      	ldr	r3, [r7, #4]
20000b10:	2b03      	cmp	r3, #3
20000b12:	dc16      	bgt.n	20000b42 <activateRow+0x4e>
20000b14:	687b      	ldr	r3, [r7, #4]
20000b16:	2b01      	cmp	r3, #1
20000b18:	d003      	beq.n	20000b22 <activateRow+0x2e>
20000b1a:	687b      	ldr	r3, [r7, #4]
20000b1c:	2b02      	cmp	r3, #2
20000b1e:	d004      	beq.n	20000b2a <activateRow+0x36>
20000b20:	e00f      	b.n	20000b42 <activateRow+0x4e>
        case 1: *GPIO_D_ODR_HIGH= 0x10; break;
20000b22:	4b0c      	ldr	r3, [pc, #48]	; (20000b54 <activateRow+0x60>)
20000b24:	2210      	movs	r2, #16
20000b26:	701a      	strb	r2, [r3, #0]
20000b28:	e00f      	b.n	20000b4a <activateRow+0x56>
        case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000b2a:	4b0a      	ldr	r3, [pc, #40]	; (20000b54 <activateRow+0x60>)
20000b2c:	2220      	movs	r2, #32
20000b2e:	701a      	strb	r2, [r3, #0]
20000b30:	e00b      	b.n	20000b4a <activateRow+0x56>
        case 3: *GPIO_D_ODR_HIGH= 0x40; break;
20000b32:	4b08      	ldr	r3, [pc, #32]	; (20000b54 <activateRow+0x60>)
20000b34:	2240      	movs	r2, #64	; 0x40
20000b36:	701a      	strb	r2, [r3, #0]
20000b38:	e007      	b.n	20000b4a <activateRow+0x56>
        case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000b3a:	4b06      	ldr	r3, [pc, #24]	; (20000b54 <activateRow+0x60>)
20000b3c:	2280      	movs	r2, #128	; 0x80
20000b3e:	701a      	strb	r2, [r3, #0]
20000b40:	e003      	b.n	20000b4a <activateRow+0x56>
        default: *GPIO_D_ODR_HIGH = 0; break;
20000b42:	4b04      	ldr	r3, [pc, #16]	; (20000b54 <activateRow+0x60>)
20000b44:	2200      	movs	r2, #0
20000b46:	701a      	strb	r2, [r3, #0]
20000b48:	46c0      	nop			; (mov r8, r8)

 }
}
20000b4a:	46c0      	nop			; (mov r8, r8)
20000b4c:	46bd      	mov	sp, r7
20000b4e:	b002      	add	sp, #8
20000b50:	bd80      	pop	{r7, pc}
20000b52:	46c0      	nop			; (mov r8, r8)
20000b54:	40020c15 	andmi	r0, r2, r5, lsl ip

20000b58 <readColumn>:

int  readColumn(void){
20000b58:	b580      	push	{r7, lr}
20000b5a:	b082      	sub	sp, #8
20000b5c:	af00      	add	r7, sp, #0

	*GPIO_D_MODER = 0x55005555;
20000b5e:	4b14      	ldr	r3, [pc, #80]	; (20000bb0 <readColumn+0x58>)
20000b60:	4a14      	ldr	r2, [pc, #80]	; (20000bb4 <readColumn+0x5c>)
20000b62:	601a      	str	r2, [r3, #0]
    char c =  *GPIO_D_IDR_HIGH;
20000b64:	4a14      	ldr	r2, [pc, #80]	; (20000bb8 <readColumn+0x60>)
20000b66:	1dfb      	adds	r3, r7, #7
20000b68:	7812      	ldrb	r2, [r2, #0]
20000b6a:	701a      	strb	r2, [r3, #0]
    if(c & 8){
20000b6c:	1dfb      	adds	r3, r7, #7
20000b6e:	781b      	ldrb	r3, [r3, #0]
20000b70:	2208      	movs	r2, #8
20000b72:	4013      	ands	r3, r2
20000b74:	d001      	beq.n	20000b7a <readColumn+0x22>
        return 4;
20000b76:	2304      	movs	r3, #4
20000b78:	e015      	b.n	20000ba6 <readColumn+0x4e>
    }
    if(c & 4){
20000b7a:	1dfb      	adds	r3, r7, #7
20000b7c:	781b      	ldrb	r3, [r3, #0]
20000b7e:	2204      	movs	r2, #4
20000b80:	4013      	ands	r3, r2
20000b82:	d001      	beq.n	20000b88 <readColumn+0x30>
        return 3;
20000b84:	2303      	movs	r3, #3
20000b86:	e00e      	b.n	20000ba6 <readColumn+0x4e>
    }
    if(c & 2){
20000b88:	1dfb      	adds	r3, r7, #7
20000b8a:	781b      	ldrb	r3, [r3, #0]
20000b8c:	2202      	movs	r2, #2
20000b8e:	4013      	ands	r3, r2
20000b90:	d001      	beq.n	20000b96 <readColumn+0x3e>
        return 2;
20000b92:	2302      	movs	r3, #2
20000b94:	e007      	b.n	20000ba6 <readColumn+0x4e>
    }
    if(c & 1){
20000b96:	1dfb      	adds	r3, r7, #7
20000b98:	781b      	ldrb	r3, [r3, #0]
20000b9a:	2201      	movs	r2, #1
20000b9c:	4013      	ands	r3, r2
20000b9e:	d001      	beq.n	20000ba4 <readColumn+0x4c>
        return 1;
20000ba0:	2301      	movs	r3, #1
20000ba2:	e000      	b.n	20000ba6 <readColumn+0x4e>
    }
    return 0;
20000ba4:	2300      	movs	r3, #0
}
20000ba6:	0018      	movs	r0, r3
20000ba8:	46bd      	mov	sp, r7
20000baa:	b002      	add	sp, #8
20000bac:	bd80      	pop	{r7, pc}
20000bae:	46c0      	nop			; (mov r8, r8)
20000bb0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000bb4:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000bb8:	40020c11 	andmi	r0, r2, r1, lsl ip

20000bbc <initKeyb>:

void initKeyb(void){
20000bbc:	b580      	push	{r7, lr}
20000bbe:	af00      	add	r7, sp, #0
        //init init pupd 
       
        *GPIO_D_PUPDR = 0x00AA0000;
20000bc0:	4b09      	ldr	r3, [pc, #36]	; (20000be8 <initKeyb+0x2c>)
20000bc2:	22aa      	movs	r2, #170	; 0xaa
20000bc4:	0412      	lsls	r2, r2, #16
20000bc6:	601a      	str	r2, [r3, #0]
        // sets otr
       
        *GPIO_D_OTYPER = 0x0;
20000bc8:	4b08      	ldr	r3, [pc, #32]	; (20000bec <initKeyb+0x30>)
20000bca:	2200      	movs	r2, #0
20000bcc:	801a      	strh	r2, [r3, #0]
        
        *GPIO_D_OSPEEDR = 0xffffffff;
20000bce:	4b08      	ldr	r3, [pc, #32]	; (20000bf0 <initKeyb+0x34>)
20000bd0:	2201      	movs	r2, #1
20000bd2:	4252      	negs	r2, r2
20000bd4:	601a      	str	r2, [r3, #0]

            //starts clocks for debug board
    *((unsigned long *) 0x40023830) = 0x18;
20000bd6:	4b07      	ldr	r3, [pc, #28]	; (20000bf4 <initKeyb+0x38>)
20000bd8:	2218      	movs	r2, #24
20000bda:	601a      	str	r2, [r3, #0]
    
	*GPIO_D_MODER = 0x55005555;
20000bdc:	4b06      	ldr	r3, [pc, #24]	; (20000bf8 <initKeyb+0x3c>)
20000bde:	4a07      	ldr	r2, [pc, #28]	; (20000bfc <initKeyb+0x40>)
20000be0:	601a      	str	r2, [r3, #0]
}
20000be2:	46c0      	nop			; (mov r8, r8)
20000be4:	46bd      	mov	sp, r7
20000be6:	bd80      	pop	{r7, pc}
20000be8:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000bec:	40020c04 	andmi	r0, r2, r4, lsl #24
20000bf0:	40020c08 	andmi	r0, r2, r8, lsl #24
20000bf4:	40023830 	andmi	r3, r2, r0, lsr r8
20000bf8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000bfc:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000c00 <return_pressed_key>:
unsigned char return_pressed_key(void)
{
20000c00:	b590      	push	{r4, r7, lr}
20000c02:	b089      	sub	sp, #36	; 0x24
20000c04:	af00      	add	r7, sp, #0

    int temp = *GPIO_D_MODER;
20000c06:	4b1a      	ldr	r3, [pc, #104]	; (20000c70 <return_pressed_key+0x70>)
20000c08:	681b      	ldr	r3, [r3, #0]
20000c0a:	61bb      	str	r3, [r7, #24]

    initKeyb();
20000c0c:	f7ff ffd6 	bl	20000bbc <initKeyb>
    char key[] = 
20000c10:	1d3b      	adds	r3, r7, #4
20000c12:	4a18      	ldr	r2, [pc, #96]	; (20000c74 <return_pressed_key+0x74>)
20000c14:	ca13      	ldmia	r2!, {r0, r1, r4}
20000c16:	c313      	stmia	r3!, {r0, r1, r4}
20000c18:	6812      	ldr	r2, [r2, #0]
20000c1a:	601a      	str	r2, [r3, #0]
    {1,2,3,0xa,4,5,6,0xb,7,8,9,0xc,0xe,0,0xf,0xd};
    int column;
    for (int row = 1 ; row <= 4; row++){
20000c1c:	2301      	movs	r3, #1
20000c1e:	61fb      	str	r3, [r7, #28]
20000c20:	e01a      	b.n	20000c58 <return_pressed_key+0x58>
        activateRow(row);
20000c22:	69fb      	ldr	r3, [r7, #28]
20000c24:	0018      	movs	r0, r3
20000c26:	f7ff ff65 	bl	20000af4 <activateRow>
        column = readColumn();
20000c2a:	f7ff ff95 	bl	20000b58 <readColumn>
20000c2e:	0003      	movs	r3, r0
20000c30:	617b      	str	r3, [r7, #20]
        if (column != 0){
20000c32:	697b      	ldr	r3, [r7, #20]
20000c34:	2b00      	cmp	r3, #0
20000c36:	d00c      	beq.n	20000c52 <return_pressed_key+0x52>
            activateRow(600000000);
20000c38:	4b0f      	ldr	r3, [pc, #60]	; (20000c78 <return_pressed_key+0x78>)
20000c3a:	0018      	movs	r0, r3
20000c3c:	f7ff ff5a 	bl	20000af4 <activateRow>
            return key [4*(row-1)+(column-1)];
20000c40:	69fb      	ldr	r3, [r7, #28]
20000c42:	3b01      	subs	r3, #1
20000c44:	009a      	lsls	r2, r3, #2
20000c46:	697b      	ldr	r3, [r7, #20]
20000c48:	3b01      	subs	r3, #1
20000c4a:	18d3      	adds	r3, r2, r3
20000c4c:	1d3a      	adds	r2, r7, #4
20000c4e:	5cd3      	ldrb	r3, [r2, r3]
20000c50:	e009      	b.n	20000c66 <return_pressed_key+0x66>
    for (int row = 1 ; row <= 4; row++){
20000c52:	69fb      	ldr	r3, [r7, #28]
20000c54:	3301      	adds	r3, #1
20000c56:	61fb      	str	r3, [r7, #28]
20000c58:	69fb      	ldr	r3, [r7, #28]
20000c5a:	2b04      	cmp	r3, #4
20000c5c:	dde1      	ble.n	20000c22 <return_pressed_key+0x22>
        }
    }

    *GPIO_D_MODER = temp;
20000c5e:	4b04      	ldr	r3, [pc, #16]	; (20000c70 <return_pressed_key+0x70>)
20000c60:	69ba      	ldr	r2, [r7, #24]
20000c62:	601a      	str	r2, [r3, #0]
    return  0xFF; 
20000c64:	23ff      	movs	r3, #255	; 0xff
}
20000c66:	0018      	movs	r0, r3
20000c68:	46bd      	mov	sp, r7
20000c6a:	b009      	add	sp, #36	; 0x24
20000c6c:	bd90      	pop	{r4, r7, pc}
20000c6e:	46c0      	nop			; (mov r8, r8)
20000c70:	40020c00 	andmi	r0, r2, r0, lsl #24
20000c74:	20001394 	mulcs	r0, r4, r3
20000c78:	23c34600 	biccs	r4, r3, #0, 12

20000c7c <out7seg>:




void out7seg( unsigned char c){
20000c7c:	b5b0      	push	{r4, r5, r7, lr}
20000c7e:	b086      	sub	sp, #24
20000c80:	af00      	add	r7, sp, #0
20000c82:	0002      	movs	r2, r0
20000c84:	1dfb      	adds	r3, r7, #7
20000c86:	701a      	strb	r2, [r3, #0]
    // siiIIick table for convertiong to 7 segment codes
    char outputTable[] = {
20000c88:	2008      	movs	r0, #8
20000c8a:	183b      	adds	r3, r7, r0
20000c8c:	4a0b      	ldr	r2, [pc, #44]	; (20000cbc <out7seg+0x40>)
20000c8e:	ca32      	ldmia	r2!, {r1, r4, r5}
20000c90:	c332      	stmia	r3!, {r1, r4, r5}
20000c92:	6812      	ldr	r2, [r2, #0]
20000c94:	601a      	str	r2, [r3, #0]
	0x7C, 
	0x39, 
    0x5E, 
    0x7E, 
    0x21};
 if(c < 15){
20000c96:	1dfb      	adds	r3, r7, #7
20000c98:	781b      	ldrb	r3, [r3, #0]
20000c9a:	2b0e      	cmp	r3, #14
20000c9c:	d806      	bhi.n	20000cac <out7seg+0x30>
    *GPIO_D_ODR_LOW = outputTable[c];
20000c9e:	1dfb      	adds	r3, r7, #7
20000ca0:	781b      	ldrb	r3, [r3, #0]
20000ca2:	4907      	ldr	r1, [pc, #28]	; (20000cc0 <out7seg+0x44>)
20000ca4:	183a      	adds	r2, r7, r0
20000ca6:	5cd3      	ldrb	r3, [r2, r3]
20000ca8:	700b      	strb	r3, [r1, #0]
 }
 else{ 
    *GPIO_D_ODR_LOW = 0;
 }
}
20000caa:	e002      	b.n	20000cb2 <out7seg+0x36>
    *GPIO_D_ODR_LOW = 0;
20000cac:	4b04      	ldr	r3, [pc, #16]	; (20000cc0 <out7seg+0x44>)
20000cae:	2200      	movs	r2, #0
20000cb0:	701a      	strb	r2, [r3, #0]
}
20000cb2:	46c0      	nop			; (mov r8, r8)
20000cb4:	46bd      	mov	sp, r7
20000cb6:	b006      	add	sp, #24
20000cb8:	bdb0      	pop	{r4, r5, r7, pc}
20000cba:	46c0      	nop			; (mov r8, r8)
20000cbc:	200013a4 	andcs	r1, r0, r4, lsr #7
20000cc0:	40020c14 	andmi	r0, r2, r4, lsl ip

20000cc4 <timer6_interrupt>:
#include "math.h"'
#include "main.h"
int main();


void timer6_interrupt(){
20000cc4:	b580      	push	{r7, lr}
20000cc6:	af00      	add	r7, sp, #0
	*TIM6_SR &= ~UIF;
20000cc8:	4b22      	ldr	r3, [pc, #136]	; (20000d54 <timer6_interrupt+0x90>)
20000cca:	681a      	ldr	r2, [r3, #0]
20000ccc:	4b21      	ldr	r3, [pc, #132]	; (20000d54 <timer6_interrupt+0x90>)
20000cce:	2101      	movs	r1, #1
20000cd0:	438a      	bics	r2, r1
20000cd2:	601a      	str	r2, [r3, #0]
	time.seconds++;
20000cd4:	4b20      	ldr	r3, [pc, #128]	; (20000d58 <timer6_interrupt+0x94>)
20000cd6:	681b      	ldr	r3, [r3, #0]
20000cd8:	1c5a      	adds	r2, r3, #1
20000cda:	4b1f      	ldr	r3, [pc, #124]	; (20000d58 <timer6_interrupt+0x94>)
20000cdc:	601a      	str	r2, [r3, #0]
	if (time.seconds > 9){
20000cde:	4b1e      	ldr	r3, [pc, #120]	; (20000d58 <timer6_interrupt+0x94>)
20000ce0:	681b      	ldr	r3, [r3, #0]
20000ce2:	2b09      	cmp	r3, #9
20000ce4:	dd07      	ble.n	20000cf6 <timer6_interrupt+0x32>
		time.ten_seconds++;
20000ce6:	4b1c      	ldr	r3, [pc, #112]	; (20000d58 <timer6_interrupt+0x94>)
20000ce8:	685b      	ldr	r3, [r3, #4]
20000cea:	1c5a      	adds	r2, r3, #1
20000cec:	4b1a      	ldr	r3, [pc, #104]	; (20000d58 <timer6_interrupt+0x94>)
20000cee:	605a      	str	r2, [r3, #4]
		time.seconds = 0;
20000cf0:	4b19      	ldr	r3, [pc, #100]	; (20000d58 <timer6_interrupt+0x94>)
20000cf2:	2200      	movs	r2, #0
20000cf4:	601a      	str	r2, [r3, #0]
	}
	if (time.ten_seconds > 5){
20000cf6:	4b18      	ldr	r3, [pc, #96]	; (20000d58 <timer6_interrupt+0x94>)
20000cf8:	685b      	ldr	r3, [r3, #4]
20000cfa:	2b05      	cmp	r3, #5
20000cfc:	dd04      	ble.n	20000d08 <timer6_interrupt+0x44>
		time.minutes++;
20000cfe:	4b16      	ldr	r3, [pc, #88]	; (20000d58 <timer6_interrupt+0x94>)
20000d00:	689b      	ldr	r3, [r3, #8]
20000d02:	1c5a      	adds	r2, r3, #1
20000d04:	4b14      	ldr	r3, [pc, #80]	; (20000d58 <timer6_interrupt+0x94>)
20000d06:	609a      	str	r2, [r3, #8]
	}
	ascii_clear_screen();
20000d08:	f7ff faad 	bl	20000266 <ascii_clear_screen>
	
	print_scores();
20000d0c:	f000 f8c0 	bl	20000e90 <print_scores>
	ascii_gotoxy(10,1);
20000d10:	2101      	movs	r1, #1
20000d12:	200a      	movs	r0, #10
20000d14:	f7ff faaf 	bl	20000276 <ascii_gotoxy>
	ascii_write_char(48 + time.minutes);
20000d18:	4b0f      	ldr	r3, [pc, #60]	; (20000d58 <timer6_interrupt+0x94>)
20000d1a:	689b      	ldr	r3, [r3, #8]
20000d1c:	b2db      	uxtb	r3, r3
20000d1e:	3330      	adds	r3, #48	; 0x30
20000d20:	b2db      	uxtb	r3, r3
20000d22:	0018      	movs	r0, r3
20000d24:	f7ff fa73 	bl	2000020e <ascii_write_char>
	ascii_write_char(58);
20000d28:	203a      	movs	r0, #58	; 0x3a
20000d2a:	f7ff fa70 	bl	2000020e <ascii_write_char>
	ascii_write_char(48 + time.ten_seconds);
20000d2e:	4b0a      	ldr	r3, [pc, #40]	; (20000d58 <timer6_interrupt+0x94>)
20000d30:	685b      	ldr	r3, [r3, #4]
20000d32:	b2db      	uxtb	r3, r3
20000d34:	3330      	adds	r3, #48	; 0x30
20000d36:	b2db      	uxtb	r3, r3
20000d38:	0018      	movs	r0, r3
20000d3a:	f7ff fa68 	bl	2000020e <ascii_write_char>
	ascii_write_char(48 + time.seconds);
20000d3e:	4b06      	ldr	r3, [pc, #24]	; (20000d58 <timer6_interrupt+0x94>)
20000d40:	681b      	ldr	r3, [r3, #0]
20000d42:	b2db      	uxtb	r3, r3
20000d44:	3330      	adds	r3, #48	; 0x30
20000d46:	b2db      	uxtb	r3, r3
20000d48:	0018      	movs	r0, r3
20000d4a:	f7ff fa60 	bl	2000020e <ascii_write_char>
}
20000d4e:	46c0      	nop			; (mov r8, r8)
20000d50:	46bd      	mov	sp, r7
20000d52:	bd80      	pop	{r7, pc}
20000d54:	40001010 	andmi	r1, r0, r0, lsl r0
20000d58:	200012ec 	andcs	r1, r0, ip, ror #5

20000d5c <collision>:
char points_player2 = 0;
char winning_score = 5;
char* winner_name;
// char timer_flag = 0;

char collision(POBJECT object1, POBJECT object2){
20000d5c:	b084      	sub	sp, #16
20000d5e:	b5b0      	push	{r4, r5, r7, lr}
20000d60:	b082      	sub	sp, #8
20000d62:	af00      	add	r7, sp, #0
20000d64:	2518      	movs	r5, #24
20000d66:	197c      	adds	r4, r7, r5
20000d68:	6020      	str	r0, [r4, #0]
20000d6a:	6061      	str	r1, [r4, #4]
20000d6c:	60a2      	str	r2, [r4, #8]
20000d6e:	60e3      	str	r3, [r4, #12]
	int deltax = abs(object1.posx - object2.posx);
20000d70:	0029      	movs	r1, r5
20000d72:	187b      	adds	r3, r7, r1
20000d74:	68da      	ldr	r2, [r3, #12]
20000d76:	2324      	movs	r3, #36	; 0x24
20000d78:	185b      	adds	r3, r3, r1
20000d7a:	19db      	adds	r3, r3, r7
20000d7c:	68db      	ldr	r3, [r3, #12]
20000d7e:	1ad3      	subs	r3, r2, r3
20000d80:	17da      	asrs	r2, r3, #31
20000d82:	189b      	adds	r3, r3, r2
20000d84:	4053      	eors	r3, r2
20000d86:	607b      	str	r3, [r7, #4]
	int deltay = abs(object1.posy - object2.posy);
20000d88:	187b      	adds	r3, r7, r1
20000d8a:	691a      	ldr	r2, [r3, #16]
20000d8c:	2324      	movs	r3, #36	; 0x24
20000d8e:	185b      	adds	r3, r3, r1
20000d90:	19db      	adds	r3, r3, r7
20000d92:	691b      	ldr	r3, [r3, #16]
20000d94:	1ad3      	subs	r3, r2, r3
20000d96:	17da      	asrs	r2, r3, #31
20000d98:	189b      	adds	r3, r3, r2
20000d9a:	4053      	eors	r3, r2
20000d9c:	603b      	str	r3, [r7, #0]
	if(deltax<5 && deltay<9){
20000d9e:	687b      	ldr	r3, [r7, #4]
20000da0:	2b04      	cmp	r3, #4
20000da2:	dc04      	bgt.n	20000dae <collision+0x52>
20000da4:	683b      	ldr	r3, [r7, #0]
20000da6:	2b08      	cmp	r3, #8
20000da8:	dc01      	bgt.n	20000dae <collision+0x52>
		return 1;
20000daa:	2301      	movs	r3, #1
20000dac:	e000      	b.n	20000db0 <collision+0x54>
	}
	return 0;
20000dae:	2300      	movs	r3, #0
}
20000db0:	0018      	movs	r0, r3
20000db2:	46bd      	mov	sp, r7
20000db4:	b002      	add	sp, #8
20000db6:	bcb0      	pop	{r4, r5, r7}
20000db8:	bc08      	pop	{r3}
20000dba:	b004      	add	sp, #16
20000dbc:	4718      	bx	r3

20000dbe <winning_routine>:

void winning_routine(){
20000dbe:	b580      	push	{r7, lr}
20000dc0:	b082      	sub	sp, #8
20000dc2:	af00      	add	r7, sp, #0

	char *s = "The epic winner is: ";
20000dc4:	4b2e      	ldr	r3, [pc, #184]	; (20000e80 <winning_routine+0xc2>)
20000dc6:	607b      	str	r3, [r7, #4]
	ascii_clear_screen();
20000dc8:	f7ff fa4d 	bl	20000266 <ascii_clear_screen>
	graphic_clear_screen();
20000dcc:	f000 fa76 	bl	200012bc <graphic_clear_screen>
	ascii_gotoxy(1,1);
20000dd0:	2101      	movs	r1, #1
20000dd2:	2001      	movs	r0, #1
20000dd4:	f7ff fa4f 	bl	20000276 <ascii_gotoxy>
	while(*s != 0){
20000dd8:	e007      	b.n	20000dea <winning_routine+0x2c>
		ascii_write_char(*s);
20000dda:	687b      	ldr	r3, [r7, #4]
20000ddc:	781b      	ldrb	r3, [r3, #0]
20000dde:	0018      	movs	r0, r3
20000de0:	f7ff fa15 	bl	2000020e <ascii_write_char>
		s++;
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	3301      	adds	r3, #1
20000de8:	607b      	str	r3, [r7, #4]
	while(*s != 0){
20000dea:	687b      	ldr	r3, [r7, #4]
20000dec:	781b      	ldrb	r3, [r3, #0]
20000dee:	2b00      	cmp	r3, #0
20000df0:	d1f3      	bne.n	20000dda <winning_routine+0x1c>
	}
	ascii_gotoxy(1,2);
20000df2:	2102      	movs	r1, #2
20000df4:	2001      	movs	r0, #1
20000df6:	f7ff fa3e 	bl	20000276 <ascii_gotoxy>
	while(*winner_name != 0){
20000dfa:	e00a      	b.n	20000e12 <winning_routine+0x54>
		ascii_write_char(*winner_name);
20000dfc:	4b21      	ldr	r3, [pc, #132]	; (20000e84 <winning_routine+0xc6>)
20000dfe:	681b      	ldr	r3, [r3, #0]
20000e00:	781b      	ldrb	r3, [r3, #0]
20000e02:	0018      	movs	r0, r3
20000e04:	f7ff fa03 	bl	2000020e <ascii_write_char>
		winner_name++;
20000e08:	4b1e      	ldr	r3, [pc, #120]	; (20000e84 <winning_routine+0xc6>)
20000e0a:	681b      	ldr	r3, [r3, #0]
20000e0c:	1c5a      	adds	r2, r3, #1
20000e0e:	4b1d      	ldr	r3, [pc, #116]	; (20000e84 <winning_routine+0xc6>)
20000e10:	601a      	str	r2, [r3, #0]
	while(*winner_name != 0){
20000e12:	4b1c      	ldr	r3, [pc, #112]	; (20000e84 <winning_routine+0xc6>)
20000e14:	681b      	ldr	r3, [r3, #0]
20000e16:	781b      	ldrb	r3, [r3, #0]
20000e18:	2b00      	cmp	r3, #0
20000e1a:	d1ef      	bne.n	20000dfc <winning_routine+0x3e>
	}
	tim6_disable();
20000e1c:	f7ff fc2a 	bl	20000674 <tim6_disable>
	delay_mili(500);
20000e20:	23fa      	movs	r3, #250	; 0xfa
20000e22:	005b      	lsls	r3, r3, #1
20000e24:	0018      	movs	r0, r3
20000e26:	f7ff fc95 	bl	20000754 <delay_mili>

	ascii_clear_screen();
20000e2a:	f7ff fa1c 	bl	20000266 <ascii_clear_screen>
	// graphic_clear_screen();
	ascii_gotoxy(1,1);
20000e2e:	2101      	movs	r1, #1
20000e30:	2001      	movs	r0, #1
20000e32:	f7ff fa20 	bl	20000276 <ascii_gotoxy>
	s = "Press any key to restart";
20000e36:	4b14      	ldr	r3, [pc, #80]	; (20000e88 <winning_routine+0xca>)
20000e38:	607b      	str	r3, [r7, #4]
	while(*s != 0){
20000e3a:	e007      	b.n	20000e4c <winning_routine+0x8e>
		ascii_write_char(*s);
20000e3c:	687b      	ldr	r3, [r7, #4]
20000e3e:	781b      	ldrb	r3, [r3, #0]
20000e40:	0018      	movs	r0, r3
20000e42:	f7ff f9e4 	bl	2000020e <ascii_write_char>
		s++;
20000e46:	687b      	ldr	r3, [r7, #4]
20000e48:	3301      	adds	r3, #1
20000e4a:	607b      	str	r3, [r7, #4]
	while(*s != 0){
20000e4c:	687b      	ldr	r3, [r7, #4]
20000e4e:	781b      	ldrb	r3, [r3, #0]
20000e50:	2b00      	cmp	r3, #0
20000e52:	d1f3      	bne.n	20000e3c <winning_routine+0x7e>
	}
	while(return_pressed_key() == 0xff);
20000e54:	46c0      	nop			; (mov r8, r8)
20000e56:	f7ff fed3 	bl	20000c00 <return_pressed_key>
20000e5a:	0003      	movs	r3, r0
20000e5c:	2bff      	cmp	r3, #255	; 0xff
20000e5e:	d0fa      	beq.n	20000e56 <winning_routine+0x98>
	time.seconds = 0;
20000e60:	4b0a      	ldr	r3, [pc, #40]	; (20000e8c <winning_routine+0xce>)
20000e62:	2200      	movs	r2, #0
20000e64:	601a      	str	r2, [r3, #0]
	time.ten_seconds = 0;
20000e66:	4b09      	ldr	r3, [pc, #36]	; (20000e8c <winning_routine+0xce>)
20000e68:	2200      	movs	r2, #0
20000e6a:	605a      	str	r2, [r3, #4]
	time.minutes = 0;
20000e6c:	4b07      	ldr	r3, [pc, #28]	; (20000e8c <winning_routine+0xce>)
20000e6e:	2200      	movs	r2, #0
20000e70:	609a      	str	r2, [r3, #8]
	main();
20000e72:	f000 f9cf 	bl	20001214 <main>
}
20000e76:	46c0      	nop			; (mov r8, r8)
20000e78:	46bd      	mov	sp, r7
20000e7a:	b002      	add	sp, #8
20000e7c:	bd80      	pop	{r7, pc}
20000e7e:	46c0      	nop			; (mov r8, r8)
20000e80:	200013b4 			; <UNDEFINED> instruction: 0x200013b4
20000e84:	200012fc 	strdcs	r1, [r0], -ip
20000e88:	200013cc 	andcs	r1, r0, ip, asr #7
20000e8c:	200012ec 	andcs	r1, r0, ip, ror #5

20000e90 <print_scores>:

void print_scores(){
20000e90:	b580      	push	{r7, lr}
20000e92:	b082      	sub	sp, #8
20000e94:	af00      	add	r7, sp, #0
	char * string_points_player1 = "P1: ";
20000e96:	4b1c      	ldr	r3, [pc, #112]	; (20000f08 <print_scores+0x78>)
20000e98:	607b      	str	r3, [r7, #4]
	char * string_points_player2 = "P2: ";
20000e9a:	4b1c      	ldr	r3, [pc, #112]	; (20000f0c <print_scores+0x7c>)
20000e9c:	603b      	str	r3, [r7, #0]

	ascii_gotoxy(1,1);
20000e9e:	2101      	movs	r1, #1
20000ea0:	2001      	movs	r0, #1
20000ea2:	f7ff f9e8 	bl	20000276 <ascii_gotoxy>
	while (*string_points_player1 != 0) {
20000ea6:	e007      	b.n	20000eb8 <print_scores+0x28>
		ascii_write_char(*string_points_player1);
20000ea8:	687b      	ldr	r3, [r7, #4]
20000eaa:	781b      	ldrb	r3, [r3, #0]
20000eac:	0018      	movs	r0, r3
20000eae:	f7ff f9ae 	bl	2000020e <ascii_write_char>
		string_points_player1++;
20000eb2:	687b      	ldr	r3, [r7, #4]
20000eb4:	3301      	adds	r3, #1
20000eb6:	607b      	str	r3, [r7, #4]
	while (*string_points_player1 != 0) {
20000eb8:	687b      	ldr	r3, [r7, #4]
20000eba:	781b      	ldrb	r3, [r3, #0]
20000ebc:	2b00      	cmp	r3, #0
20000ebe:	d1f3      	bne.n	20000ea8 <print_scores+0x18>
	}
	ascii_write_char(points_player1+0x30);
20000ec0:	4b13      	ldr	r3, [pc, #76]	; (20000f10 <print_scores+0x80>)
20000ec2:	781b      	ldrb	r3, [r3, #0]
20000ec4:	3330      	adds	r3, #48	; 0x30
20000ec6:	b2db      	uxtb	r3, r3
20000ec8:	0018      	movs	r0, r3
20000eca:	f7ff f9a0 	bl	2000020e <ascii_write_char>

	ascii_gotoxy(1,2);
20000ece:	2102      	movs	r1, #2
20000ed0:	2001      	movs	r0, #1
20000ed2:	f7ff f9d0 	bl	20000276 <ascii_gotoxy>
	while(*string_points_player2 != 0){
20000ed6:	e007      	b.n	20000ee8 <print_scores+0x58>
		ascii_write_char(*string_points_player2);
20000ed8:	683b      	ldr	r3, [r7, #0]
20000eda:	781b      	ldrb	r3, [r3, #0]
20000edc:	0018      	movs	r0, r3
20000ede:	f7ff f996 	bl	2000020e <ascii_write_char>
		string_points_player2++;
20000ee2:	683b      	ldr	r3, [r7, #0]
20000ee4:	3301      	adds	r3, #1
20000ee6:	603b      	str	r3, [r7, #0]
	while(*string_points_player2 != 0){
20000ee8:	683b      	ldr	r3, [r7, #0]
20000eea:	781b      	ldrb	r3, [r3, #0]
20000eec:	2b00      	cmp	r3, #0
20000eee:	d1f3      	bne.n	20000ed8 <print_scores+0x48>
	}
	ascii_write_char(points_player2+0x30);
20000ef0:	4b08      	ldr	r3, [pc, #32]	; (20000f14 <print_scores+0x84>)
20000ef2:	781b      	ldrb	r3, [r3, #0]
20000ef4:	3330      	adds	r3, #48	; 0x30
20000ef6:	b2db      	uxtb	r3, r3
20000ef8:	0018      	movs	r0, r3
20000efa:	f7ff f988 	bl	2000020e <ascii_write_char>

	// ascii_write_text_at(points_player1, 1, 1);
	// ascii_write_text_at(string_points_player2, 1, 7);
}
20000efe:	46c0      	nop			; (mov r8, r8)
20000f00:	46bd      	mov	sp, r7
20000f02:	b002      	add	sp, #8
20000f04:	bd80      	pop	{r7, pc}
20000f06:	46c0      	nop			; (mov r8, r8)
20000f08:	200013e8 	andcs	r1, r0, r8, ror #7
20000f0c:	200013f0 	strdcs	r1, [r0], -r0
20000f10:	200012f8 	strdcs	r1, [r0], -r8
20000f14:	200012f9 	strdcs	r1, [r0], -r9

20000f18 <app_init>:

void app_init(){
20000f18:	b580      	push	{r7, lr}
20000f1a:	af00      	add	r7, sp, #0
	ascii_init();
20000f1c:	f7ff f992 	bl	20000244 <ascii_init>
	*GPIO_E_MODER = 0x55555555;
20000f20:	4b08      	ldr	r3, [pc, #32]	; (20000f44 <app_init+0x2c>)
20000f22:	4a09      	ldr	r2, [pc, #36]	; (20000f48 <app_init+0x30>)
20000f24:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
20000f26:	4b09      	ldr	r3, [pc, #36]	; (20000f4c <app_init+0x34>)
20000f28:	2200      	movs	r2, #0
20000f2a:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
20000f2c:	4b08      	ldr	r3, [pc, #32]	; (20000f50 <app_init+0x38>)
20000f2e:	2201      	movs	r2, #1
20000f30:	4252      	negs	r2, r2
20000f32:	601a      	str	r2, [r3, #0]
	graphic_initialize();
20000f34:	f000 f9bf 	bl	200012b6 <graphic_initialize>
	graphic_clear_screen();
20000f38:	f000 f9c0 	bl	200012bc <graphic_clear_screen>
}
20000f3c:	46c0      	nop			; (mov r8, r8)
20000f3e:	46bd      	mov	sp, r7
20000f40:	bd80      	pop	{r7, pc}
20000f42:	46c0      	nop			; (mov r8, r8)
20000f44:	40021000 	andmi	r1, r2, r0
20000f48:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000f4c:	40021004 	andmi	r1, r2, r4
20000f50:	40021008 	andmi	r1, r2, r8

20000f54 <singleGame>:

void singleGame(POBJECT paddle1, POBJECT paddle2){
20000f54:	b084      	sub	sp, #16
20000f56:	b5b0      	push	{r4, r5, r7, lr}
20000f58:	b098      	sub	sp, #96	; 0x60
20000f5a:	af0e      	add	r7, sp, #56	; 0x38
20000f5c:	2438      	movs	r4, #56	; 0x38
20000f5e:	193c      	adds	r4, r7, r4
20000f60:	6020      	str	r0, [r4, #0]
20000f62:	6061      	str	r1, [r4, #4]
20000f64:	60a2      	str	r2, [r4, #8]
20000f66:	60e3      	str	r3, [r4, #12]
	unsigned char c = 0xff;
20000f68:	2327      	movs	r3, #39	; 0x27
20000f6a:	18fb      	adds	r3, r7, r3
20000f6c:	22ff      	movs	r2, #255	; 0xff
20000f6e:	701a      	strb	r2, [r3, #0]
	POBJECT ball = create_ballobject(1,1);
20000f70:	003b      	movs	r3, r7
20000f72:	2201      	movs	r2, #1
20000f74:	2101      	movs	r1, #1
20000f76:	0018      	movs	r0, r3
20000f78:	f7ff fab5 	bl	200004e6 <create_ballobject>
	ball.set_speed(&ball, 4,1);
20000f7c:	003b      	movs	r3, r7
20000f7e:	6a1b      	ldr	r3, [r3, #32]
20000f80:	0038      	movs	r0, r7
20000f82:	2201      	movs	r2, #1
20000f84:	2104      	movs	r1, #4
20000f86:	4798      	blx	r3
	// POBJECT paddle1 = create_paddleobject(100, 32);
	// POBJECT paddle2 = create_paddleobject(28, 32);
	print_scores();
20000f88:	f7ff ff82 	bl	20000e90 <print_scores>
	timer6_init();
20000f8c:	f7ff fb1c 	bl	200005c8 <timer6_init>
	while(1){
		paddle1.move(&paddle1);
20000f90:	2438      	movs	r4, #56	; 0x38
20000f92:	193b      	adds	r3, r7, r4
20000f94:	69da      	ldr	r2, [r3, #28]
20000f96:	193b      	adds	r3, r7, r4
20000f98:	0018      	movs	r0, r3
20000f9a:	4790      	blx	r2
		paddle2.move(&paddle2);
20000f9c:	2324      	movs	r3, #36	; 0x24
20000f9e:	191b      	adds	r3, r3, r4
20000fa0:	19db      	adds	r3, r3, r7
20000fa2:	69db      	ldr	r3, [r3, #28]
20000fa4:	225c      	movs	r2, #92	; 0x5c
20000fa6:	18ba      	adds	r2, r7, r2
20000fa8:	0010      	movs	r0, r2
20000faa:	4798      	blx	r3
		ball.move(&ball);
20000fac:	003b      	movs	r3, r7
20000fae:	69db      	ldr	r3, [r3, #28]
20000fb0:	003a      	movs	r2, r7
20000fb2:	0010      	movs	r0, r2
20000fb4:	4798      	blx	r3
		c = return_pressed_key();
20000fb6:	2527      	movs	r5, #39	; 0x27
20000fb8:	197c      	adds	r4, r7, r5
20000fba:	f7ff fe21 	bl	20000c00 <return_pressed_key>
20000fbe:	0003      	movs	r3, r0
20000fc0:	7023      	strb	r3, [r4, #0]
		switch(c){
20000fc2:	197b      	adds	r3, r7, r5
20000fc4:	781b      	ldrb	r3, [r3, #0]
20000fc6:	2b09      	cmp	r3, #9
20000fc8:	dc08      	bgt.n	20000fdc <singleGame+0x88>
20000fca:	2b00      	cmp	r3, #0
20000fcc:	dd58      	ble.n	20001080 <singleGame+0x12c>
20000fce:	2b09      	cmp	r3, #9
20000fd0:	d856      	bhi.n	20001080 <singleGame+0x12c>
20000fd2:	009a      	lsls	r2, r3, #2
20000fd4:	4b88      	ldr	r3, [pc, #544]	; (200011f8 <singleGame+0x2a4>)
20000fd6:	18d3      	adds	r3, r2, r3
20000fd8:	681b      	ldr	r3, [r3, #0]
20000fda:	469f      	mov	pc, r3
20000fdc:	2bff      	cmp	r3, #255	; 0xff
20000fde:	d046      	beq.n	2000106e <singleGame+0x11a>
20000fe0:	e04e      	b.n	20001080 <singleGame+0x12c>
			case 1: paddle2.set_speed(&paddle2, 0,-3); break;
20000fe2:	2324      	movs	r3, #36	; 0x24
20000fe4:	2238      	movs	r2, #56	; 0x38
20000fe6:	189b      	adds	r3, r3, r2
20000fe8:	19db      	adds	r3, r3, r7
20000fea:	6a1b      	ldr	r3, [r3, #32]
20000fec:	2203      	movs	r2, #3
20000fee:	4252      	negs	r2, r2
20000ff0:	215c      	movs	r1, #92	; 0x5c
20000ff2:	1878      	adds	r0, r7, r1
20000ff4:	2100      	movs	r1, #0
20000ff6:	4798      	blx	r3
20000ff8:	e042      	b.n	20001080 <singleGame+0x12c>
			case 7: paddle2.set_speed(&paddle2,0,3);break;
20000ffa:	2324      	movs	r3, #36	; 0x24
20000ffc:	2238      	movs	r2, #56	; 0x38
20000ffe:	189b      	adds	r3, r3, r2
20001000:	19db      	adds	r3, r3, r7
20001002:	6a1b      	ldr	r3, [r3, #32]
20001004:	225c      	movs	r2, #92	; 0x5c
20001006:	18b8      	adds	r0, r7, r2
20001008:	2203      	movs	r2, #3
2000100a:	2100      	movs	r1, #0
2000100c:	4798      	blx	r3
2000100e:	e037      	b.n	20001080 <singleGame+0x12c>
			case 3: paddle1.set_speed(&paddle1, 0,-3); break;
20001010:	2138      	movs	r1, #56	; 0x38
20001012:	187b      	adds	r3, r7, r1
20001014:	6a1c      	ldr	r4, [r3, #32]
20001016:	2303      	movs	r3, #3
20001018:	425a      	negs	r2, r3
2000101a:	187b      	adds	r3, r7, r1
2000101c:	2100      	movs	r1, #0
2000101e:	0018      	movs	r0, r3
20001020:	47a0      	blx	r4
20001022:	e02d      	b.n	20001080 <singleGame+0x12c>
			case 9: paddle1.set_speed(&paddle1,0,3);break;
20001024:	2238      	movs	r2, #56	; 0x38
20001026:	18bb      	adds	r3, r7, r2
20001028:	6a1c      	ldr	r4, [r3, #32]
2000102a:	18bb      	adds	r3, r7, r2
2000102c:	2203      	movs	r2, #3
2000102e:	2100      	movs	r1, #0
20001030:	0018      	movs	r0, r3
20001032:	47a0      	blx	r4
20001034:	e024      	b.n	20001080 <singleGame+0x12c>
			case 6: singleGame(paddle1, paddle2); break;
20001036:	2138      	movs	r1, #56	; 0x38
20001038:	187b      	adds	r3, r7, r1
2000103a:	2224      	movs	r2, #36	; 0x24
2000103c:	1852      	adds	r2, r2, r1
2000103e:	19d1      	adds	r1, r2, r7
20001040:	2214      	movs	r2, #20
20001042:	446a      	add	r2, sp
20001044:	c931      	ldmia	r1!, {r0, r4, r5}
20001046:	c231      	stmia	r2!, {r0, r4, r5}
20001048:	c931      	ldmia	r1!, {r0, r4, r5}
2000104a:	c231      	stmia	r2!, {r0, r4, r5}
2000104c:	c931      	ldmia	r1!, {r0, r4, r5}
2000104e:	c231      	stmia	r2!, {r0, r4, r5}
20001050:	466a      	mov	r2, sp
20001052:	0011      	movs	r1, r2
20001054:	001a      	movs	r2, r3
20001056:	3210      	adds	r2, #16
20001058:	ca31      	ldmia	r2!, {r0, r4, r5}
2000105a:	c131      	stmia	r1!, {r0, r4, r5}
2000105c:	ca11      	ldmia	r2!, {r0, r4}
2000105e:	c111      	stmia	r1!, {r0, r4}
20001060:	6818      	ldr	r0, [r3, #0]
20001062:	6859      	ldr	r1, [r3, #4]
20001064:	689a      	ldr	r2, [r3, #8]
20001066:	68db      	ldr	r3, [r3, #12]
20001068:	f7ff ff74 	bl	20000f54 <singleGame>
2000106c:	e008      	b.n	20001080 <singleGame+0x12c>
			case 0xff: paddle1.set_speed(&paddle1, 0,0);break;
2000106e:	2238      	movs	r2, #56	; 0x38
20001070:	18bb      	adds	r3, r7, r2
20001072:	6a1c      	ldr	r4, [r3, #32]
20001074:	18bb      	adds	r3, r7, r2
20001076:	2200      	movs	r2, #0
20001078:	2100      	movs	r1, #0
2000107a:	0018      	movs	r0, r3
2000107c:	47a0      	blx	r4
2000107e:	46c0      	nop			; (mov r8, r8)
		}




		if(collision(paddle1, ball)){
20001080:	2338      	movs	r3, #56	; 0x38
20001082:	18fb      	adds	r3, r7, r3
20001084:	0039      	movs	r1, r7
20001086:	2214      	movs	r2, #20
20001088:	446a      	add	r2, sp
2000108a:	c931      	ldmia	r1!, {r0, r4, r5}
2000108c:	c231      	stmia	r2!, {r0, r4, r5}
2000108e:	c931      	ldmia	r1!, {r0, r4, r5}
20001090:	c231      	stmia	r2!, {r0, r4, r5}
20001092:	c931      	ldmia	r1!, {r0, r4, r5}
20001094:	c231      	stmia	r2!, {r0, r4, r5}
20001096:	466a      	mov	r2, sp
20001098:	0011      	movs	r1, r2
2000109a:	001a      	movs	r2, r3
2000109c:	3210      	adds	r2, #16
2000109e:	ca31      	ldmia	r2!, {r0, r4, r5}
200010a0:	c131      	stmia	r1!, {r0, r4, r5}
200010a2:	ca11      	ldmia	r2!, {r0, r4}
200010a4:	c111      	stmia	r1!, {r0, r4}
200010a6:	6818      	ldr	r0, [r3, #0]
200010a8:	6859      	ldr	r1, [r3, #4]
200010aa:	689a      	ldr	r2, [r3, #8]
200010ac:	68db      	ldr	r3, [r3, #12]
200010ae:	f7ff fe55 	bl	20000d5c <collision>
200010b2:	1e03      	subs	r3, r0, #0
200010b4:	d004      	beq.n	200010c0 <singleGame+0x16c>
				ball.dirx = -ball.dirx;
200010b6:	003b      	movs	r3, r7
200010b8:	685b      	ldr	r3, [r3, #4]
200010ba:	425a      	negs	r2, r3
200010bc:	003b      	movs	r3, r7
200010be:	605a      	str	r2, [r3, #4]
			}
		if(collision(paddle2, ball)){
200010c0:	2324      	movs	r3, #36	; 0x24
200010c2:	2238      	movs	r2, #56	; 0x38
200010c4:	189b      	adds	r3, r3, r2
200010c6:	19dc      	adds	r4, r3, r7
200010c8:	003a      	movs	r2, r7
200010ca:	2314      	movs	r3, #20
200010cc:	446b      	add	r3, sp
200010ce:	ca23      	ldmia	r2!, {r0, r1, r5}
200010d0:	c323      	stmia	r3!, {r0, r1, r5}
200010d2:	ca23      	ldmia	r2!, {r0, r1, r5}
200010d4:	c323      	stmia	r3!, {r0, r1, r5}
200010d6:	ca23      	ldmia	r2!, {r0, r1, r5}
200010d8:	c323      	stmia	r3!, {r0, r1, r5}
200010da:	466b      	mov	r3, sp
200010dc:	001a      	movs	r2, r3
200010de:	0023      	movs	r3, r4
200010e0:	3310      	adds	r3, #16
200010e2:	cb23      	ldmia	r3!, {r0, r1, r5}
200010e4:	c223      	stmia	r2!, {r0, r1, r5}
200010e6:	cb03      	ldmia	r3!, {r0, r1}
200010e8:	c203      	stmia	r2!, {r0, r1}
200010ea:	6820      	ldr	r0, [r4, #0]
200010ec:	6861      	ldr	r1, [r4, #4]
200010ee:	68a2      	ldr	r2, [r4, #8]
200010f0:	68e3      	ldr	r3, [r4, #12]
200010f2:	f7ff fe33 	bl	20000d5c <collision>
200010f6:	1e03      	subs	r3, r0, #0
200010f8:	d004      	beq.n	20001104 <singleGame+0x1b0>
				ball.dirx = -ball.dirx;
200010fa:	003b      	movs	r3, r7
200010fc:	685b      	ldr	r3, [r3, #4]
200010fe:	425a      	negs	r2, r3
20001100:	003b      	movs	r3, r7
20001102:	605a      	str	r2, [r3, #4]
			}
		if(ball.posx >= 128){
20001104:	003b      	movs	r3, r7
20001106:	68db      	ldr	r3, [r3, #12]
20001108:	2b7f      	cmp	r3, #127	; 0x7f
2000110a:	dd22      	ble.n	20001152 <singleGame+0x1fe>
			points_player1++;
2000110c:	4b3b      	ldr	r3, [pc, #236]	; (200011fc <singleGame+0x2a8>)
2000110e:	781b      	ldrb	r3, [r3, #0]
20001110:	3301      	adds	r3, #1
20001112:	b2da      	uxtb	r2, r3
20001114:	4b39      	ldr	r3, [pc, #228]	; (200011fc <singleGame+0x2a8>)
20001116:	701a      	strb	r2, [r3, #0]
			print_scores();
20001118:	f7ff feba 	bl	20000e90 <print_scores>
			singleGame(paddle1, paddle2);
2000111c:	2138      	movs	r1, #56	; 0x38
2000111e:	187b      	adds	r3, r7, r1
20001120:	2224      	movs	r2, #36	; 0x24
20001122:	1852      	adds	r2, r2, r1
20001124:	19d1      	adds	r1, r2, r7
20001126:	2214      	movs	r2, #20
20001128:	446a      	add	r2, sp
2000112a:	c931      	ldmia	r1!, {r0, r4, r5}
2000112c:	c231      	stmia	r2!, {r0, r4, r5}
2000112e:	c931      	ldmia	r1!, {r0, r4, r5}
20001130:	c231      	stmia	r2!, {r0, r4, r5}
20001132:	c931      	ldmia	r1!, {r0, r4, r5}
20001134:	c231      	stmia	r2!, {r0, r4, r5}
20001136:	466a      	mov	r2, sp
20001138:	0011      	movs	r1, r2
2000113a:	001a      	movs	r2, r3
2000113c:	3210      	adds	r2, #16
2000113e:	ca31      	ldmia	r2!, {r0, r4, r5}
20001140:	c131      	stmia	r1!, {r0, r4, r5}
20001142:	ca11      	ldmia	r2!, {r0, r4}
20001144:	c111      	stmia	r1!, {r0, r4}
20001146:	6818      	ldr	r0, [r3, #0]
20001148:	6859      	ldr	r1, [r3, #4]
2000114a:	689a      	ldr	r2, [r3, #8]
2000114c:	68db      	ldr	r3, [r3, #12]
2000114e:	f7ff ff01 	bl	20000f54 <singleGame>
		}
		if(ball.posx <= 0){
20001152:	003b      	movs	r3, r7
20001154:	68db      	ldr	r3, [r3, #12]
20001156:	2b00      	cmp	r3, #0
20001158:	dc22      	bgt.n	200011a0 <singleGame+0x24c>
			points_player2++;
2000115a:	4b29      	ldr	r3, [pc, #164]	; (20001200 <singleGame+0x2ac>)
2000115c:	781b      	ldrb	r3, [r3, #0]
2000115e:	3301      	adds	r3, #1
20001160:	b2da      	uxtb	r2, r3
20001162:	4b27      	ldr	r3, [pc, #156]	; (20001200 <singleGame+0x2ac>)
20001164:	701a      	strb	r2, [r3, #0]
			print_scores();
20001166:	f7ff fe93 	bl	20000e90 <print_scores>
			singleGame(paddle1 ,paddle2);
2000116a:	2138      	movs	r1, #56	; 0x38
2000116c:	187b      	adds	r3, r7, r1
2000116e:	2224      	movs	r2, #36	; 0x24
20001170:	1852      	adds	r2, r2, r1
20001172:	19d1      	adds	r1, r2, r7
20001174:	2214      	movs	r2, #20
20001176:	446a      	add	r2, sp
20001178:	c931      	ldmia	r1!, {r0, r4, r5}
2000117a:	c231      	stmia	r2!, {r0, r4, r5}
2000117c:	c931      	ldmia	r1!, {r0, r4, r5}
2000117e:	c231      	stmia	r2!, {r0, r4, r5}
20001180:	c931      	ldmia	r1!, {r0, r4, r5}
20001182:	c231      	stmia	r2!, {r0, r4, r5}
20001184:	466a      	mov	r2, sp
20001186:	0011      	movs	r1, r2
20001188:	001a      	movs	r2, r3
2000118a:	3210      	adds	r2, #16
2000118c:	ca31      	ldmia	r2!, {r0, r4, r5}
2000118e:	c131      	stmia	r1!, {r0, r4, r5}
20001190:	ca11      	ldmia	r2!, {r0, r4}
20001192:	c111      	stmia	r1!, {r0, r4}
20001194:	6818      	ldr	r0, [r3, #0]
20001196:	6859      	ldr	r1, [r3, #4]
20001198:	689a      	ldr	r2, [r3, #8]
2000119a:	68db      	ldr	r3, [r3, #12]
2000119c:	f7ff feda 	bl	20000f54 <singleGame>
		}
		if(time.seconds+time.ten_seconds*10 >= 10){
200011a0:	4b18      	ldr	r3, [pc, #96]	; (20001204 <singleGame+0x2b0>)
200011a2:	6819      	ldr	r1, [r3, #0]
200011a4:	4b17      	ldr	r3, [pc, #92]	; (20001204 <singleGame+0x2b0>)
200011a6:	685a      	ldr	r2, [r3, #4]
200011a8:	0013      	movs	r3, r2
200011aa:	009b      	lsls	r3, r3, #2
200011ac:	189b      	adds	r3, r3, r2
200011ae:	005b      	lsls	r3, r3, #1
200011b0:	18cb      	adds	r3, r1, r3
200011b2:	2b09      	cmp	r3, #9
200011b4:	dc00      	bgt.n	200011b8 <singleGame+0x264>
200011b6:	e6eb      	b.n	20000f90 <singleGame+0x3c>
			if(points_player1 > points_player2){
200011b8:	4b10      	ldr	r3, [pc, #64]	; (200011fc <singleGame+0x2a8>)
200011ba:	781a      	ldrb	r2, [r3, #0]
200011bc:	4b10      	ldr	r3, [pc, #64]	; (20001200 <singleGame+0x2ac>)
200011be:	781b      	ldrb	r3, [r3, #0]
200011c0:	429a      	cmp	r2, r3
200011c2:	d905      	bls.n	200011d0 <singleGame+0x27c>
				winner_name = "Player 1";
200011c4:	4b10      	ldr	r3, [pc, #64]	; (20001208 <singleGame+0x2b4>)
200011c6:	4a11      	ldr	r2, [pc, #68]	; (2000120c <singleGame+0x2b8>)
200011c8:	601a      	str	r2, [r3, #0]
				winning_routine();
200011ca:	f7ff fdf8 	bl	20000dbe <winning_routine>
				break;
200011ce:	e00b      	b.n	200011e8 <singleGame+0x294>
			}else if(points_player2 > points_player1){
200011d0:	4b0b      	ldr	r3, [pc, #44]	; (20001200 <singleGame+0x2ac>)
200011d2:	781a      	ldrb	r2, [r3, #0]
200011d4:	4b09      	ldr	r3, [pc, #36]	; (200011fc <singleGame+0x2a8>)
200011d6:	781b      	ldrb	r3, [r3, #0]
200011d8:	429a      	cmp	r2, r3
200011da:	d800      	bhi.n	200011de <singleGame+0x28a>
200011dc:	e6d8      	b.n	20000f90 <singleGame+0x3c>
				winner_name = "Player 2";
200011de:	4b0a      	ldr	r3, [pc, #40]	; (20001208 <singleGame+0x2b4>)
200011e0:	4a0b      	ldr	r2, [pc, #44]	; (20001210 <singleGame+0x2bc>)
200011e2:	601a      	str	r2, [r3, #0]
				winning_routine();
200011e4:	f7ff fdeb 	bl	20000dbe <winning_routine>
		// else if(get_timer_flag() == 1){
		// 	break;
		// }
		
	}		
}		
200011e8:	46c0      	nop			; (mov r8, r8)
200011ea:	46bd      	mov	sp, r7
200011ec:	b00a      	add	sp, #40	; 0x28
200011ee:	bcb0      	pop	{r4, r5, r7}
200011f0:	bc08      	pop	{r3}
200011f2:	b004      	add	sp, #16
200011f4:	4718      	bx	r3
200011f6:	46c0      	nop			; (mov r8, r8)
200011f8:	20001410 	andcs	r1, r0, r0, lsl r4
200011fc:	200012f8 	strdcs	r1, [r0], -r8
20001200:	200012f9 	strdcs	r1, [r0], -r9
20001204:	200012ec 	andcs	r1, r0, ip, ror #5
20001208:	200012fc 	strdcs	r1, [r0], -ip
2000120c:	200013f8 	strdcs	r1, [r0], -r8
20001210:	20001404 	andcs	r1, r0, r4, lsl #8

20001214 <main>:




//main for singlepong
int main(void) {
20001214:	b5b0      	push	{r4, r5, r7, lr}
20001216:	b0aa      	sub	sp, #168	; 0xa8
20001218:	af0e      	add	r7, sp, #56	; 0x38

	app_init();
2000121a:	f7ff fe7d 	bl	20000f18 <app_init>
	// benis:
	unsigned char c = 0xff;
2000121e:	236f      	movs	r3, #111	; 0x6f
20001220:	18fb      	adds	r3, r7, r3
20001222:	22ff      	movs	r2, #255	; 0xff
20001224:	701a      	strb	r2, [r3, #0]
	POBJECT ball = create_ballobject(1,1);
20001226:	2448      	movs	r4, #72	; 0x48
20001228:	193b      	adds	r3, r7, r4
2000122a:	2201      	movs	r2, #1
2000122c:	2101      	movs	r1, #1
2000122e:	0018      	movs	r0, r3
20001230:	f7ff f959 	bl	200004e6 <create_ballobject>
	ball.set_speed(&ball, 4,1);
20001234:	0022      	movs	r2, r4
20001236:	18bb      	adds	r3, r7, r2
20001238:	6a1b      	ldr	r3, [r3, #32]
2000123a:	18b8      	adds	r0, r7, r2
2000123c:	2201      	movs	r2, #1
2000123e:	2104      	movs	r1, #4
20001240:	4798      	blx	r3
	POBJECT paddle1 = create_paddleobject(100, 32);
20001242:	2424      	movs	r4, #36	; 0x24
20001244:	193b      	adds	r3, r7, r4
20001246:	2220      	movs	r2, #32
20001248:	2164      	movs	r1, #100	; 0x64
2000124a:	0018      	movs	r0, r3
2000124c:	f7ff f984 	bl	20000558 <create_paddleobject>
	POBJECT paddle2 = create_paddleobject(28, 32);
20001250:	003b      	movs	r3, r7
20001252:	2220      	movs	r2, #32
20001254:	211c      	movs	r1, #28
20001256:	0018      	movs	r0, r3
20001258:	f7ff f97e 	bl	20000558 <create_paddleobject>
	singleGame(paddle1, paddle2);	
2000125c:	193c      	adds	r4, r7, r4
2000125e:	003a      	movs	r2, r7
20001260:	2314      	movs	r3, #20
20001262:	446b      	add	r3, sp
20001264:	ca23      	ldmia	r2!, {r0, r1, r5}
20001266:	c323      	stmia	r3!, {r0, r1, r5}
20001268:	ca23      	ldmia	r2!, {r0, r1, r5}
2000126a:	c323      	stmia	r3!, {r0, r1, r5}
2000126c:	ca23      	ldmia	r2!, {r0, r1, r5}
2000126e:	c323      	stmia	r3!, {r0, r1, r5}
20001270:	466b      	mov	r3, sp
20001272:	001a      	movs	r2, r3
20001274:	0023      	movs	r3, r4
20001276:	3310      	adds	r3, #16
20001278:	cb23      	ldmia	r3!, {r0, r1, r5}
2000127a:	c223      	stmia	r2!, {r0, r1, r5}
2000127c:	cb03      	ldmia	r3!, {r0, r1}
2000127e:	c203      	stmia	r2!, {r0, r1}
20001280:	6820      	ldr	r0, [r4, #0]
20001282:	6861      	ldr	r1, [r4, #4]
20001284:	68a2      	ldr	r2, [r4, #8]
20001286:	68e3      	ldr	r3, [r4, #12]
20001288:	f7ff fe64 	bl	20000f54 <singleGame>
	return 1;
2000128c:	2301      	movs	r3, #1
2000128e:	0018      	movs	r0, r3
20001290:	46bd      	mov	sp, r7
20001292:	b01c      	add	sp, #112	; 0x70
20001294:	bdb0      	pop	{r4, r5, r7, pc}
20001296:	46c0      	nop			; (mov r8, r8)

20001298 <abs>:
#include "math.h"



int abs(int num){
20001298:	b580      	push	{r7, lr}
2000129a:	b082      	sub	sp, #8
2000129c:	af00      	add	r7, sp, #0
2000129e:	6078      	str	r0, [r7, #4]
    if(num < 0  ){
200012a0:	687b      	ldr	r3, [r7, #4]
200012a2:	2b00      	cmp	r3, #0
200012a4:	da02      	bge.n	200012ac <abs+0x14>
        return -num;
200012a6:	687b      	ldr	r3, [r7, #4]
200012a8:	425b      	negs	r3, r3
200012aa:	e000      	b.n	200012ae <abs+0x16>
    }
    return num;
200012ac:	687b      	ldr	r3, [r7, #4]
}
200012ae:	0018      	movs	r0, r3
200012b0:	46bd      	mov	sp, r7
200012b2:	b002      	add	sp, #8
200012b4:	bd80      	pop	{r7, pc}

200012b6 <graphic_initialize>:





__attribute__((naked)) void graphic_initialize(){
200012b6:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm__ volatile(".HWORD  0xDFF0\n");
	__asm__ volatile("BX LR\n");
}
200012ba:	46c0      	nop			; (mov r8, r8)

200012bc <graphic_clear_screen>:


__attribute__((naked)) void graphic_clear_screen(){
200012bc:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm__ volatile(".HWORD  0xDFF1\n");
	__asm__ volatile("BX LR\n");
}
200012c0:	46c0      	nop			; (mov r8, r8)

200012c2 <graphic_pixel_set>:

__attribute__((naked)) void graphic_pixel_set(int x, int y){	
200012c2:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm__ volatile(".HWORD  0xDFF2\n");
	__asm__ volatile("BX LR\n");
}
200012c6:	46c0      	nop			; (mov r8, r8)

200012c8 <graphic_pixel_clear>:


__attribute__((naked)) void graphic_pixel_clear(int x, int y){
200012c8:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm__ volatile(".HWORD  0xDFF3\n");
	__asm__ volatile("BX LR\n");
}
200012cc:	46c0      	nop			; (mov r8, r8)

200012ce <enable_interrupt>:


__attribute__((naked )) void enable_interrupt(){
	__asm__ volatile(" CPSIE I\n");
200012ce:	b662      	cpsie	i
	__asm__ volatile(" BX LR\n");
200012d0:	4770      	bx	lr
}
200012d2:	46c0      	nop			; (mov r8, r8)

200012d4 <disable_interrupt>:

__attribute__((naked )) void disable_interrupt(){
	__asm__ volatile(" CPSID I\n");
200012d4:	b672      	cpsid	i
	__asm__ volatile(" BX LR\n");
200012d6:	4770      	bx	lr
200012d8:	46c0      	nop			; (mov r8, r8)
	...

200012dc <time>:
	...

200012e8 <seconds>:
	...

200012e9 <ten_seconds>:
	...

200012ea <minutes>:
	...

200012ec <time>:
	...

200012f8 <points_player1>:
	...

200012f9 <points_player2>:
200012f9:	 	andeq	r0, r0, r0

200012fc <winner_name>:
200012fc:	00000000 	andeq	r0, r0, r0

20001300 <ball_geometry>:
20001300:	0000000c 	andeq	r0, r0, ip
20001304:	00000004 	andeq	r0, r0, r4
20001308:	00000004 	andeq	r0, r0, r4
2000130c:	02000100 	andeq	r0, r0, #0, 2
20001310:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
20001314:	00020301 	andeq	r0, r2, r1, lsl #6
20001318:	02020102 	andeq	r0, r2, #-2147483648	; 0x80000000
2000131c:	01030302 	tsteq	r3, r2, lsl #6
20001320:	00000203 	andeq	r0, r0, r3, lsl #4
	...

20001348 <paddle_geometry>:
20001348:	0000001b 	andeq	r0, r0, fp, lsl r0
2000134c:	00000005 	andeq	r0, r0, r5
20001350:	00000009 	andeq	r0, r0, r9
20001354:	00010000 	andeq	r0, r1, r0
20001358:	00030002 	andeq	r0, r3, r2
2000135c:	01000004 	tsteq	r0, r4
20001360:	03000200 	movweq	r0, #512	; 0x200
20001364:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20001368:	07000600 	streq	r0, [r0, -r0, lsl #12]
2000136c:	08010800 	stmdaeq	r1, {fp}
20001370:	08030802 	stmdaeq	r3, {r1, fp}
20001374:	07040804 	streq	r0, [r4, -r4, lsl #16]
20001378:	05040604 	streq	r0, [r4, #-1540]	; 0xfffff9fc
2000137c:	03040404 	movweq	r0, #17412	; 0x4404
20001380:	01040204 	tsteq	r4, r4, lsl #4
20001384:	04020302 	streq	r0, [r2], #-770	; 0xfffffcfe
20001388:	00000502 	andeq	r0, r0, r2, lsl #10
2000138c:	00000000 	andeq	r0, r0, r0

20001390 <winning_score>:
20001390:	00000005 	andeq	r0, r0, r5
20001394:	0a030201 	beq	200c1ba0 <winning_score+0xc0810>
20001398:	0b060504 	bleq	201827b0 <winning_score+0x181420>
2000139c:	0c090807 	stceq	8, cr0, [r9], {7}
200013a0:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001370 <paddle_geometry+0x28>
200013a4:	4f5b063f 	svcmi	0x005b063f
200013a8:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
200013ac:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
200013b0:	217e5e39 	cmncs	lr, r9, lsr lr
200013b4:	20656854 	rsbcs	r6, r5, r4, asr r8
200013b8:	63697065 	cmnvs	r9, #101	; 0x65
200013bc:	6e697720 	cdpvs	7, 6, cr7, cr9, cr0, {1}
200013c0:	2072656e 	rsbscs	r6, r2, lr, ror #10
200013c4:	203a7369 	eorscs	r7, sl, r9, ror #6
200013c8:	00000000 	andeq	r0, r0, r0
200013cc:	73657250 	cmnvc	r5, #80, 4
200013d0:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
200013d4:	656b2079 	strbvs	r2, [fp, #-121]!	; 0xffffff87
200013d8:	6f742079 	svcvs	0x00742079
200013dc:	73657220 	cmnvc	r5, #32, 4
200013e0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
200013e4:	00000000 	andeq	r0, r0, r0
200013e8:	203a3150 	eorscs	r3, sl, r0, asr r1
200013ec:	00000000 	andeq	r0, r0, r0
200013f0:	203a3250 	eorscs	r3, sl, r0, asr r2
200013f4:	00000000 	andeq	r0, r0, r0
200013f8:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
200013fc:	31207265 			; <UNDEFINED> instruction: 0x31207265
20001400:	00000000 	andeq	r0, r0, r0
20001404:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001408:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
2000140c:	00000000 	andeq	r0, r0, r0
20001410:	20001080 	andcs	r1, r0, r0, lsl #1
20001414:	20000fe2 	andcs	r0, r0, r2, ror #31
20001418:	20001080 	andcs	r1, r0, r0, lsl #1
2000141c:	20001010 	andcs	r1, r0, r0, lsl r0
20001420:	20001080 	andcs	r1, r0, r0, lsl #1
20001424:	20001080 	andcs	r1, r0, r0, lsl #1
20001428:	20001036 	andcs	r1, r0, r6, lsr r0
2000142c:	20000ffa 	strdcs	r0, [r0], -sl
20001430:	20001080 	andcs	r1, r0, r0, lsl #1
20001434:	20001024 	andcs	r1, r0, r4, lsr #32

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	0001e90c 	andeq	lr, r1, ip, lsl #18
      14:	00018c00 	andeq	r8, r1, r0, lsl #24
      18:	00001000 	andeq	r1, r0, r0
      1c:	00031c20 	andeq	r1, r3, r0, lsr #24
      20:	00000000 	andeq	r0, r0, r0
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	000000db 	ldrdeq	r0, [r0], -fp
      2c:	d5070202 	strle	r0, [r7, #-514]	; 0xfffffdfe
      30:	02000000 	andeq	r0, r0, #0
      34:	00b50801 	adcseq	r0, r5, r1, lsl #16
      38:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	02ae0676 	adceq	r0, lr, #123731968	; 0x7600000
      44:	007e2000 	rsbseq	r2, lr, r0
      48:	9c010000 	stcls	0, cr0, [r1], {-0}
      4c:	000000a7 	andeq	r0, r0, r7, lsr #1
      50:	6d756e04 	ldclvs	14, cr6, [r5, #-16]!
      54:	1f760100 	svcne	0x00760100
      58:	000000a7 	andeq	r0, r0, r7, lsr #1
      5c:	045f9102 	ldrbeq	r9, [pc], #-258	; 64 <startup-0x1fffff9c>
      60:	76010078 			; <UNDEFINED> instruction: 0x76010078
      64:	0000ae28 	andeq	sl, r0, r8, lsr #28
      68:	58910200 	ldmpl	r1, {r9}
      6c:	01007904 	tsteq	r0, r4, lsl #18
      70:	00ae2f76 	adceq	r2, lr, r6, ror pc
      74:	91020000 	mrsls	r0, (UNDEF: 2)
      78:	011e0554 	tsteq	lr, r4, asr r5
      7c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
      80:	0000ae06 	andeq	sl, r0, r6, lsl #28
      84:	6c910200 	lfmvs	f0, 4, [r1], {0}
      88:	00016205 	andeq	r6, r1, r5, lsl #4
      8c:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
      90:	000000ae 	andeq	r0, r0, lr, lsr #1
      94:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
      98:	00000111 	andeq	r0, r0, r1, lsl r1
      9c:	ae067a01 	vmlage.f32	s14, s12, s2
      a0:	02000000 	andeq	r0, r0, #0
      a4:	02006491 	andeq	r6, r0, #-1862270976	; 0x91000000
      a8:	00be0801 	adcseq	r0, lr, r1, lsl #16
      ac:	04060000 	streq	r0, [r6], #-0
      b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      b4:	00980300 	addseq	r0, r8, r0, lsl #6
      b8:	6d010000 	stcvs	0, cr0, [r1, #-0]
      bc:	00027606 	andeq	r7, r2, r6, lsl #12
      c0:	00003820 	andeq	r3, r0, r0, lsr #16
      c4:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
      c8:	04000000 	streq	r0, [r0], #-0
      cc:	6d010078 	stcvs	0, cr0, [r1, #-480]	; 0xfffffe20
      d0:	0000ae17 	andeq	sl, r0, r7, lsl lr
      d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
      d8:	01007904 	tsteq	r0, r4, lsl #18
      dc:	00ae1e6d 	adceq	r1, lr, sp, ror #28
      e0:	91020000 	mrsls	r0, (UNDEF: 2)
      e4:	00720568 	rsbseq	r0, r2, r8, ror #10
      e8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
      ec:	0000ae06 	andeq	sl, r0, r6, lsl #28
      f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      f4:	014f0700 	cmpeq	pc, r0, lsl #14
      f8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
      fc:	00026606 	andeq	r6, r2, r6, lsl #12
     100:	00001020 	andeq	r1, r0, r0, lsr #32
     104:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     108:	0000008d 	andeq	r0, r0, sp, lsl #1
     10c:	44065e01 	strmi	r5, [r6], #-3585	; 0xfffff1ff
     110:	22200002 	eorcs	r0, r0, #2
     114:	01000000 	mrseq	r0, (UNDEF: 0)
     118:	01d8039c 			; <UNDEFINED> instruction: 0x01d8039c
     11c:	57010000 	strpl	r0, [r1, -r0]
     120:	00020e06 	andeq	r0, r2, r6, lsl #28
     124:	00003620 	andeq	r3, r0, r0, lsr #12
     128:	3f9c0100 	svccc	0x009c0100
     12c:	08000001 	stmdaeq	r0, {r0}
     130:	00000184 	andeq	r0, r0, r4, lsl #3
     134:	a71c5701 	ldrge	r5, [ip, -r1, lsl #14]
     138:	02000000 	andeq	r0, r0, #0
     13c:	03007791 	movweq	r7, #1937	; 0x791
     140:	0000017e 	andeq	r0, r0, lr, ror r1
     144:	d8065001 	stmdale	r6, {r0, ip, lr}
     148:	36200001 	strtcc	r0, [r0], -r1
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	0001659c 	muleq	r1, ip, r5
     154:	01840800 	orreq	r0, r4, r0, lsl #16
     158:	50010000 	andpl	r0, r1, r0
     15c:	0000a719 	andeq	sl, r0, r9, lsl r7
     160:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     164:	01290300 			; <UNDEFINED> instruction: 0x01290300
     168:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     16c:	0001ae06 	andeq	sl, r1, r6, lsl #28
     170:	00002a20 	andeq	r2, r0, r0, lsr #20
     174:	8b9c0100 	blhi	fe70057c <winning_score+0xde6ff1ec>
     178:	08000001 	stmdaeq	r0, {r0}
     17c:	00000184 	andeq	r0, r0, r4, lsl #3
     180:	a71c4901 	ldrge	r4, [ip, -r1, lsl #18]
     184:	02000000 	andeq	r0, r0, #0
     188:	03007791 	movweq	r7, #1937	; 0x791
     18c:	000000a5 	andeq	r0, r0, r5, lsr #1
     190:	84064401 	strhi	r4, [r6], #-1025	; 0xfffffbff
     194:	2a200001 	bcs	8001a0 <startup-0x1f7ffe60>
     198:	01000000 	mrseq	r0, (UNDEF: 0)
     19c:	0001b19c 	muleq	r1, ip, r1
     1a0:	01840800 	orreq	r0, r4, r0, lsl #16
     1a4:	44010000 	strmi	r0, [r1], #-0
     1a8:	0000a71b 	andeq	sl, r0, fp, lsl r7
     1ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     1b0:	01c10300 	biceq	r0, r1, r0, lsl #6
     1b4:	3a010000 	bcc	401bc <startup-0x1ffbfe44>
     1b8:	0001500a 	andeq	r5, r1, sl
     1bc:	00003420 	andeq	r3, r0, r0, lsr #8
     1c0:	e19c0100 	orrs	r0, ip, r0, lsl #2
     1c4:	08000001 	stmdaeq	r0, {r0}
     1c8:	00000184 	andeq	r0, r0, r4, lsl #3
     1cc:	a7263a01 	strge	r3, [r6, -r1, lsl #20]!
     1d0:	02000000 	andeq	r0, r0, #0
     1d4:	63097791 	movwvs	r7, #38801	; 0x9791
     1d8:	0e3b0100 	rsfeqe	f0, f3, f0
     1dc:	000000a7 	andeq	r0, r0, r7, lsr #1
     1e0:	016e0a00 	cmneq	lr, r0, lsl #20
     1e4:	30010000 	andcc	r0, r1, r0
     1e8:	0000a706 	andeq	sl, r0, r6, lsl #14
     1ec:	00010400 	andeq	r0, r1, r0, lsl #8
     1f0:	00004c20 	andeq	r4, r0, r0, lsr #24
     1f4:	099c0100 	ldmibeq	ip, {r8}
     1f8:	0b000002 	bleq	208 <startup-0x1ffffdf8>
     1fc:	31010063 	tstcc	r1, r3, rrx
     200:	0000a707 	andeq	sl, r0, r7, lsl #14
     204:	6f910200 	svcvs	0x00910200
     208:	00c30a00 	sbceq	r0, r3, r0, lsl #20
     20c:	22010000 	andcs	r0, r1, #0
     210:	0000a707 	andeq	sl, r0, r7, lsl #14
     214:	0000c400 	andeq	ip, r0, r0, lsl #8
     218:	00004020 	andeq	r4, r0, r0, lsr #32
     21c:	319c0100 	orrscc	r0, ip, r0, lsl #2
     220:	0b000002 	bleq	230 <startup-0x1ffffdd0>
     224:	24010063 	strcs	r0, [r1], #-99	; 0xffffff9d
     228:	0000a70e 	andeq	sl, r0, lr, lsl #14
     22c:	6f910200 	svcvs	0x00910200
     230:	00e80a00 	rsceq	r0, r8, r0, lsl #20
     234:	13010000 	movwne	r0, #4096	; 0x1000
     238:	0000a707 	andeq	sl, r0, r7, lsl #14
     23c:	00009000 	andeq	r9, r0, r0
     240:	00003420 	andeq	r3, r0, r0, lsr #8
     244:	599c0100 	ldmibpl	ip, {r8}
     248:	0b000002 	bleq	258 <startup-0x1ffffda8>
     24c:	15010063 	strne	r0, [r1, #-99]	; 0xffffff9d
     250:	0000a70e 	andeq	sl, r0, lr, lsl #14
     254:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     258:	013a0c00 	teqeq	sl, r0, lsl #24
     25c:	0b010000 	bleq	40264 <startup-0x1ffbfd9c>
     260:	00004806 	andeq	r4, r0, r6, lsl #16
     264:	00004820 	andeq	r4, r0, r0, lsr #16
     268:	8a9c0100 	bhi	fe700670 <winning_score+0xde6ff2e0>
     26c:	04000002 	streq	r0, [r0], #-2
     270:	0b010078 	bleq	40458 <startup-0x1ffbfba8>
     274:	0000a720 	andeq	sl, r0, r0, lsr #14
     278:	6f910200 	svcvs	0x00910200
     27c:	0100630b 	tsteq	r0, fp, lsl #6
     280:	00a7070c 	adceq	r0, r7, ip, lsl #14
     284:	91020000 	mrsls	r0, (UNDEF: 2)
     288:	fe0d0077 	mcr2	0, 0, r0, cr13, cr7, {3}
     28c:	01000000 	mrseq	r0, (UNDEF: 0)
     290:	00100605 	andseq	r0, r0, r5, lsl #12
     294:	00382000 	eorseq	r2, r8, r0
     298:	9c010000 	stcls	0, cr0, [r1], {-0}
     29c:	01007804 	tsteq	r0, r4, lsl #16
     2a0:	00a71e05 	adceq	r1, r7, r5, lsl #28
     2a4:	91020000 	mrsls	r0, (UNDEF: 2)
     2a8:	00630b6f 	rsbeq	r0, r3, pc, ror #22
     2ac:	a70e0601 	strge	r0, [lr, -r1, lsl #12]
     2b0:	02000000 	andeq	r0, r0, #0
     2b4:	00007791 	muleq	r0, r1, r7
     2b8:	0000035f 	andeq	r0, r0, pc, asr r3
     2bc:	01030004 	tsteq	r3, r4
     2c0:	01040000 	mrseq	r0, (UNDEF: 4)
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	0002d80c 	andeq	sp, r2, ip, lsl #16
     2cc:	00018c00 	andeq	r8, r1, r0, lsl #24
     2d0:	00032c00 	andeq	r2, r3, r0, lsl #24
     2d4:	00029c20 	andeq	r9, r2, r0, lsr #24
     2d8:	00019600 	andeq	r9, r1, r0, lsl #12
     2dc:	02020200 	andeq	r0, r2, #0, 4
     2e0:	00450901 	subeq	r0, r5, r1, lsl #18
     2e4:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     2e8:	0a020200 	beq	80af0 <startup-0x1ff7f510>
     2ec:	00000045 	andeq	r0, r0, r5, asr #32
     2f0:	00790300 	rsbseq	r0, r9, r0, lsl #6
     2f4:	450c0202 	strmi	r0, [ip, #-514]	; 0xfffffdfe
     2f8:	01000000 	mrseq	r0, (UNDEF: 0)
     2fc:	08010400 	stmdaeq	r1, {sl}
     300:	000000be 	strheq	r0, [r0], -lr
     304:	0003ed05 	andeq	lr, r3, r5, lsl #26
     308:	02030200 	andeq	r0, r3, #0, 4
     30c:	00000025 	andeq	r0, r0, r5, lsr #32
     310:	17024802 	strne	r4, [r2, -r2, lsl #16]
     314:	00009509 	andeq	r9, r0, r9, lsl #10
     318:	02b70600 	adcseq	r0, r7, #0, 12
     31c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     320:	00009509 	andeq	r9, r0, r9, lsl #10
     324:	7b060000 	blvc	18032c <startup-0x1fe7fcd4>
     328:	02000002 	andeq	r0, r0, #2
     32c:	00950919 	addseq	r0, r5, r9, lsl r9
     330:	06040000 	streq	r0, [r4], -r0
     334:	00000281 	andeq	r0, r0, r1, lsl #5
     338:	95091a02 	strls	r1, [r9, #-2562]	; 0xfffff5fe
     33c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     340:	00787003 	rsbseq	r7, r8, r3
     344:	9c0b1b02 			; <UNDEFINED> instruction: 0x9c0b1b02
     348:	0c000000 	stceq	0, cr0, [r0], {-0}
     34c:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     350:	00746e69 	rsbseq	r6, r4, r9, ror #28
     354:	00004c08 	andeq	r4, r0, r8, lsl #24
     358:	0000ac00 	andeq	sl, r0, r0, lsl #24
     35c:	00ac0900 	adceq	r0, ip, r0, lsl #18
     360:	001d0000 	andseq	r0, sp, r0
     364:	db070404 	blle	1c137c <startup-0x1fe3ec84>
     368:	05000000 	streq	r0, [r0, #-0]
     36c:	000001f2 	strdeq	r0, [r0], -r2
     370:	58021c02 	stmdapl	r2, {r1, sl, fp, ip}
     374:	05000000 	streq	r0, [r0, #-0]
     378:	000001f1 	strdeq	r0, [r0], -r1
     37c:	cb0e1c02 	blgt	38738c <startup-0x1fc78c74>
     380:	0a000000 	beq	388 <startup-0x1ffffc78>
     384:	00005804 	andeq	r5, r0, r4, lsl #16
     388:	02b20b00 	adcseq	r0, r2, #0, 22
     38c:	02240000 	eoreq	r0, r4, #0
     390:	0154101e 	cmpeq	r4, lr, lsl r0
     394:	67030000 	strvs	r0, [r3, -r0]
     398:	02006f65 	andeq	r6, r0, #404	; 0x194
     39c:	00bf0f1f 	adcseq	r0, pc, pc, lsl pc	; <UNPREDICTABLE>
     3a0:	06000000 	streq	r0, [r0], -r0
     3a4:	00000212 	andeq	r0, r0, r2, lsl r2
     3a8:	95092002 	strls	r2, [r9, #-2]
     3ac:	04000000 	streq	r0, [r0], #-0
     3b0:	00021706 	andeq	r1, r2, r6, lsl #14
     3b4:	0e200200 	cdpeq	2, 2, cr0, cr0, cr0, {0}
     3b8:	00000095 	muleq	r0, r5, r0
     3bc:	023b0608 	eorseq	r0, fp, #8, 12	; 0x800000
     3c0:	21020000 	mrscs	r0, (UNDEF: 2)
     3c4:	00009509 	andeq	r9, r0, r9, lsl #10
     3c8:	40060c00 	andmi	r0, r6, r0, lsl #24
     3cc:	02000002 	andeq	r0, r0, #2
     3d0:	00950e21 	addseq	r0, r5, r1, lsr #28
     3d4:	06100000 	ldreq	r0, [r0], -r0
     3d8:	0000029b 	muleq	r0, fp, r2
     3dc:	650d2202 	strvs	r2, [sp, #-514]	; 0xfffffdfe
     3e0:	14000001 	strne	r0, [r0], #-1
     3e4:	0005c706 	andeq	ip, r5, r6, lsl #14
     3e8:	0d230200 	sfmeq	f0, 4, [r3, #-0]
     3ec:	00000165 	andeq	r0, r0, r5, ror #2
     3f0:	020d0618 	andeq	r0, sp, #24, 12	; 0x1800000
     3f4:	24020000 	strcs	r0, [r2], #-0
     3f8:	0001650c 	andeq	r6, r1, ip, lsl #10
     3fc:	31061c00 	tstcc	r6, r0, lsl #24
     400:	02000002 	andeq	r0, r0, #2
     404:	01800d25 	orreq	r0, r0, r5, lsr #26
     408:	00200000 	eoreq	r0, r0, r0
     40c:	00015f0c 	andeq	r5, r1, ip, lsl #30
     410:	015f0d00 	cmpeq	pc, r0, lsl #26
     414:	0a000000 	beq	41c <startup-0x1ffffbe4>
     418:	0000d104 	andeq	sp, r0, r4, lsl #2
     41c:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
     420:	0c000001 	stceq	0, cr0, [r0], {1}
     424:	00000180 	andeq	r0, r0, r0, lsl #3
     428:	00015f0d 	andeq	r5, r1, sp, lsl #30
     42c:	00950d00 	addseq	r0, r5, r0, lsl #26
     430:	950d0000 	strls	r0, [sp, #-0]
     434:	00000000 	andeq	r0, r0, r0
     438:	016b040a 	cmneq	fp, sl, lsl #8
     43c:	8d050000 	stchi	0, cr0, [r5, #-0]
     440:	02000005 	andeq	r0, r0, #5
     444:	00d10226 	sbcseq	r0, r1, r6, lsr #4
     448:	02040000 	andeq	r0, r4, #0
     44c:	0000d507 	andeq	sp, r0, r7, lsl #10
     450:	08010400 	stmdaeq	r1, {sl}
     454:	000000b5 	strheq	r0, [r0], -r5
     458:	0002450e 	andeq	r4, r2, lr, lsl #10
     45c:	0a040100 	beq	100864 <startup-0x1feff79c>
     460:	000000b3 	strheq	r0, [r0], -r3
     464:	13000305 	movwne	r0, #773	; 0x305
     468:	530e2000 	movwpl	r2, #57344	; 0xe000
     46c:	01000002 	tsteq	r0, r2
     470:	00b30a0c 	adcseq	r0, r3, ip, lsl #20
     474:	03050000 	movweq	r0, #20480	; 0x5000
     478:	20001348 	andcs	r1, r0, r8, asr #6
     47c:	0002870f 	andeq	r8, r2, pc, lsl #14
     480:	08580100 	ldmdaeq	r8, {r8}^
     484:	00000186 	andeq	r0, r0, r6, lsl #3
     488:	20000558 	andcs	r0, r0, r8, asr r5
     48c:	00000070 	andeq	r0, r0, r0, ror r0
     490:	020d9c01 	andeq	r9, sp, #256	; 0x100
     494:	3b100000 	blcc	40049c <startup-0x1fbffb64>
     498:	01000002 	tsteq	r0, r2
     49c:	00952058 	addseq	r2, r5, r8, asr r0
     4a0:	91020000 	mrsls	r0, (UNDEF: 2)
     4a4:	02401040 	subeq	r1, r0, #64	; 0x40
     4a8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     4ac:	0000952a 	andeq	r9, r0, sl, lsr #10
     4b0:	bc910300 	ldclt	3, cr0, [r1], {0}
     4b4:	028e117f 	addeq	r1, lr, #-1073741793	; 0xc000001f
     4b8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     4bc:	0001860c 	andeq	r8, r1, ip, lsl #12
     4c0:	4c910200 	lfmmi	f0, 4, [r1], {0}
     4c4:	02a00f00 	adceq	r0, r0, #0, 30
     4c8:	4b010000 	blmi	404d0 <startup-0x1ffbfb30>
     4cc:	00018608 	andeq	r8, r1, r8, lsl #12
     4d0:	0004e600 	andeq	lr, r4, r0, lsl #12
     4d4:	00007220 	andeq	r7, r0, r0, lsr #4
     4d8:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
     4dc:	10000002 	andne	r0, r0, r2
     4e0:	0000023b 	andeq	r0, r0, fp, lsr r2
     4e4:	951e4b01 	ldrls	r4, [lr, #-2817]	; 0xfffff4ff
     4e8:	02000000 	andeq	r0, r0, #0
     4ec:	40104091 	mulsmi	r0, r1, r0
     4f0:	01000002 	tsteq	r0, r2
     4f4:	0095284b 	addseq	r2, r5, fp, asr #16
     4f8:	91030000 	mrsls	r0, (UNDEF: 3)
     4fc:	a7117fbc 			; <UNDEFINED> instruction: 0xa7117fbc
     500:	01000002 	tsteq	r0, r2
     504:	01860c4c 	orreq	r0, r6, ip, asr #24
     508:	91020000 	mrsls	r0, (UNDEF: 2)
     50c:	1c12004c 	ldcne	0, cr0, [r2], {76}	; 0x4c
     510:	01000002 	tsteq	r0, r2
     514:	04c60646 	strbeq	r0, [r6], #1606	; 0x646
     518:	00202000 	eoreq	r2, r0, r0
     51c:	9c010000 	stcls	0, cr0, [r1], {-0}
     520:	0000029a 	muleq	r0, sl, r2
     524:	00029410 	andeq	r9, r2, r0, lsl r4
     528:	23460100 	movtcs	r0, #24832	; 0x6100
     52c:	0000029a 	muleq	r0, sl, r2
     530:	10749102 	rsbsne	r9, r4, r2, lsl #2
     534:	000002d1 	ldrdeq	r0, [r0], -r1
     538:	952f4601 	strls	r4, [pc, #-1537]!	; ffffff3f <winning_score+0xdfffebaf>
     53c:	02000000 	andeq	r0, r0, #0
     540:	74107091 	ldrvc	r7, [r0], #-145	; 0xffffff6f
     544:	01000002 	tsteq	r0, r2
     548:	00953b46 	addseq	r3, r5, r6, asr #22
     54c:	91020000 	mrsls	r0, (UNDEF: 2)
     550:	040a006c 	streq	r0, [sl], #-108	; 0xffffff94
     554:	00000186 	andeq	r0, r0, r6, lsl #3
     558:	0001fb13 	andeq	pc, r1, r3, lsl fp	; <UNPREDICTABLE>
     55c:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
     560:	20000470 	andcs	r0, r0, r0, ror r4
     564:	00000056 	andeq	r0, r0, r6, asr r0
     568:	02c69c01 	sbceq	r9, r6, #256	; 0x100
     56c:	94100000 	ldrls	r0, [r0], #-0
     570:	01000002 	tsteq	r0, r2
     574:	029a2036 	addseq	r2, sl, #54	; 0x36
     578:	91020000 	mrsls	r0, (UNDEF: 2)
     57c:	c1130074 	tstgt	r3, r4, ror r0
     580:	01000002 	tsteq	r0, r2
     584:	03ec0622 	mvneq	r0, #35651584	; 0x2200000
     588:	00842000 	addeq	r2, r4, r0
     58c:	9c010000 	stcls	0, cr0, [r1], {-0}
     590:	000002ec 	andeq	r0, r0, ip, ror #5
     594:	00029410 	andeq	r9, r2, r0, lsl r4
     598:	1e220100 	sufnes	f0, f2, f0
     59c:	0000029a 	muleq	r0, sl, r2
     5a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     5a4:	00026313 	andeq	r6, r2, r3, lsl r3
     5a8:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
     5ac:	2000038c 	andcs	r0, r0, ip, lsl #7
     5b0:	00000060 	andeq	r0, r0, r0, rrx
     5b4:	03299c01 			; <UNDEFINED> instruction: 0x03299c01
     5b8:	94100000 	ldrls	r0, [r0], #-0
     5bc:	01000002 	tsteq	r0, r2
     5c0:	029a1f1d 	addseq	r1, sl, #29, 30	; 0x74
     5c4:	91020000 	mrsls	r0, (UNDEF: 2)
     5c8:	0394146c 	orrseq	r1, r4, #108, 8	; 0x6c000000
     5cc:	004e2000 	subeq	r2, lr, r0
     5d0:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
     5d4:	0f1e0100 	svceq	0x001e0100
     5d8:	00000095 	muleq	r0, r5, r0
     5dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     5e0:	02e81600 	rsceq	r1, r8, #0, 12
     5e4:	17010000 	strne	r0, [r1, -r0]
     5e8:	00032c06 	andeq	r2, r3, r6, lsl #24
     5ec:	00006020 	andeq	r6, r0, r0, lsr #32
     5f0:	109c0100 	addsne	r0, ip, r0, lsl #2
     5f4:	00000294 	muleq	r0, r4, r2
     5f8:	9a1e1701 	bls	786204 <startup-0x1f879dfc>
     5fc:	02000002 	andeq	r0, r0, #2
     600:	34146c91 	ldrcc	r6, [r4], #-3217	; 0xfffff36f
     604:	4e200003 	cdpmi	0, 2, cr0, cr0, cr3, {0}
     608:	15000000 	strne	r0, [r0, #-0]
     60c:	18010069 	stmdane	r1, {r0, r3, r5, r6}
     610:	0000950d 	andeq	r9, r0, sp, lsl #10
     614:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     618:	32000000 	andcc	r0, r0, #0
     61c:	04000001 	streq	r0, [r0], #-1
     620:	00026800 	andeq	r6, r2, r0, lsl #16
     624:	00010400 	andeq	r0, r1, r0, lsl #8
     628:	0c000000 	stceq	0, cr0, [r0], {-0}
     62c:	00000345 	andeq	r0, r0, r5, asr #6
     630:	0000018c 	andeq	r0, r0, ip, lsl #3
     634:	200005c8 	andcs	r0, r0, r8, asr #11
     638:	00000120 	andeq	r0, r0, r0, lsr #2
     63c:	0000034b 	andeq	r0, r0, fp, asr #6
     640:	db070402 	blle	1c1650 <startup-0x1fe3e9b0>
     644:	02000000 	andeq	r0, r0, #0
     648:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     64c:	01020000 	mrseq	r0, (UNDEF: 2)
     650:	0000b508 	andeq	fp, r0, r8, lsl #10
     654:	020c0300 	andeq	r0, ip, #0, 6
     658:	006b1201 	rsbeq	r1, fp, r1, lsl #4
     65c:	10040000 	andne	r0, r4, r0
     660:	02000003 	andeq	r0, r0, #3
     664:	00700602 	rsbseq	r0, r0, r2, lsl #12
     668:	04000000 	streq	r0, [r0], #-0
     66c:	0000030c 	andeq	r0, r0, ip, lsl #6
     670:	70060302 	andvc	r0, r6, r2, lsl #6
     674:	04000000 	streq	r0, [r0], #-0
     678:	00030404 	andeq	r0, r3, r4, lsl #8
     67c:	06040200 	streq	r0, [r4], -r0, lsl #4
     680:	00000070 	andeq	r0, r0, r0, ror r0
     684:	3a050008 	bcc	1406ac <startup-0x1febf954>
     688:	06000000 	streq	r0, [r0], -r0
     68c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     690:	18070074 	stmdane	r7, {r2, r4, r5, r6}
     694:	02000003 	andeq	r0, r0, #3
     698:	006b0305 	rsbeq	r0, fp, r5, lsl #6
     69c:	40080000 	andmi	r0, r8, r0
     6a0:	02000003 	andeq	r0, r0, #3
     6a4:	00770d06 	rsbseq	r0, r7, r6, lsl #26
     6a8:	03050000 	movweq	r0, #20480	; 0x5000
     6ac:	200012dc 	ldrdcs	r1, [r0], -ip
     6b0:	00031009 	andeq	r1, r3, r9
     6b4:	0f050100 	svceq	0x00050100
     6b8:	000000ae 	andeq	r0, r0, lr, lsr #1
     6bc:	12e80305 	rscne	r0, r8, #335544320	; 0x14000000
     6c0:	01022000 	mrseq	r2, (UNDEF: 2)
     6c4:	0000be08 	andeq	fp, r0, r8, lsl #28
     6c8:	00a70500 	adceq	r0, r7, r0, lsl #10
     6cc:	0c090000 	stceq	0, cr0, [r9], {-0}
     6d0:	01000003 	tsteq	r0, r3
     6d4:	00ae0f06 	adceq	r0, lr, r6, lsl #30
     6d8:	03050000 	movweq	r0, #20480	; 0x5000
     6dc:	200012e9 	andcs	r1, r0, r9, ror #5
     6e0:	00030409 	andeq	r0, r3, r9, lsl #8
     6e4:	0f070100 	svceq	0x00070100
     6e8:	000000ae 	andeq	r0, r0, lr, lsr #1
     6ec:	12ea0305 	rscne	r0, sl, #335544320	; 0x14000000
     6f0:	2a0a2000 	bcs	2886f8 <startup-0x1fd77908>
     6f4:	01000003 	tsteq	r0, r3
     6f8:	06ac0625 	strteq	r0, [ip], r5, lsr #12
     6fc:	003c2000 	eorseq	r2, ip, r0
     700:	9c010000 	stcls	0, cr0, [r1], {-0}
     704:	00034d0a 	andeq	r4, r3, sl, lsl #26
     708:	06210100 	strteq	r0, [r1], -r0, lsl #2
     70c:	20000690 	mulcs	r0, r0, r6
     710:	0000001c 	andeq	r0, r0, ip, lsl r0
     714:	1d0a9c01 	stcne	12, cr9, [sl, #-4]
     718:	01000003 	tsteq	r0, r3
     71c:	0674061d 			; <UNDEFINED> instruction: 0x0674061d
     720:	001c2000 	andseq	r2, ip, r0
     724:	9c010000 	stcls	0, cr0, [r1], {-0}
     728:	0003340b 	andeq	r3, r3, fp, lsl #8
     72c:	05190100 	ldreq	r0, [r9, #-256]	; 0xffffff00
     730:	00000070 	andeq	r0, r0, r0, ror r0
     734:	20000644 	andcs	r0, r0, r4, asr #12
     738:	00000030 	andeq	r0, r0, r0, lsr r0
     73c:	f80a9c01 			; <UNDEFINED> instruction: 0xf80a9c01
     740:	01000002 	tsteq	r0, r2
     744:	05c8060d 	strbeq	r0, [r8, #1549]	; 0x60d
     748:	007c2000 	rsbseq	r2, ip, r0
     74c:	9c010000 	stcls	0, cr0, [r1], {-0}
     750:	00013c00 	andeq	r3, r1, r0, lsl #24
     754:	1e000400 	cfcpysne	mvf0, mvf0
     758:	04000003 	streq	r0, [r0], #-3
     75c:	00000001 	andeq	r0, r0, r1
     760:	03680c00 	cmneq	r8, #0, 24
     764:	018c0000 	orreq	r0, ip, r0
     768:	06e80000 	strbteq	r0, [r8], r0
     76c:	006a2000 	rsbeq	r2, sl, r0
     770:	03fe0000 	mvnseq	r0, #0
     774:	1a020000 	bne	8077c <startup-0x1ff7f884>
     778:	d6090501 	strle	r0, [r9], -r1, lsl #10
     77c:	03000000 	movweq	r0, #0
     780:	01007273 	tsteq	r0, r3, ror r2
     784:	00dd1a06 	sbcseq	r1, sp, r6, lsl #20
     788:	04000000 	streq	r0, [r0], #-0
     78c:	0000035f 	andeq	r0, r0, pc, asr r3
     790:	dd1a0701 	ldcle	7, cr0, [sl, #-4]
     794:	02000000 	andeq	r0, r0, #0
     798:	00726403 	rsbseq	r6, r2, r3, lsl #8
     79c:	dd1a0801 	ldcle	8, cr0, [sl, #-4]
     7a0:	04000000 	streq	r0, [r0], #-0
     7a4:	00037004 	andeq	r7, r3, r4
     7a8:	1a090100 	bne	240bb0 <startup-0x1fdbf450>
     7ac:	000000dd 	ldrdeq	r0, [r0], -sp
     7b0:	72620306 	rsbvc	r0, r2, #402653184	; 0x18000000
     7b4:	0a010072 	beq	40984 <startup-0x1ffbf67c>
     7b8:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     7bc:	79040800 	stmdbvc	r4, {fp}
     7c0:	01000003 	tsteq	r0, r3
     7c4:	00dd1a0b 	sbcseq	r1, sp, fp, lsl #20
     7c8:	030a0000 	movweq	r0, #40960	; 0xa000
     7cc:	00317263 	eorseq	r7, r1, r3, ror #4
     7d0:	dd1a0c01 	ldcle	12, cr0, [sl, #-4]
     7d4:	0c000000 	stceq	0, cr0, [r0], {-0}
     7d8:	00038204 	andeq	r8, r3, r4, lsl #4
     7dc:	1a0d0100 	bne	340be4 <startup-0x1fcbf41c>
     7e0:	000000dd 	ldrdeq	r0, [r0], -sp
     7e4:	7263030e 	rsbvc	r0, r3, #939524096	; 0x38000000
     7e8:	0e010032 	mcreq	0, 0, r0, cr1, cr2, {1}
     7ec:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     7f0:	8b041000 	blhi	1047f8 <startup-0x1fefb808>
     7f4:	01000003 	tsteq	r0, r3
     7f8:	00dd1a0f 	sbcseq	r1, sp, pc, lsl #20
     7fc:	03120000 	tsteq	r2, #0
     800:	00337263 	eorseq	r7, r3, r3, ror #4
     804:	dd1a1001 	ldcle	0, cr1, [sl, #-4]
     808:	14000000 	strne	r0, [r0], #-0
     80c:	00039404 	andeq	r9, r3, r4, lsl #8
     810:	1a110100 	bne	440c18 <startup-0x1fbbf3e8>
     814:	000000dd 	ldrdeq	r0, [r0], -sp
     818:	039d0416 	orrseq	r0, sp, #369098752	; 0x16000000
     81c:	12010000 	andne	r0, r1, #0
     820:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     824:	05001800 	streq	r1, [r0, #-2048]	; 0xfffff800
     828:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     82c:	d6060000 	strle	r0, [r6], -r0
     830:	07000000 	streq	r0, [r0, -r0]
     834:	00000359 	andeq	r0, r0, r9, asr r3
     838:	25031301 	strcs	r1, [r3, #-769]	; 0xfffffcff
     83c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     840:	000003a2 	andeq	r0, r0, r2, lsr #7
     844:	28062101 	stmdacs	r6, {r0, r8, sp}
     848:	2a200007 	bcs	80086c <startup-0x1f7ff794>
     84c:	01000000 	mrseq	r0, (UNDEF: 0)
     850:	0001129c 	muleq	r1, ip, r2
     854:	00730900 	rsbseq	r0, r3, r0, lsl #18
     858:	12122101 	andsne	r2, r2, #1073741824	; 0x40000000
     85c:	02000001 	andeq	r0, r0, #1
     860:	0a007491 	beq	1daac <startup-0x1ffe2554>
     864:	00011804 	andeq	r1, r1, r4, lsl #16
     868:	08010500 	stmdaeq	r1, {r8, sl}
     86c:	000000be 	strheq	r0, [r0], -lr
     870:	0003a80b 	andeq	sl, r3, fp, lsl #16
     874:	0d170100 	ldfeqs	f0, [r7, #-0]
     878:	200006e8 	andcs	r0, r0, r8, ror #13
     87c:	00000040 	andeq	r0, r0, r0, asr #32
     880:	63099c01 	movwvs	r9, #39937	; 0x9c01
     884:	1d170100 	ldfnes	f0, [r7, #-0]
     888:	00000118 	andeq	r0, r0, r8, lsl r1
     88c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     890:	00009000 	andeq	r9, r0, r0
     894:	d2000400 	andle	r0, r0, #0, 8
     898:	04000003 	streq	r0, [r0], #-3
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	03ca0c00 	biceq	r0, sl, #0, 24
     8a4:	018c0000 	orreq	r0, ip, r0
     8a8:	07540000 	ldrbeq	r0, [r4, -r0]
     8ac:	008c2000 	addeq	r2, ip, r0
     8b0:	04740000 	ldrbteq	r0, [r4], #-0
     8b4:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
     8b8:	01000003 	tsteq	r0, r3
     8bc:	079c0612 			; <UNDEFINED> instruction: 0x079c0612
     8c0:	00442000 	subeq	r2, r4, r0
     8c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8c8:	0003d203 	andeq	sp, r3, r3, lsl #4
     8cc:	060d0100 	streq	r0, [sp], -r0, lsl #2
     8d0:	2000078a 	andcs	r0, r0, sl, lsl #15
     8d4:	00000012 	andeq	r0, r0, r2, lsl r0
     8d8:	b3049c01 	movwlt	r9, #19457	; 0x4c01
     8dc:	01000003 	tsteq	r0, r3
     8e0:	07540603 	ldrbeq	r0, [r4, -r3, lsl #12]
     8e4:	00362000 	eorseq	r2, r6, r0
     8e8:	9c010000 	stcls	0, cr0, [r1], {-0}
     8ec:	00000085 	andeq	r0, r0, r5, lsl #1
     8f0:	00736d05 	rsbseq	r6, r3, r5, lsl #26
     8f4:	851e0301 	ldrhi	r0, [lr, #-769]	; 0xfffffcff
     8f8:	02000000 	andeq	r0, r0, #0
     8fc:	5c066c91 	stcpl	12, cr6, [r6], {145}	; 0x91
     900:	24200007 	strtcs	r0, [r0], #-7
     904:	07000000 	streq	r0, [r0, -r0]
     908:	04010069 	streq	r0, [r1], #-105	; 0xffffff97
     90c:	00008c0e 	andeq	r8, r0, lr, lsl #24
     910:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     914:	04080000 	streq	r0, [r8], #-0
     918:	0000db07 	andeq	sp, r0, r7, lsl #22
     91c:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
     920:	00746e69 	rsbseq	r6, r4, r9, ror #28
     924:	00033200 	andeq	r3, r3, r0, lsl #4
     928:	73000400 	movwvc	r0, #1024	; 0x400
     92c:	04000004 	streq	r0, [r0], #-4
     930:	00000001 	andeq	r0, r0, r1
     934:	04720c00 	ldrbteq	r0, [r2], #-3072	; 0xfffff400
     938:	018c0000 	orreq	r0, ip, r0
     93c:	07e00000 	strbeq	r0, [r0, r0]!
     940:	03122000 	tsteq	r2, #0
     944:	05270000 	streq	r0, [r7, #-0]!
     948:	02020000 	andeq	r0, r2, #0
     94c:	45090102 	strmi	r0, [r9, #-258]	; 0xfffffefe
     950:	03000000 	movweq	r0, #0
     954:	02020078 	andeq	r0, r2, #120	; 0x78
     958:	0000450a 	andeq	r4, r0, sl, lsl #10
     95c:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     960:	0c020200 	sfmeq	f0, 4, [r2], {-0}
     964:	00000045 	andeq	r0, r0, r5, asr #32
     968:	01040001 	tsteq	r4, r1
     96c:	0000be08 	andeq	fp, r0, r8, lsl #28
     970:	03ed0500 	mvneq	r0, #0, 10
     974:	03020000 	movweq	r0, #8192	; 0x2000
     978:	00002502 	andeq	r2, r0, r2, lsl #10
     97c:	02040200 	andeq	r0, r4, #0, 4
     980:	007a0905 	rsbseq	r0, sl, r5, lsl #18
     984:	70030000 	andvc	r0, r3, r0
     988:	06020031 			; <UNDEFINED> instruction: 0x06020031
     98c:	00004c0b 	andeq	r4, r0, fp, lsl #24
     990:	70030000 	andvc	r0, r3, r0
     994:	07020032 	smladxeq	r2, r2, r0, r0
     998:	00004c0b 	andeq	r4, r0, fp, lsl #24
     99c:	05000200 	streq	r0, [r0, #-512]	; 0xfffffe00
     9a0:	00000444 	andeq	r0, r0, r4, asr #8
     9a4:	58020802 	stmdapl	r2, {r1, fp}
     9a8:	02000000 	andeq	r0, r0, #0
     9ac:	090a0204 	stmdbeq	sl, {r2, r9}
     9b0:	000000b1 	strheq	r0, [r0], -r1
     9b4:	02007003 	andeq	r7, r0, #3
     9b8:	004c0b0b 	subeq	r0, ip, fp, lsl #22
     9bc:	03000000 	movweq	r0, #0
     9c0:	0c020078 	stceq	0, cr0, [r2], {120}	; 0x78
     9c4:	0000450a 	andeq	r4, r0, sl, lsl #10
     9c8:	79030200 	stmdbvc	r3, {r9}
     9cc:	0c0c0200 	sfmeq	f0, 4, [ip], {-0}
     9d0:	00000045 	andeq	r0, r0, r5, asr #32
     9d4:	60050003 	andvs	r0, r5, r3
     9d8:	02000004 	andeq	r0, r0, #4
     9dc:	0086020d 	addeq	r0, r6, sp, lsl #4
     9e0:	65060000 	strvs	r0, [r6, #-0]
     9e4:	08000004 	stmdaeq	r0, {r2}
     9e8:	ee100f02 	cdp	15, 1, cr0, cr0, cr2, {0}
     9ec:	03000000 	movweq	r0, #0
     9f0:	10020078 	andne	r0, r2, r8, ror r0
     9f4:	0000450a 	andeq	r4, r0, sl, lsl #10
     9f8:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     9fc:	0c100200 	lfmeq	f0, 4, [r0], {-0}
     a00:	00000045 	andeq	r0, r0, r5, asr #32
     a04:	03de0701 	bicseq	r0, lr, #262144	; 0x40000
     a08:	11020000 	mrsne	r0, (UNDEF: 2)
     a0c:	0000ee1a 	andeq	lr, r0, sl, lsl lr
     a10:	08000400 	stmdaeq	r0, {sl}
     a14:	0000bd04 	andeq	fp, r0, r4, lsl #26
     a18:	03e90500 	mvneq	r0, #0, 10
     a1c:	13020000 	movwne	r0, #8192	; 0x2000
     a20:	0000bd02 	andeq	fp, r0, r2, lsl #26
     a24:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
     a28:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a2c:	db070404 	blle	1c1a44 <startup-0x1fe3e5bc>
     a30:	04000000 	streq	r0, [r0], #-0
     a34:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     a38:	01040000 	mrseq	r0, (UNDEF: 4)
     a3c:	0000b508 	andeq	fp, r0, r8, lsl #10
     a40:	03f90a00 	mvnseq	r0, #0, 20
     a44:	4f010000 	svcmi	0x00010000
     a48:	00004506 	andeq	r4, r0, r6, lsl #10
     a4c:	000a7200 	andeq	r7, sl, r0, lsl #4
     a50:	00008020 	andeq	r8, r0, r0, lsr #32
     a54:	8a9c0100 	bhi	fe700e5c <winning_score+0xde6ffacc>
     a58:	0b000001 	bleq	a64 <startup-0x1ffff59c>
     a5c:	0000043b 	andeq	r0, r0, fp, lsr r4
     a60:	f41d4f01 			; <UNDEFINED> instruction: 0xf41d4f01
     a64:	02000000 	andeq	r0, r0, #0
     a68:	700c5091 	mulvc	ip, r1, r0
     a6c:	50010030 	andpl	r0, r1, r0, lsr r0
     a70:	00004c0b 	andeq	r4, r0, fp, lsl #24
     a74:	60910200 	addsvs	r0, r1, r0, lsl #4
     a78:	0031700c 	eorseq	r7, r1, ip
     a7c:	4c0b5101 	stfmis	f5, [fp], {1}
     a80:	02000000 	andeq	r0, r0, #0
     a84:	700c5c91 	mulvc	ip, r1, ip
     a88:	01007274 	tsteq	r0, r4, ror r2
     a8c:	00ee1a53 	rsceq	r1, lr, r3, asr sl
     a90:	91020000 	mrsls	r0, (UNDEF: 2)
     a94:	0a980d64 	beq	fe60402c <winning_score+0xde602c9c>
     a98:	004a2000 	subeq	r2, sl, r0
     a9c:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
     aa0:	01000004 	tsteq	r0, r4
     aa4:	007a0e57 	rsbseq	r0, sl, r7, asr lr
     aa8:	91020000 	mrsls	r0, (UNDEF: 2)
     aac:	0a000058 	beq	c14 <startup-0x1ffff3ec>
     ab0:	0000044f 	andeq	r0, r0, pc, asr #8
     ab4:	45064101 	strmi	r4, [r6, #-257]	; 0xfffffeff
     ab8:	3c000000 	stccc	0, cr0, [r0], {-0}
     abc:	36200009 	strtcc	r0, [r0], -r9
     ac0:	01000001 	tsteq	r0, r1
     ac4:	00020a9c 	muleq	r2, ip, sl
     ac8:	04540b00 	ldrbeq	r0, [r4], #-2816	; 0xfffff500
     acc:	41010000 	mrsmi	r0, (UNDEF: 1)
     ad0:	0000b115 	andeq	fp, r0, r5, lsl r1
     ad4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     ad8:	0003f30e 	andeq	pc, r3, lr, lsl #6
     adc:	0b420100 	bleq	1080ee4 <startup-0x1ef7f11c>
     ae0:	0000004c 	andeq	r0, r0, ip, asr #32
     ae4:	0c649102 	stfeqp	f1, [r4], #-8
     ae8:	00646e65 	rsbeq	r6, r4, r5, ror #28
     aec:	4c0b4301 	stcmi	3, cr4, [fp], {1}
     af0:	02000000 	andeq	r0, r0, #0
     af4:	6c0e6091 	stcvs	0, cr6, [lr], {145}	; 0x91
     af8:	01000004 	tsteq	r0, r4
     afc:	004c0b44 	subeq	r0, ip, r4, asr #22
     b00:	91020000 	mrsls	r0, (UNDEF: 2)
     b04:	00780c5c 	rsbseq	r0, r8, ip, asr ip
     b08:	450a4501 	strmi	r4, [sl, #-1281]	; 0xfffffaff
     b0c:	02000000 	andeq	r0, r0, #0
     b10:	790c6791 	stmdbvc	ip, {r0, r4, r7, r8, r9, sl, sp, lr}
     b14:	0a460100 	beq	1180f1c <startup-0x1ee7f0e4>
     b18:	00000045 	andeq	r0, r0, r5, asr #32
     b1c:	0e669102 	lgneqs	f1, f2
     b20:	0000040e 	andeq	r0, r0, lr, lsl #8
     b24:	7a0a4701 	bvc	292730 <startup-0x1fd6d8d0>
     b28:	02000000 	andeq	r0, r0, #0
     b2c:	0a005891 	beq	16d78 <startup-0x1ffe9288>
     b30:	00000406 	andeq	r0, r0, r6, lsl #8
     b34:	45063301 	strmi	r3, [r6, #-769]	; 0xfffffcff
     b38:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     b3c:	48200008 	stmdami	r0!, {r3}
     b40:	01000000 	mrseq	r0, (UNDEF: 0)
     b44:	00026c9c 	muleq	r2, ip, ip
     b48:	040e0b00 	streq	r0, [lr], #-2816	; 0xfffff500
     b4c:	33010000 	movwcc	r0, #4096	; 0x1000
     b50:	00007a18 	andeq	r7, r0, r8, lsl sl
     b54:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     b58:	0030780c 	eorseq	r7, r0, ip, lsl #16
     b5c:	000d3401 	andeq	r3, sp, r1, lsl #8
     b60:	02000001 	andeq	r0, r0, #1
     b64:	780c7491 	stmdavc	ip, {r0, r4, r7, sl, ip, sp, lr}
     b68:	35010031 	strcc	r0, [r1, #-49]	; 0xffffffcf
     b6c:	0001000d 	andeq	r0, r1, sp
     b70:	70910200 	addsvc	r0, r1, r0, lsl #4
     b74:	0030790c 	eorseq	r7, r0, ip, lsl #18
     b78:	000d3701 	andeq	r3, sp, r1, lsl #14
     b7c:	02000001 	andeq	r0, r0, #1
     b80:	790c6c91 	stmdbvc	ip, {r0, r4, r7, sl, fp, sp, lr}
     b84:	38010031 	stmdacc	r1, {r0, r4, r5}
     b88:	0001000d 	andeq	r0, r1, sp
     b8c:	68910200 	ldmvs	r1, {r9}
     b90:	04250f00 	strteq	r0, [r5], #-3840	; 0xfffff100
     b94:	07010000 	streq	r0, [r1, -r0]
     b98:	0007e006 	andeq	lr, r7, r6
     b9c:	00011420 	andeq	r1, r1, r0, lsr #8
     ba0:	109c0100 	addsne	r0, ip, r0, lsl #2
     ba4:	01003078 	tsteq	r0, r8, ror r0
     ba8:	01002007 	tsteq	r0, r7
     bac:	91020000 	mrsls	r0, (UNDEF: 2)
     bb0:	31781054 	cmncc	r8, r4, asr r0
     bb4:	27070100 	strcs	r0, [r7, -r0, lsl #2]
     bb8:	00000100 	andeq	r0, r0, r0, lsl #2
     bbc:	10509102 	subsne	r9, r0, r2, lsl #2
     bc0:	01003079 	tsteq	r0, r9, ror r0
     bc4:	01002e07 	tsteq	r0, r7, lsl #28
     bc8:	91020000 	mrsls	r0, (UNDEF: 2)
     bcc:	3179104c 	cmncc	r9, ip, asr #32
     bd0:	35070100 	strcc	r0, [r7, #-256]	; 0xffffff00
     bd4:	00000100 	andeq	r0, r0, r0, lsl #2
     bd8:	0e489102 	sqteqe	f1, f2
     bdc:	00000449 	andeq	r0, r0, r9, asr #8
     be0:	450a0801 	strmi	r0, [sl, #-2049]	; 0xfffff7ff
     be4:	02000000 	andeq	r0, r0, #0
     be8:	130e7791 	movwne	r7, #59281	; 0xe791
     bec:	01000004 	tsteq	r0, r4
     bf0:	01000909 	tsteq	r0, r9, lsl #18
     bf4:	91020000 	mrsls	r0, (UNDEF: 2)
     bf8:	04590e60 	ldrbeq	r0, [r9], #-3680	; 0xfffff1a0
     bfc:	1a010000 	bne	40c04 <startup-0x1ffbf3fc>
     c00:	00010009 	andeq	r0, r1, r9
     c04:	5c910200 	lfmpl	f0, 4, [r1], {0}
     c08:	00041e0e 	andeq	r1, r4, lr, lsl #28
     c0c:	091b0100 	ldmdbeq	fp, {r8}
     c10:	00000100 	andeq	r0, r0, r0, lsl #2
     c14:	0e589102 	logeqe	f1, f2
     c18:	00000418 	andeq	r0, r0, r8, lsl r4
     c1c:	00091c01 	andeq	r1, r9, r1, lsl #24
     c20:	02000001 	andeq	r0, r0, #1
     c24:	790c7091 	stmdbvc	ip, {r0, r4, r7, ip, sp, lr}
     c28:	091d0100 	ldmdbeq	sp, {r8}
     c2c:	00000100 	andeq	r0, r0, r0, lsl #2
     c30:	0e6c9102 	lgneqe	f1, f2
     c34:	000003e3 	andeq	r0, r0, r3, ror #7
     c38:	00091e01 	andeq	r1, r9, r1, lsl #28
     c3c:	02000001 	andeq	r0, r0, #1
     c40:	900d6891 	mulls	sp, r1, r8
     c44:	5a200008 	bpl	800c6c <startup-0x1f7ff394>
     c48:	0c000000 	stceq	0, cr0, [r0], {-0}
     c4c:	24010078 	strcs	r0, [r1], #-120	; 0xffffff88
     c50:	0001000d 	andeq	r0, r1, sp
     c54:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     c58:	45000000 	strmi	r0, [r0, #-0]
     c5c:	04000001 	streq	r0, [r0], #-1
     c60:	00057c00 	andeq	r7, r5, r0, lsl #24
     c64:	00010400 	andeq	r0, r1, r0, lsl #8
     c68:	0c000000 	stceq	0, cr0, [r0], {-0}
     c6c:	000004ab 	andeq	r0, r0, fp, lsr #9
     c70:	0000018c 	andeq	r0, r0, ip, lsl #3
     c74:	20000af4 	strdcs	r0, [r0], -r4
     c78:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c7c:	000006d3 	ldrdeq	r0, [r0], -r3
     c80:	db070402 	blle	1c1c90 <startup-0x1fe3e370>
     c84:	02000000 	andeq	r0, r0, #0
     c88:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     c8c:	01020000 	mrseq	r0, (UNDEF: 2)
     c90:	0000b508 	andeq	fp, r0, r8, lsl #10
     c94:	04c20300 	strbeq	r0, [r2], #768	; 0x300
     c98:	52010000 	andpl	r0, r1, #0
     c9c:	000c7c06 	andeq	r7, ip, r6, lsl #24
     ca0:	00004820 	andeq	r4, r0, r0, lsr #16
     ca4:	6d9c0100 	ldfvss	f0, [ip]
     ca8:	04000000 	streq	r0, [r0], #-0
     cac:	52010063 	andpl	r0, r1, #99	; 0x63
     cb0:	0000331d 	andeq	r3, r0, sp, lsl r3
     cb4:	5f910200 	svcpl	0x00910200
     cb8:	0004ca05 	andeq	ip, r4, r5, lsl #20
     cbc:	0a540100 	beq	15010c4 <startup-0x1eafef3c>
     cc0:	0000006d 	andeq	r0, r0, sp, rrx
     cc4:	00609102 	rsbeq	r9, r0, r2, lsl #2
     cc8:	00007d06 	andeq	r7, r0, r6, lsl #26
     ccc:	00007d00 	andeq	r7, r0, r0, lsl #26
     cd0:	00250700 	eoreq	r0, r5, r0, lsl #14
     cd4:	000f0000 	andeq	r0, pc, r0
     cd8:	be080102 	adflte	f0, f0, f2
     cdc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ce0:	0000048d 	andeq	r0, r0, sp, lsl #9
     ce4:	330f3901 	movwcc	r3, #63745	; 0xf901
     ce8:	00000000 	andeq	r0, r0, r0
     cec:	7c20000c 	stcvc	0, cr0, [r0], #-48	; 0xffffffd0
     cf0:	01000000 	mrseq	r0, (UNDEF: 0)
     cf4:	0000e59c 	muleq	r0, ip, r5
     cf8:	04130500 	ldreq	r0, [r3], #-1280	; 0xfffffb00
     cfc:	3c010000 	stccc	0, cr0, [r1], {-0}
     d00:	0000e509 	andeq	lr, r0, r9, lsl #10
     d04:	68910200 	ldmvs	r1, {r9}
     d08:	79656b09 	stmdbvc	r5!, {r0, r3, r8, r9, fp, sp, lr}^
     d0c:	0a3f0100 	beq	fc1114 <startup-0x1f03eeec>
     d10:	0000006d 	andeq	r0, r0, sp, rrx
     d14:	05549102 	ldrbeq	r9, [r4, #-258]	; 0xfffffefe
     d18:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     d1c:	e5094101 	str	r4, [r9, #-257]	; 0xfffffeff
     d20:	02000000 	andeq	r0, r0, #0
     d24:	1c0a6491 	cfstrsne	mvf6, [sl], {145}	; 0x91
     d28:	4220000c 	eormi	r0, r0, #12
     d2c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     d30:	00776f72 	rsbseq	r6, r7, r2, ror pc
     d34:	e50e4201 	str	r4, [lr, #-513]	; 0xfffffdff
     d38:	02000000 	andeq	r0, r0, #0
     d3c:	00006c91 	muleq	r0, r1, ip
     d40:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
     d44:	0c00746e 	cfstrseq	mvf7, [r0], {110}	; 0x6e
     d48:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
     d4c:	bc062a01 			; <UNDEFINED> instruction: 0xbc062a01
     d50:	4420000b 	strtmi	r0, [r0], #-11
     d54:	01000000 	mrseq	r0, (UNDEF: 0)
     d58:	04a00d9c 	strteq	r0, [r0], #3484	; 0xd9c
     d5c:	17010000 	strne	r0, [r1, -r0]
     d60:	0000e506 	andeq	lr, r0, r6, lsl #10
     d64:	000b5800 	andeq	r5, fp, r0, lsl #16
     d68:	00006420 	andeq	r6, r0, r0, lsr #8
     d6c:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
     d70:	09000001 	stmdbeq	r0, {r0}
     d74:	1a010063 	bne	40f08 <startup-0x1ffbf0f8>
     d78:	00007d0a 	andeq	r7, r0, sl, lsl #26
     d7c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d80:	04810e00 	streq	r0, [r1], #3584	; 0xe00
     d84:	0b010000 	bleq	40d8c <startup-0x1ffbf274>
     d88:	000af406 	andeq	pc, sl, r6, lsl #8
     d8c:	00006420 	andeq	r6, r0, r0, lsr #8
     d90:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     d94:	00776f72 	rsbseq	r6, r7, r2, ror pc
     d98:	e5160b01 	ldr	r0, [r6, #-2817]	; 0xfffff4ff
     d9c:	02000000 	andeq	r0, r0, #0
     da0:	00007491 	muleq	r0, r1, r4
     da4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     da8:	06800004 	streq	r0, [r0], r4
     dac:	01040000 	mrseq	r0, (UNDEF: 4)
     db0:	00000000 	andeq	r0, r0, r0
     db4:	0005560c 	andeq	r5, r5, ip, lsl #12
     db8:	00018c00 	andeq	r8, r1, r0, lsl #24
     dbc:	000cc400 	andeq	ip, ip, r0, lsl #8
     dc0:	0005d220 	andeq	sp, r5, r0, lsr #4
     dc4:	00080900 	andeq	r0, r8, r0, lsl #18
     dc8:	02020200 	andeq	r0, r2, #0, 4
     dcc:	00450901 	subeq	r0, r5, r1, lsl #18
     dd0:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     dd4:	0a020200 	beq	815dc <startup-0x1ff7ea24>
     dd8:	00000045 	andeq	r0, r0, r5, asr #32
     ddc:	00790300 	rsbseq	r0, r9, r0, lsl #6
     de0:	450c0202 	strmi	r0, [ip, #-514]	; 0xfffffdfe
     de4:	01000000 	mrseq	r0, (UNDEF: 0)
     de8:	08010400 	stmdaeq	r1, {sl}
     dec:	000000be 	strheq	r0, [r0], -lr
     df0:	0003ed05 	andeq	lr, r3, r5, lsl #26
     df4:	02030200 	andeq	r0, r3, #0, 4
     df8:	00000025 	andeq	r0, r0, r5, lsr #32
     dfc:	17024802 	strne	r4, [r2, -r2, lsl #16]
     e00:	00009509 	andeq	r9, r0, r9, lsl #10
     e04:	02b70600 	adcseq	r0, r7, #0, 12
     e08:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     e0c:	00009509 	andeq	r9, r0, r9, lsl #10
     e10:	7b060000 	blvc	180e18 <startup-0x1fe7f1e8>
     e14:	02000002 	andeq	r0, r0, #2
     e18:	00950919 	addseq	r0, r5, r9, lsl r9
     e1c:	06040000 	streq	r0, [r4], -r0
     e20:	00000281 	andeq	r0, r0, r1, lsl #5
     e24:	95091a02 	strls	r1, [r9, #-2562]	; 0xfffff5fe
     e28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e2c:	00787003 	rsbseq	r7, r8, r3
     e30:	9c0b1b02 			; <UNDEFINED> instruction: 0x9c0b1b02
     e34:	0c000000 	stceq	0, cr0, [r0], {-0}
     e38:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     e3c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     e40:	00004c08 	andeq	r4, r0, r8, lsl #24
     e44:	0000ac00 	andeq	sl, r0, r0, lsl #24
     e48:	00ac0900 	adceq	r0, ip, r0, lsl #18
     e4c:	001d0000 	andseq	r0, sp, r0
     e50:	db070404 	blle	1c1e68 <startup-0x1fe3e198>
     e54:	05000000 	streq	r0, [r0, #-0]
     e58:	000001f1 	strdeq	r0, [r0], -r1
     e5c:	bf0e1c02 	svclt	0x000e1c02
     e60:	0a000000 	beq	e68 <startup-0x1ffff198>
     e64:	00005804 	andeq	r5, r0, r4, lsl #16
     e68:	02b20b00 	adcseq	r0, r2, #0, 22
     e6c:	02240000 	eoreq	r0, r4, #0
     e70:	0148101e 	cmpeq	r8, lr, lsl r0
     e74:	67030000 	strvs	r0, [r3, -r0]
     e78:	02006f65 	andeq	r6, r0, #404	; 0x194
     e7c:	00b30f1f 	adcseq	r0, r3, pc, lsl pc
     e80:	06000000 	streq	r0, [r0], -r0
     e84:	00000212 	andeq	r0, r0, r2, lsl r2
     e88:	95092002 	strls	r2, [r9, #-2]
     e8c:	04000000 	streq	r0, [r0], #-0
     e90:	00021706 	andeq	r1, r2, r6, lsl #14
     e94:	0e200200 	cdpeq	2, 2, cr0, cr0, cr0, {0}
     e98:	00000095 	muleq	r0, r5, r0
     e9c:	023b0608 	eorseq	r0, fp, #8, 12	; 0x800000
     ea0:	21020000 	mrscs	r0, (UNDEF: 2)
     ea4:	00009509 	andeq	r9, r0, r9, lsl #10
     ea8:	40060c00 	andmi	r0, r6, r0, lsl #24
     eac:	02000002 	andeq	r0, r0, #2
     eb0:	00950e21 	addseq	r0, r5, r1, lsr #28
     eb4:	06100000 	ldreq	r0, [r0], -r0
     eb8:	0000029b 	muleq	r0, fp, r2
     ebc:	590d2202 	stmdbpl	sp, {r1, r9, sp}
     ec0:	14000001 	strne	r0, [r0], #-1
     ec4:	0005c706 	andeq	ip, r5, r6, lsl #14
     ec8:	0d230200 	sfmeq	f0, 4, [r3, #-0]
     ecc:	00000159 	andeq	r0, r0, r9, asr r1
     ed0:	020d0618 	andeq	r0, sp, #24, 12	; 0x1800000
     ed4:	24020000 	strcs	r0, [r2], #-0
     ed8:	0001590c 	andeq	r5, r1, ip, lsl #18
     edc:	31061c00 	tstcc	r6, r0, lsl #24
     ee0:	02000002 	andeq	r0, r0, #2
     ee4:	01740d25 	cmneq	r4, r5, lsr #26
     ee8:	00200000 	eoreq	r0, r0, r0
     eec:	0001530c 	andeq	r5, r1, ip, lsl #6
     ef0:	01530d00 	cmpeq	r3, r0, lsl #26
     ef4:	0a000000 	beq	efc <startup-0x1ffff104>
     ef8:	0000c504 	andeq	ip, r0, r4, lsl #10
     efc:	48040a00 	stmdami	r4, {r9, fp}
     f00:	0c000001 	stceq	0, cr0, [r0], {1}
     f04:	00000174 	andeq	r0, r0, r4, ror r1
     f08:	0001530d 	andeq	r5, r1, sp, lsl #6
     f0c:	00950d00 	addseq	r0, r5, r0, lsl #26
     f10:	950d0000 	strls	r0, [sp, #-0]
     f14:	00000000 	andeq	r0, r0, r0
     f18:	015f040a 	cmpeq	pc, sl, lsl #8
     f1c:	8c050000 	stchi	0, cr0, [r5], {-0}
     f20:	02000005 	andeq	r0, r0, #5
     f24:	00c50a26 	sbceq	r0, r5, r6, lsr #20
     f28:	02040000 	andeq	r0, r4, #0
     f2c:	0000d507 	andeq	sp, r0, r7, lsl #10
     f30:	08010400 	stmdaeq	r1, {sl}
     f34:	000000b5 	strheq	r0, [r0], -r5
     f38:	01030c02 	tsteq	r3, r2, lsl #24
     f3c:	0001c512 	andeq	ip, r1, r2, lsl r5
     f40:	03100600 	tsteq	r0, #0, 12
     f44:	02030000 	andeq	r0, r3, #0
     f48:	00009506 	andeq	r9, r0, r6, lsl #10
     f4c:	0c060000 	stceq	0, cr0, [r6], {-0}
     f50:	03000003 	movweq	r0, #3
     f54:	00950603 	addseq	r0, r5, r3, lsl #12
     f58:	06040000 	streq	r0, [r4], -r0
     f5c:	00000304 	andeq	r0, r0, r4, lsl #6
     f60:	95060403 	strls	r0, [r6, #-1027]	; 0xfffffbfd
     f64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f68:	01940e00 	orrseq	r0, r4, r0, lsl #28
     f6c:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     f70:	03000003 	movweq	r0, #3
     f74:	01c50305 	biceq	r0, r5, r5, lsl #6
     f78:	400f0000 	andmi	r0, pc, r0
     f7c:	03000003 	movweq	r0, #3
     f80:	01ca0d06 	biceq	r0, sl, r6, lsl #26
     f84:	03050000 	movweq	r0, #20480	; 0x5000
     f88:	200012ec 	andcs	r1, r0, ip, ror #5
     f8c:	00056410 	andeq	r6, r5, r0, lsl r4
     f90:	06230100 	strteq	r0, [r3], -r0, lsl #2
     f94:	00000045 	andeq	r0, r0, r5, asr #32
     f98:	12f80305 	rscsne	r0, r8, #335544320	; 0x14000000
     f9c:	dd102000 	ldcle	0, cr2, [r0, #-0]
     fa0:	01000004 	tsteq	r0, r4
     fa4:	00450624 	subeq	r0, r5, r4, lsr #12
     fa8:	03050000 	movweq	r0, #20480	; 0x5000
     fac:	200012f9 	strdcs	r1, [r0], -r9
     fb0:	00053e10 	andeq	r3, r5, r0, lsl lr
     fb4:	06250100 	strteq	r0, [r5], -r0, lsl #2
     fb8:	00000045 	andeq	r0, r0, r5, asr #32
     fbc:	13900305 	orrsne	r0, r0, #335544320	; 0x14000000
     fc0:	01102000 	tsteq	r0, r0
     fc4:	01000005 	tsteq	r0, r5
     fc8:	02300726 	eorseq	r0, r0, #9961472	; 0x980000
     fcc:	03050000 	movweq	r0, #20480	; 0x5000
     fd0:	200012fc 	strdcs	r1, [r0], -ip
     fd4:	0045040a 	subeq	r0, r5, sl, lsl #8
     fd8:	26110000 	ldrcs	r0, [r1], -r0
     fdc:	01000005 	tsteq	r0, r5
     fe0:	009505bc 			; <UNDEFINED> instruction: 0x009505bc
     fe4:	12140000 	andsne	r0, r4, #0
     fe8:	00822000 	addeq	r2, r2, r0
     fec:	9c010000 	stcls	0, cr0, [r1], {-0}
     ff0:	0000028d 	andeq	r0, r0, sp, lsl #5
     ff4:	01006312 	tsteq	r0, r2, lsl r3
     ff8:	018d10c0 	orreq	r1, sp, r0, asr #1
     ffc:	91020000 	mrsls	r0, (UNDEF: 2)
    1000:	04fc0f6f 	ldrbteq	r0, [ip], #3951	; 0xf6f
    1004:	c1010000 	mrsgt	r0, (UNDEF: 1)
    1008:	00017a0a 	andeq	r7, r1, sl, lsl #20
    100c:	48910200 	ldmmi	r1, {r9}
    1010:	0005840f 	andeq	r8, r5, pc, lsl #8
    1014:	0ac30100 	beq	ff0c141c <winning_score+0xdf0c008c>
    1018:	0000017a 	andeq	r0, r0, sl, ror r1
    101c:	7fa49103 	svcvc	0x00a49103
    1020:	00052b0f 	andeq	r2, r5, pc, lsl #22
    1024:	0ac40100 	beq	ff10142c <winning_score+0xdf10009c>
    1028:	0000017a 	andeq	r0, r0, sl, ror r1
    102c:	7f809103 	svcvc	0x00809103
    1030:	05331300 	ldreq	r1, [r3, #-768]!	; 0xfffffd00
    1034:	72010000 	andvc	r0, r1, #0
    1038:	000f5406 	andeq	r5, pc, r6, lsl #8
    103c:	0002c020 	andeq	ip, r2, r0, lsr #32
    1040:	df9c0100 	svcle	0x009c0100
    1044:	14000002 	strne	r0, [r0], #-2
    1048:	00000584 	andeq	r0, r0, r4, lsl #11
    104c:	7a197201 	bvc	65d858 <startup-0x1f9a27a8>
    1050:	02000001 	andeq	r0, r0, #1
    1054:	2b147091 	blcs	51d2a0 <startup-0x1fae2d60>
    1058:	01000005 	tsteq	r0, r5
    105c:	017a2a72 	cmneq	sl, r2, ror sl
    1060:	91020000 	mrsls	r0, (UNDEF: 2)
    1064:	00631214 	rsbeq	r1, r3, r4, lsl r2
    1068:	8d107301 	ldchi	3, cr7, [r0, #-4]
    106c:	02000001 	andeq	r0, r0, #1
    1070:	fc0f5f91 	stc2	15, cr5, [pc], {145}	; 0x91
    1074:	01000004 	tsteq	r0, r4
    1078:	017a0a74 	cmneq	sl, r4, ror sl
    107c:	91030000 	mrsls	r0, (UNDEF: 3)
    1080:	15007fb8 	strne	r7, [r0, #-4024]	; 0xfffff048
    1084:	0000050d 	andeq	r0, r0, sp, lsl #10
    1088:	18066901 	stmdane	r6, {r0, r8, fp, sp, lr}
    108c:	3c20000f 	stccc	0, cr0, [r0], #-60	; 0xffffffc4
    1090:	01000000 	mrseq	r0, (UNDEF: 0)
    1094:	0594169c 	ldreq	r1, [r4, #1692]	; 0x69c
    1098:	53010000 	movwpl	r0, #4096	; 0x1000
    109c:	000e9006 	andeq	r9, lr, r6
    10a0:	00008820 	andeq	r8, r0, r0, lsr #16
    10a4:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    10a8:	0f000003 	svceq	0x00000003
    10ac:	0000055d 	andeq	r0, r0, sp, asr r5
    10b0:	30095401 	andcc	r5, r9, r1, lsl #8
    10b4:	02000002 	andeq	r0, r0, #2
    10b8:	d60f7491 			; <UNDEFINED> instruction: 0xd60f7491
    10bc:	01000004 	tsteq	r0, r4
    10c0:	02300955 	eorseq	r0, r0, #1392640	; 0x154000
    10c4:	91020000 	mrsls	r0, (UNDEF: 2)
    10c8:	16160070 			; <UNDEFINED> instruction: 0x16160070
    10cc:	01000005 	tsteq	r0, r5
    10d0:	0dbe0632 	ldceq	6, cr0, [lr, #200]!	; 0xc8
    10d4:	00d22000 	sbcseq	r2, r2, r0
    10d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10dc:	0000034a 	andeq	r0, r0, sl, asr #6
    10e0:	01007312 	tsteq	r0, r2, lsl r3
    10e4:	02300834 	eorseq	r0, r0, #52, 16	; 0x340000
    10e8:	91020000 	mrsls	r0, (UNDEF: 2)
    10ec:	4c170074 	ldcmi	0, cr0, [r7], {116}	; 0x74
    10f0:	01000005 	tsteq	r0, r5
    10f4:	00450629 	subeq	r0, r5, r9, lsr #12
    10f8:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    10fc:	00622000 	rsbeq	r2, r2, r0
    1100:	9c010000 	stcls	0, cr0, [r1], {-0}
    1104:	000003a1 	andeq	r0, r0, r1, lsr #7
    1108:	0004ec14 	andeq	lr, r4, r4, lsl ip
    110c:	18290100 	stmdane	r9!, {r8}
    1110:	0000017a 	andeq	r0, r0, sl, ror r1
    1114:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
    1118:	000004f4 	strdeq	r0, [r0], -r4
    111c:	7a292901 	bvc	a4b528 <startup-0x1f5b4ad8>
    1120:	02000001 	andeq	r0, r0, #1
    1124:	590f1491 	stmdbpl	pc, {r0, r4, r7, sl, ip}	; <UNPREDICTABLE>
    1128:	01000004 	tsteq	r0, r4
    112c:	0095062a 	addseq	r0, r5, sl, lsr #12
    1130:	91020000 	mrsls	r0, (UNDEF: 2)
    1134:	041e0f5c 	ldreq	r0, [lr], #-3932	; 0xfffff0a4
    1138:	2b010000 	blcs	41140 <startup-0x1ffbeec0>
    113c:	00009506 	andeq	r9, r0, r6, lsl #10
    1140:	58910200 	ldmpl	r1, {r9}
    1144:	05731500 	ldrbeq	r1, [r3, #-1280]!	; 0xfffffb00
    1148:	0f010000 	svceq	0x00010000
    114c:	000cc406 	andeq	ip, ip, r6, lsl #8
    1150:	00009820 	andeq	r9, r0, r0, lsr #16
    1154:	009c0100 	addseq	r0, ip, r0, lsl #2
    1158:	00000053 	andeq	r0, r0, r3, asr r0
    115c:	07fd0004 	ldrbeq	r0, [sp, r4]!
    1160:	01040000 	mrseq	r0, (UNDEF: 4)
    1164:	00000000 	andeq	r0, r0, r0
    1168:	0005a10c 	andeq	sl, r5, ip, lsl #2
    116c:	00018c00 	andeq	r8, r1, r0, lsl #24
    1170:	00129800 	andseq	r9, r2, r0, lsl #16
    1174:	00001e20 	andeq	r1, r0, r0, lsr #28
    1178:	000a6200 	andeq	r6, sl, r0, lsl #4
    117c:	62610200 	rsbvs	r0, r1, #0, 4
    1180:	05010073 	streq	r0, [r1, #-115]	; 0xffffff8d
    1184:	00004f05 	andeq	r4, r0, r5, lsl #30
    1188:	00129800 	andseq	r9, r2, r0, lsl #16
    118c:	00001e20 	andeq	r1, r0, r0, lsr #28
    1190:	4f9c0100 	svcmi	0x009c0100
    1194:	03000000 	movweq	r0, #0
    1198:	006d756e 	rsbeq	r7, sp, lr, ror #10
    119c:	4f0d0501 	svcmi	0x000d0501
    11a0:	02000000 	andeq	r0, r0, #0
    11a4:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    11a8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11ac:	f6000074 			; <UNDEFINED> instruction: 0xf6000074
    11b0:	04000000 	streq	r0, [r0], #-0
    11b4:	00084b00 	andeq	r4, r8, r0, lsl #22
    11b8:	00010400 	andeq	r0, r1, r0, lsl #8
    11bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    11c0:	0000060f 	andeq	r0, r0, pc, lsl #12
    11c4:	0000018c 	andeq	r0, r0, ip, lsl #3
	...
    11d0:	00000aa4 	andeq	r0, r0, r4, lsr #21
    11d4:	db070402 	blle	1c21e4 <startup-0x1fe3de1c>
    11d8:	02000000 	andeq	r0, r0, #0
    11dc:	00d50702 	sbcseq	r0, r5, r2, lsl #14
    11e0:	01020000 	mrseq	r0, (UNDEF: 2)
    11e4:	0000b508 	andeq	fp, r0, r8, lsl #10
    11e8:	05fd0300 	ldrbeq	r0, [sp, #768]!	; 0x300
    11ec:	2d010000 	stccs	0, cr0, [r1, #-0]
    11f0:	0012d41e 	andseq	sp, r2, lr, lsl r4
    11f4:	00000620 	andeq	r0, r0, r0, lsr #12
    11f8:	039c0100 	orrseq	r0, ip, #0, 2
    11fc:	000005a8 	andeq	r0, r0, r8, lsr #11
    1200:	ce1e2801 	cdpgt	8, 1, cr2, cr14, cr1, {0}
    1204:	06200012 			; <UNDEFINED> instruction: 0x06200012
    1208:	01000000 	mrseq	r0, (UNDEF: 0)
    120c:	05b9049c 	ldreq	r0, [r9, #1180]!	; 0x49c
    1210:	22010000 	andcs	r0, r1, #0
    1214:	0012c81d 	andseq	ip, r2, sp, lsl r8
    1218:	00000620 	andeq	r0, r0, r0, lsr #12
    121c:	8d9c0100 	ldfhis	f0, [ip]
    1220:	05000000 	streq	r0, [r0, #-0]
    1224:	22010078 	andcs	r0, r1, #120	; 0x78
    1228:	00008d35 	andeq	r8, r0, r5, lsr sp
    122c:	05500100 	ldrbeq	r0, [r0, #-256]	; 0xffffff00
    1230:	22010079 	andcs	r0, r1, #121	; 0x79
    1234:	00008d3c 	andeq	r8, r0, ip, lsr sp
    1238:	00510100 	subseq	r0, r1, r0, lsl #2
    123c:	69050406 	stmdbvs	r5, {r1, r2, sl}
    1240:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    1244:	00000619 	andeq	r0, r0, r9, lsl r6
    1248:	c21d1c01 	andsgt	r1, sp, #256	; 0x100
    124c:	06200012 			; <UNDEFINED> instruction: 0x06200012
    1250:	01000000 	mrseq	r0, (UNDEF: 0)
    1254:	0000c39c 	muleq	r0, ip, r3
    1258:	00780500 	rsbseq	r0, r8, r0, lsl #10
    125c:	8d331c01 	ldchi	12, cr1, [r3, #-4]!
    1260:	01000000 	mrseq	r0, (UNDEF: 0)
    1264:	00790550 	rsbseq	r0, r9, r0, asr r5
    1268:	8d3a1c01 	ldchi	12, cr1, [sl, #-4]!
    126c:	01000000 	mrseq	r0, (UNDEF: 0)
    1270:	cd030051 	stcgt	0, cr0, [r3, #-324]	; 0xfffffebc
    1274:	01000005 	tsteq	r0, r5
    1278:	12bc1d17 	adcsne	r1, ip, #1472	; 0x5c0
    127c:	00062000 	andeq	r2, r6, r0
    1280:	9c010000 	stcls	0, cr0, [r1], {-0}
    1284:	0005e203 	andeq	lr, r5, r3, lsl #4
    1288:	1d110100 	ldfnes	f0, [r1, #-0]
    128c:	200012b6 			; <UNDEFINED> instruction: 0x200012b6
    1290:	00000006 	andeq	r0, r0, r6
    1294:	f5079c01 			; <UNDEFINED> instruction: 0xf5079c01
    1298:	01000005 	tsteq	r0, r5
    129c:	00000106 	andeq	r0, r0, r6, lsl #2
    12a0:	000c2000 	andeq	r2, ip, r0
    12a4:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	0b002406 	bleq	907c <startup-0x1fff6f84>
  60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  64:	07000008 	streq	r0, [r0, -r8]
  68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  6c:	0b3a0e03 	bleq	e83880 <startup-0x1f17c780>
  70:	0b390b3b 	bleq	e42d64 <startup-0x1f1bd29c>
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  80:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  84:	0b3b0b3a 	bleq	ec2d74 <startup-0x1f13d28c>
  88:	13490b39 	movtne	r0, #39737	; 0x9b39
  8c:	00001802 	andeq	r1, r0, r2, lsl #16
  90:	03003409 	movweq	r3, #1033	; 0x409
  94:	3b0b3a08 	blcc	2ce8bc <startup-0x1fd31744>
  98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  9c:	0a000013 	beq	f0 <startup-0x1fffff10>
  a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  a4:	0b3a0e03 	bleq	e838b8 <startup-0x1f17c748>
  a8:	0b390b3b 	bleq	e42d9c <startup-0x1f1bd264>
  ac:	01111349 	tsteq	r1, r9, asr #6
  b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b8:	0b000013 	bleq	10c <startup-0x1ffffef4>
  bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	13490b39 	movtne	r0, #39737	; 0x9b39
  c8:	00001802 	andeq	r1, r0, r2, lsl #16
  cc:	3f012e0c 	svccc	0x00012e0c
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	1119270b 	tstne	r9, fp, lsl #14
  dc:	40061201 	andmi	r1, r6, r1, lsl #4
  e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	3f012e0d 	svccc	0x00012e0d
  ec:	3a0e0319 	bcc	380d58 <startup-0x1fc7f2a8>
  f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	1119270b 	tstne	r9, fp, lsl #14
  f8:	40061201 	andmi	r1, r6, r1, lsl #4
  fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 100:	01000000 	mrseq	r0, (UNDEF: 0)
 104:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 108:	0e030b13 	vmoveq.32	d3[0], r0
 10c:	01110e1b 	tsteq	r1, fp, lsl lr
 110:	17100612 			; <UNDEFINED> instruction: 0x17100612
 114:	13020000 	movwne	r0, #8192	; 0x2000
 118:	3a0b0b01 	bcc	2c2d24 <startup-0x1fd3d2dc>
 11c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 120:	0013010b 	andseq	r0, r3, fp, lsl #2
 124:	000d0300 	andeq	r0, sp, r0, lsl #6
 128:	0b3a0803 	bleq	e8213c <startup-0x1f17dec4>
 12c:	0b390b3b 	bleq	e42e20 <startup-0x1f1bd1e0>
 130:	0b381349 	bleq	e04e5c <startup-0x1f1fb1a4>
 134:	24040000 	strcs	r0, [r4], #-0
 138:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 13c:	000e030b 	andeq	r0, lr, fp, lsl #6
 140:	00160500 	andseq	r0, r6, r0, lsl #10
 144:	0b3a0e03 	bleq	e83958 <startup-0x1f17c6a8>
 148:	0b390b3b 	bleq	e42e3c <startup-0x1f1bd1c4>
 14c:	00001349 	andeq	r1, r0, r9, asr #6
 150:	03000d06 	movweq	r0, #3334	; 0xd06
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 15c:	000b3813 	andeq	r3, fp, r3, lsl r8
 160:	00240700 	eoreq	r0, r4, r0, lsl #14
 164:	0b3e0b0b 	bleq	f82d98 <startup-0x1f07d268>
 168:	00000803 	andeq	r0, r0, r3, lsl #16
 16c:	49010108 	stmdbmi	r1, {r3, r8}
 170:	00130113 	andseq	r0, r3, r3, lsl r1
 174:	00210900 	eoreq	r0, r1, r0, lsl #18
 178:	0b2f1349 	bleq	bc4ea4 <startup-0x1f43b15c>
 17c:	0f0a0000 	svceq	0x000a0000
 180:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 184:	0b000013 	bleq	1d8 <startup-0x1ffffe28>
 188:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 18c:	0b3a0b0b 	bleq	e82dc0 <startup-0x1f17d240>
 190:	0b390b3b 	bleq	e42e84 <startup-0x1f1bd17c>
 194:	00001301 	andeq	r1, r0, r1, lsl #6
 198:	2701150c 	strcs	r1, [r1, -ip, lsl #10]
 19c:	00130119 	andseq	r0, r3, r9, lsl r1
 1a0:	00050d00 	andeq	r0, r5, r0, lsl #26
 1a4:	00001349 	andeq	r1, r0, r9, asr #6
 1a8:	0300340e 	movweq	r3, #1038	; 0x40e
 1ac:	3b0b3a0e 	blcc	2ce9ec <startup-0x1fd31614>
 1b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1b4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 1b8:	0f000018 	svceq	0x00000018
 1bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c0:	0b3a0e03 	bleq	e839d4 <startup-0x1f17c62c>
 1c4:	0b390b3b 	bleq	e42eb8 <startup-0x1f1bd148>
 1c8:	13491927 	movtne	r1, #39207	; 0x9927
 1cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1d4:	00130119 	andseq	r0, r3, r9, lsl r1
 1d8:	00051000 	andeq	r1, r5, r0
 1dc:	0b3a0e03 	bleq	e839f0 <startup-0x1f17c610>
 1e0:	0b390b3b 	bleq	e42ed4 <startup-0x1f1bd12c>
 1e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1e8:	34110000 	ldrcc	r0, [r1], #-0
 1ec:	3a0e0300 	bcc	380df4 <startup-0x1fc7f20c>
 1f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1f8:	12000018 	andne	r0, r0, #24
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	0b390b3b 	bleq	e42ef8 <startup-0x1f1bd108>
 208:	01111927 	tsteq	r1, r7, lsr #18
 20c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 210:	01194297 			; <UNDEFINED> instruction: 0x01194297
 214:	13000013 	movwne	r0, #19
 218:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 21c:	0b3a0e03 	bleq	e83a30 <startup-0x1f17c5d0>
 220:	0b390b3b 	bleq	e42f14 <startup-0x1f1bd0ec>
 224:	01111927 	tsteq	r1, r7, lsr #18
 228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 22c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 230:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 234:	0111010b 	tsteq	r1, fp, lsl #2
 238:	00000612 	andeq	r0, r0, r2, lsl r6
 23c:	03003415 	movweq	r3, #1045	; 0x415
 240:	3b0b3a08 	blcc	2cea68 <startup-0x1fd31598>
 244:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 248:	00180213 	andseq	r0, r8, r3, lsl r2
 24c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 250:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 260:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 264:	00000019 	andeq	r0, r0, r9, lsl r0
 268:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 26c:	030b130e 	movweq	r1, #45838	; 0xb30e
 270:	110e1b0e 	tstne	lr, lr, lsl #22
 274:	10061201 	andne	r1, r6, r1, lsl #4
 278:	02000017 	andeq	r0, r0, #23
 27c:	0b0b0024 	bleq	2c0314 <startup-0x1fd3fcec>
 280:	0e030b3e 	vmoveq.16	d3[0], r0
 284:	13030000 	movwne	r0, #12288	; 0x3000
 288:	3a0b0b01 	bcc	2c2e94 <startup-0x1fd3d16c>
 28c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 290:	0013010b 	andseq	r0, r3, fp, lsl #2
 294:	000d0400 	andeq	r0, sp, r0, lsl #8
 298:	0b3a0e03 	bleq	e83aac <startup-0x1f17c554>
 29c:	0b390b3b 	bleq	e42f90 <startup-0x1f1bd070>
 2a0:	0b381349 	bleq	e04fcc <startup-0x1f1fb034>
 2a4:	35050000 	strcc	r0, [r5, #-0]
 2a8:	00134900 	andseq	r4, r3, r0, lsl #18
 2ac:	00240600 	eoreq	r0, r4, r0, lsl #12
 2b0:	0b3e0b0b 	bleq	f82ee4 <startup-0x1f07d11c>
 2b4:	00000803 	andeq	r0, r0, r3, lsl #16
 2b8:	03001607 	movweq	r1, #1543	; 0x607
 2bc:	3b0b3a0e 	blcc	2ceafc <startup-0x1fd31504>
 2c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2c4:	08000013 	stmdaeq	r0, {r0, r1, r4}
 2c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2cc:	0b3b0b3a 	bleq	ec2fbc <startup-0x1f13d044>
 2d0:	13490b39 	movtne	r0, #39737	; 0x9b39
 2d4:	00001802 	andeq	r1, r0, r2, lsl #16
 2d8:	03003409 	movweq	r3, #1033	; 0x409
 2dc:	3b0b3a0e 	blcc	2ceb1c <startup-0x1fd314e4>
 2e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2e4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e8:	0a000018 	beq	350 <startup-0x1ffffcb0>
 2ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	0b390b3b 	bleq	e42fe8 <startup-0x1f1bd018>
 2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 300:	0b000019 	bleq	36c <startup-0x1ffffc94>
 304:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 308:	0b3a0e03 	bleq	e83b1c <startup-0x1f17c4e4>
 30c:	0b390b3b 	bleq	e43000 <startup-0x1f1bd000>
 310:	01111349 	tsteq	r1, r9, asr #6
 314:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 318:	00194297 	mulseq	r9, r7, r2
 31c:	11010000 	mrsne	r0, (UNDEF: 1)
 320:	130e2501 	movwne	r2, #58625	; 0xe501
 324:	1b0e030b 	blne	380f58 <startup-0x1fc7f0a8>
 328:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 32c:	00171006 	andseq	r1, r7, r6
 330:	01130200 	tsteq	r3, r0, lsl #4
 334:	0b3a0b0b 	bleq	e82f68 <startup-0x1f17d098>
 338:	0b390b3b 	bleq	e4302c <startup-0x1f1bcfd4>
 33c:	00001301 	andeq	r1, r0, r1, lsl #6
 340:	03000d03 	movweq	r0, #3331	; 0xd03
 344:	3b0b3a08 	blcc	2ceb6c <startup-0x1fd31494>
 348:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 34c:	000b3813 	andeq	r3, fp, r3, lsl r8
 350:	000d0400 	andeq	r0, sp, r0, lsl #8
 354:	0b3a0e03 	bleq	e83b68 <startup-0x1f17c498>
 358:	0b390b3b 	bleq	e4304c <startup-0x1f1bcfb4>
 35c:	0b381349 	bleq	e05088 <startup-0x1f1faf78>
 360:	24050000 	strcs	r0, [r5], #-0
 364:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 368:	000e030b 	andeq	r0, lr, fp, lsl #6
 36c:	00350600 	eorseq	r0, r5, r0, lsl #12
 370:	00001349 	andeq	r1, r0, r9, asr #6
 374:	03001607 	movweq	r1, #1543	; 0x607
 378:	3b0b3a0e 	blcc	2cebb8 <startup-0x1fd31448>
 37c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 380:	08000013 	stmdaeq	r0, {r0, r1, r4}
 384:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 388:	0b3a0e03 	bleq	e83b9c <startup-0x1f17c464>
 38c:	0b390b3b 	bleq	e43080 <startup-0x1f1bcf80>
 390:	01111927 	tsteq	r1, r7, lsr #18
 394:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 398:	01194296 			; <UNDEFINED> instruction: 0x01194296
 39c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 3a0:	08030005 	stmdaeq	r3, {r0, r2}
 3a4:	0b3b0b3a 	bleq	ec3094 <startup-0x1f13cf6c>
 3a8:	13490b39 	movtne	r0, #39737	; 0x9b39
 3ac:	00001802 	andeq	r1, r0, r2, lsl #16
 3b0:	0b000f0a 	bleq	3fe0 <startup-0x1fffc020>
 3b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 3b8:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 3bc:	0b3a0e03 	bleq	e83bd0 <startup-0x1f17c430>
 3c0:	0b390b3b 	bleq	e430b4 <startup-0x1f1bcf4c>
 3c4:	01111927 	tsteq	r1, r7, lsr #18
 3c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3cc:	00194296 	mulseq	r9, r6, r2
 3d0:	11010000 	mrsne	r0, (UNDEF: 1)
 3d4:	130e2501 	movwne	r2, #58625	; 0xe501
 3d8:	1b0e030b 	blne	38100c <startup-0x1fc7eff4>
 3dc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3e0:	00171006 	andseq	r1, r7, r6
 3e4:	002e0200 	eoreq	r0, lr, r0, lsl #4
 3e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3ec:	0b3b0b3a 	bleq	ec30dc <startup-0x1f13cf24>
 3f0:	01110b39 	tsteq	r1, r9, lsr fp
 3f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3f8:	00194297 	mulseq	r9, r7, r2
 3fc:	002e0300 	eoreq	r0, lr, r0, lsl #6
 400:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 404:	0b3b0b3a 	bleq	ec30f4 <startup-0x1f13cf0c>
 408:	01110b39 	tsteq	r1, r9, lsr fp
 40c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 410:	00194296 	mulseq	r9, r6, r2
 414:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
 418:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 41c:	0b3b0b3a 	bleq	ec310c <startup-0x1f13cef4>
 420:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 424:	06120111 			; <UNDEFINED> instruction: 0x06120111
 428:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 42c:	00130119 	andseq	r0, r3, r9, lsl r1
 430:	00050500 	andeq	r0, r5, r0, lsl #10
 434:	0b3a0803 	bleq	e82448 <startup-0x1f17dbb8>
 438:	0b390b3b 	bleq	e4312c <startup-0x1f1bced4>
 43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 440:	0b060000 	bleq	180448 <startup-0x1fe7fbb8>
 444:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 448:	07000006 	streq	r0, [r0, -r6]
 44c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 450:	0b3b0b3a 	bleq	ec3140 <startup-0x1f13cec0>
 454:	13490b39 	movtne	r0, #39737	; 0x9b39
 458:	00001802 	andeq	r1, r0, r2, lsl #16
 45c:	0b002408 	bleq	9484 <startup-0x1fff6b7c>
 460:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 464:	0900000e 	stmdbeq	r0, {r1, r2, r3}
 468:	0b0b0024 	bleq	2c0500 <startup-0x1fd3fb00>
 46c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 470:	01000000 	mrseq	r0, (UNDEF: 0)
 474:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 478:	0e030b13 	vmoveq.32	d3[0], r0
 47c:	01110e1b 	tsteq	r1, fp, lsl lr
 480:	17100612 			; <UNDEFINED> instruction: 0x17100612
 484:	13020000 	movwne	r0, #8192	; 0x2000
 488:	3a0b0b01 	bcc	2c3094 <startup-0x1fd3cf6c>
 48c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 490:	0013010b 	andseq	r0, r3, fp, lsl #2
 494:	000d0300 	andeq	r0, sp, r0, lsl #6
 498:	0b3a0803 	bleq	e824ac <startup-0x1f17db54>
 49c:	0b390b3b 	bleq	e43190 <startup-0x1f1bce70>
 4a0:	0b381349 	bleq	e051cc <startup-0x1f1fae34>
 4a4:	24040000 	strcs	r0, [r4], #-0
 4a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4ac:	000e030b 	andeq	r0, lr, fp, lsl #6
 4b0:	00160500 	andseq	r0, r6, r0, lsl #10
 4b4:	0b3a0e03 	bleq	e83cc8 <startup-0x1f17c338>
 4b8:	0b390b3b 	bleq	e431ac <startup-0x1f1bce54>
 4bc:	00001349 	andeq	r1, r0, r9, asr #6
 4c0:	03011306 	movweq	r1, #4870	; 0x1306
 4c4:	3a0b0b0e 	bcc	2c3104 <startup-0x1fd3cefc>
 4c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4cc:	0013010b 	andseq	r0, r3, fp, lsl #2
 4d0:	000d0700 	andeq	r0, sp, r0, lsl #14
 4d4:	0b3a0e03 	bleq	e83ce8 <startup-0x1f17c318>
 4d8:	0b390b3b 	bleq	e431cc <startup-0x1f1bce34>
 4dc:	0b381349 	bleq	e05208 <startup-0x1f1fadf8>
 4e0:	0f080000 	svceq	0x00080000
 4e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4e8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4ec:	0b0b0024 	bleq	2c0584 <startup-0x1fd3fa7c>
 4f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4f4:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 4f8:	03193f01 	tsteq	r9, #1, 30
 4fc:	3b0b3a0e 	blcc	2ced3c <startup-0x1fd312c4>
 500:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 504:	11134919 	tstne	r3, r9, lsl r9
 508:	40061201 	andmi	r1, r6, r1, lsl #4
 50c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 510:	00001301 	andeq	r1, r0, r1, lsl #6
 514:	0300050b 	movweq	r0, #1291	; 0x50b
 518:	3b0b3a0e 	blcc	2ced58 <startup-0x1fd312a8>
 51c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 520:	00180213 	andseq	r0, r8, r3, lsl r2
 524:	00340c00 	eorseq	r0, r4, r0, lsl #24
 528:	0b3a0803 	bleq	e8253c <startup-0x1f17dac4>
 52c:	0b390b3b 	bleq	e43220 <startup-0x1f1bcde0>
 530:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 534:	0b0d0000 	bleq	34053c <startup-0x1fcbfac4>
 538:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 53c:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
 540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 544:	0b3b0b3a 	bleq	ec3234 <startup-0x1f13cdcc>
 548:	13490b39 	movtne	r0, #39737	; 0x9b39
 54c:	00001802 	andeq	r1, r0, r2, lsl #16
 550:	3f012e0f 	svccc	0x00012e0f
 554:	3a0e0319 	bcc	3811c0 <startup-0x1fc7ee40>
 558:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 55c:	1119270b 	tstne	r9, fp, lsl #14
 560:	40061201 	andmi	r1, r6, r1, lsl #4
 564:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 568:	05100000 	ldreq	r0, [r0, #-0]
 56c:	3a080300 	bcc	201174 <startup-0x1fdfee8c>
 570:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 574:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 578:	00000018 	andeq	r0, r0, r8, lsl r0
 57c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 580:	030b130e 	movweq	r1, #45838	; 0xb30e
 584:	110e1b0e 	tstne	lr, lr, lsl #22
 588:	10061201 	andne	r1, r6, r1, lsl #4
 58c:	02000017 	andeq	r0, r0, #23
 590:	0b0b0024 	bleq	2c0628 <startup-0x1fd3f9d8>
 594:	0e030b3e 	vmoveq.16	d3[0], r0
 598:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 59c:	03193f01 	tsteq	r9, #1, 30
 5a0:	3b0b3a0e 	blcc	2cede0 <startup-0x1fd31220>
 5a4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5ac:	97184006 	ldrls	r4, [r8, -r6]
 5b0:	13011942 	movwne	r1, #6466	; 0x1942
 5b4:	05040000 	streq	r0, [r4, #-0]
 5b8:	3a080300 	bcc	2011c0 <startup-0x1fdfee40>
 5bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5c4:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 5c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5cc:	0b3b0b3a 	bleq	ec32bc <startup-0x1f13cd44>
 5d0:	13490b39 	movtne	r0, #39737	; 0x9b39
 5d4:	00001802 	andeq	r1, r0, r2, lsl #16
 5d8:	49010106 	stmdbmi	r1, {r1, r2, r8}
 5dc:	00130113 	andseq	r0, r3, r3, lsl r1
 5e0:	00210700 	eoreq	r0, r1, r0, lsl #14
 5e4:	0b2f1349 	bleq	bc5310 <startup-0x1f43acf0>
 5e8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 5ec:	03193f01 	tsteq	r9, #1, 30
 5f0:	3b0b3a0e 	blcc	2cee30 <startup-0x1fd311d0>
 5f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5f8:	11134919 	tstne	r3, r9, lsl r9
 5fc:	40061201 	andmi	r1, r6, r1, lsl #4
 600:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 604:	00001301 	andeq	r1, r0, r1, lsl #6
 608:	03003409 	movweq	r3, #1033	; 0x409
 60c:	3b0b3a08 	blcc	2cee34 <startup-0x1fd311cc>
 610:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 614:	00180213 	andseq	r0, r8, r3, lsl r2
 618:	010b0a00 	tsteq	fp, r0, lsl #20
 61c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 620:	240b0000 	strcs	r0, [fp], #-0
 624:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 628:	0008030b 	andeq	r0, r8, fp, lsl #6
 62c:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 630:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 634:	0b3b0b3a 	bleq	ec3324 <startup-0x1f13ccdc>
 638:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 63c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 640:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 644:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
 648:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 64c:	0b3a0e03 	bleq	e83e60 <startup-0x1f17c1a0>
 650:	0b390b3b 	bleq	e43344 <startup-0x1f1bccbc>
 654:	13491927 	movtne	r1, #39207	; 0x9927
 658:	06120111 			; <UNDEFINED> instruction: 0x06120111
 65c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 660:	00130119 	andseq	r0, r3, r9, lsl r1
 664:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 668:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 66c:	0b3b0b3a 	bleq	ec335c <startup-0x1f13cca4>
 670:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 674:	06120111 			; <UNDEFINED> instruction: 0x06120111
 678:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 67c:	00000019 	andeq	r0, r0, r9, lsl r0
 680:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 684:	030b130e 	movweq	r1, #45838	; 0xb30e
 688:	110e1b0e 	tstne	lr, lr, lsl #22
 68c:	10061201 	andne	r1, r6, r1, lsl #4
 690:	02000017 	andeq	r0, r0, #23
 694:	0b0b0113 	bleq	2c0ae8 <startup-0x1fd3f518>
 698:	0b3b0b3a 	bleq	ec3388 <startup-0x1f13cc78>
 69c:	13010b39 	movwne	r0, #6969	; 0x1b39
 6a0:	0d030000 	stceq	0, cr0, [r3, #-0]
 6a4:	3a080300 	bcc	2012ac <startup-0x1fdfed54>
 6a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6ac:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6b0:	0400000b 	streq	r0, [r0], #-11
 6b4:	0b0b0024 	bleq	2c074c <startup-0x1fd3f8b4>
 6b8:	0e030b3e 	vmoveq.16	d3[0], r0
 6bc:	16050000 	strne	r0, [r5], -r0
 6c0:	3a0e0300 	bcc	3812c8 <startup-0x1fc7ed38>
 6c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6c8:	0013490b 	andseq	r4, r3, fp, lsl #18
 6cc:	000d0600 	andeq	r0, sp, r0, lsl #12
 6d0:	0b3a0e03 	bleq	e83ee4 <startup-0x1f17c11c>
 6d4:	0b390b3b 	bleq	e433c8 <startup-0x1f1bcc38>
 6d8:	0b381349 	bleq	e05404 <startup-0x1f1fabfc>
 6dc:	24070000 	strcs	r0, [r7], #-0
 6e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 6e4:	0008030b 	andeq	r0, r8, fp, lsl #6
 6e8:	01010800 	tsteq	r1, r0, lsl #16
 6ec:	13011349 	movwne	r1, #4937	; 0x1349
 6f0:	21090000 	mrscs	r0, (UNDEF: 9)
 6f4:	2f134900 	svccs	0x00134900
 6f8:	0a00000b 	beq	72c <startup-0x1ffff8d4>
 6fc:	0b0b000f 	bleq	2c0740 <startup-0x1fd3f8c0>
 700:	00001349 	andeq	r1, r0, r9, asr #6
 704:	0301130b 	movweq	r1, #4875	; 0x130b
 708:	3a0b0b0e 	bcc	2c3348 <startup-0x1fd3ccb8>
 70c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 710:	0013010b 	andseq	r0, r3, fp, lsl #2
 714:	01150c00 	tsteq	r5, r0, lsl #24
 718:	13011927 	movwne	r1, #6439	; 0x1927
 71c:	050d0000 	streq	r0, [sp, #-0]
 720:	00134900 	andseq	r4, r3, r0, lsl #18
 724:	00350e00 	eorseq	r0, r5, r0, lsl #28
 728:	00001349 	andeq	r1, r0, r9, asr #6
 72c:	0300340f 	movweq	r3, #1039	; 0x40f
 730:	3b0b3a0e 	blcc	2cef70 <startup-0x1fd31090>
 734:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 738:	00180213 	andseq	r0, r8, r3, lsl r2
 73c:	00341000 	eorseq	r1, r4, r0
 740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
 744:	0b390b3b 	bleq	e43438 <startup-0x1f1bcbc8>
 748:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 74c:	00001802 	andeq	r1, r0, r2, lsl #16
 750:	3f012e11 	svccc	0x00012e11
 754:	3a0e0319 	bcc	3813c0 <startup-0x1fc7ec40>
 758:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 75c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 760:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 764:	96184006 	ldrls	r4, [r8], -r6
 768:	13011942 	movwne	r1, #6466	; 0x1942
 76c:	34120000 	ldrcc	r0, [r2], #-0
 770:	3a080300 	bcc	201378 <startup-0x1fdfec88>
 774:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 778:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 77c:	13000018 	movwne	r0, #24
 780:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 784:	0b3a0e03 	bleq	e83f98 <startup-0x1f17c068>
 788:	0b390b3b 	bleq	e4347c <startup-0x1f1bcb84>
 78c:	01111927 	tsteq	r1, r7, lsr #18
 790:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 794:	01194296 			; <UNDEFINED> instruction: 0x01194296
 798:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 79c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 7a0:	0b3b0b3a 	bleq	ec3490 <startup-0x1f13cb70>
 7a4:	13490b39 	movtne	r0, #39737	; 0x9b39
 7a8:	00001802 	andeq	r1, r0, r2, lsl #16
 7ac:	3f002e15 	svccc	0x00002e15
 7b0:	3a0e0319 	bcc	38141c <startup-0x1fc7ebe4>
 7b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7b8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 7bc:	96184006 	ldrls	r4, [r8], -r6
 7c0:	00001942 	andeq	r1, r0, r2, asr #18
 7c4:	3f012e16 	svccc	0x00012e16
 7c8:	3a0e0319 	bcc	381434 <startup-0x1fc7ebcc>
 7cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7d0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 7d4:	96184006 	ldrls	r4, [r8], -r6
 7d8:	13011942 	movwne	r1, #6466	; 0x1942
 7dc:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 7e0:	03193f01 	tsteq	r9, #1, 30
 7e4:	3b0b3a0e 	blcc	2cf024 <startup-0x1fd30fdc>
 7e8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 7ec:	11134919 	tstne	r3, r9, lsl r9
 7f0:	40061201 	andmi	r1, r6, r1, lsl #4
 7f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7f8:	00001301 	andeq	r1, r0, r1, lsl #6
 7fc:	01110100 	tsteq	r1, r0, lsl #2
 800:	0b130e25 	bleq	4c409c <startup-0x1fb3bf64>
 804:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 808:	06120111 			; <UNDEFINED> instruction: 0x06120111
 80c:	00001710 	andeq	r1, r0, r0, lsl r7
 810:	3f012e02 	svccc	0x00012e02
 814:	3a080319 	bcc	201480 <startup-0x1fdfeb80>
 818:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 81c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 820:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 824:	97184006 	ldrls	r4, [r8, -r6]
 828:	13011942 	movwne	r1, #6466	; 0x1942
 82c:	05030000 	streq	r0, [r3, #-0]
 830:	3a080300 	bcc	201438 <startup-0x1fdfebc8>
 834:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 838:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 83c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
 840:	0b0b0024 	bleq	2c08d8 <startup-0x1fd3f728>
 844:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 848:	01000000 	mrseq	r0, (UNDEF: 0)
 84c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 850:	0e030b13 	vmoveq.32	d3[0], r0
 854:	17550e1b 	smmlane	r5, fp, lr, r0
 858:	17100111 			; <UNDEFINED> instruction: 0x17100111
 85c:	24020000 	strcs	r0, [r2], #-0
 860:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 864:	000e030b 	andeq	r0, lr, fp, lsl #6
 868:	002e0300 	eoreq	r0, lr, r0, lsl #6
 86c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 870:	0b3b0b3a 	bleq	ec3560 <startup-0x1f13caa0>
 874:	01110b39 	tsteq	r1, r9, lsr fp
 878:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 87c:	00194297 	mulseq	r9, r7, r2
 880:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
 884:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 888:	0b3b0b3a 	bleq	ec3578 <startup-0x1f13ca88>
 88c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 890:	06120111 			; <UNDEFINED> instruction: 0x06120111
 894:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 898:	00130119 	andseq	r0, r3, r9, lsl r1
 89c:	00050500 	andeq	r0, r5, r0, lsl #10
 8a0:	0b3a0803 	bleq	e828b4 <startup-0x1f17d74c>
 8a4:	0b390b3b 	bleq	e43598 <startup-0x1f1bca68>
 8a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 8ac:	24060000 	strcs	r0, [r6], #-0
 8b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8b4:	0008030b 	andeq	r0, r8, fp, lsl #6
 8b8:	002e0700 	eoreq	r0, lr, r0, lsl #14
 8bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 8c0:	0b3b0b3a 	bleq	ec35b0 <startup-0x1f13ca50>
 8c4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 8c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8d0:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000031c 	andeq	r0, r0, ip, lsl r3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02b80002 	adcseq	r0, r8, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000032c 	andcs	r0, r0, ip, lsr #6
  34:	0000029c 	muleq	r0, ip, r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	061b0002 	ldreq	r0, [fp], -r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200005c8 	andcs	r0, r0, r8, asr #11
  54:	00000120 	andeq	r0, r0, r0, lsr #2
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07510002 	ldrbeq	r0, [r1, -r2]
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200006e8 	andcs	r0, r0, r8, ror #13
  74:	0000006a 	andeq	r0, r0, sl, rrx
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	08910002 	ldmeq	r1, {r1}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20000754 	andcs	r0, r0, r4, asr r7
  94:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	09250002 	stmdbeq	r5!, {r1}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	200007e0 	andcs	r0, r0, r0, ror #15
  b4:	00000312 	andeq	r0, r0, r2, lsl r3
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	0c5b0002 	mrrceq	0, 0, r0, fp, cr2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000af4 	strdcs	r0, [r0], -r4
  d4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	0da40002 	stceq	0, cr0, [r4, #8]!
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	20000cc4 	andcs	r0, r0, r4, asr #25
  f4:	000005d2 	ldrdeq	r0, [r0], -r2
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	11580002 	cmpne	r8, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	20001298 	mulcs	r0, r8, r2
 114:	0000001e 	andeq	r0, r0, lr, lsl r0
	...
 120:	00000024 	andeq	r0, r0, r4, lsr #32
 124:	11af0002 			; <UNDEFINED> instruction: 0x11af0002
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200012b6 			; <UNDEFINED> instruction: 0x200012b6
 134:	00000024 	andeq	r0, r0, r4, lsr #32
 138:	20000000 	andcs	r0, r0, r0
 13c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000192 	muleq	r0, r2, r1
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	00632e69 	rsbeq	r2, r3, r9, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	0d051620 	stceq	6, cr1, [r5, #-128]	; 0xffffff80
  34:	200b0568 	andcs	r0, fp, r8, ror #10
  38:	054b1905 	strbeq	r1, [fp, #-2309]	; 0xfffff6fb
  3c:	19056609 	stmdbne	r5, {r0, r3, r9, sl, sp, lr}
  40:	4b010520 	blmi	414c8 <startup-0x1ffbeb38>
  44:	05682205 	strbeq	r2, [r8, #-517]!	; 0xfffffdfb
  48:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
  4c:	4b080520 	blmi	2014d4 <startup-0x1fdfeb2c>
  50:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
  54:	12052f02 	andne	r2, r5, #2, 30
  58:	67010520 	strvs	r0, [r1, -r0, lsr #10]
  5c:	05691e05 	strbeq	r1, [r9, #-3589]!	; 0xfffff1fb
  60:	2f3e3f09 	svccs	0x003e3f09
  64:	05310d05 	ldreq	r0, [r1, #-3333]!	; 0xfffff2fb
  68:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
  6c:	3e10053e 	mrccc	5, 0, r0, cr0, cr14, {1}
  70:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb73 <winning_score+0xdfffe7e3>
  74:	0205751a 	andeq	r7, r5, #109051904	; 0x6800000
  78:	2010053d 	andscs	r0, r0, sp, lsr r5
  7c:	05330905 	ldreq	r0, [r3, #-2309]!	; 0xfffff6fb
  80:	0d053d05 	stceq	13, cr3, [r5, #-20]	; 0xffffffec
  84:	5903053e 	stmdbpl	r3, {r1, r2, r3, r4, r5, r8, sl}
  88:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
  8c:	05052f10 	streq	r2, [r5, #-3856]	; 0xfffff0f0
  90:	a017052f 	andsge	r0, r7, pc, lsr #10
  94:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
  98:	20052e02 	andcs	r2, r5, r2, lsl #28
  9c:	2e100520 	cfmul64cs	mvdx0, mvdx0, mvdx0
  a0:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
  a4:	06053d05 	streq	r3, [r5], -r5, lsl #26
  a8:	5912053d 	ldmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
  ac:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
  b0:	10052020 	andne	r2, r5, r0, lsr #32
  b4:	2109052e 	tstcs	r9, lr, lsr #10
  b8:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
  bc:	09059f2e 	stmdbeq	r5, {r1, r2, r3, r5, r8, r9, sl, fp, ip, pc}
  c0:	1a053d68 	bne	14f668 <startup-0x1feb0998>
  c4:	3d090520 	cfstr32cc	mvfx0, [r9, #-128]	; 0xffffff80
  c8:	05053d2f 	streq	r3, [r5, #-3375]	; 0xfffff2d1
  cc:	67230531 			; <UNDEFINED> instruction: 0x67230531
  d0:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
  d4:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
  d8:	054b2405 	strbeq	r2, [fp, #-1029]	; 0xfffffbfb
  dc:	02056703 	andeq	r6, r5, #786432	; 0xc0000
  e0:	01053e3d 	tsteq	r5, sp, lsr lr
  e4:	4c210559 	cfstr32mi	mvfx0, [r1], #-356	; 0xfffffe9c
  e8:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
  ec:	04020009 	streq	r0, [r2], #-9
  f0:	1d052001 	stcne	0, cr2, [r5, #-4]
  f4:	01040200 	mrseq	r0, R12_usr
  f8:	0007053c 	andeq	r0, r7, ip, lsr r5
  fc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 100:	59300205 	ldmdbpl	r0!, {r0, r2, r9}
 104:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 108:	07054c24 	streq	r4, [r5, -r4, lsr #24]
 10c:	00090567 	andeq	r0, r9, r7, ror #10
 110:	20010402 	andcs	r0, r1, r2, lsl #8
 114:	02001d05 	andeq	r1, r0, #320	; 0x140
 118:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 11c:	04020007 	streq	r0, [r2], #-7
 120:	02053c01 	andeq	r3, r5, #256	; 0x100
 124:	01055930 	tsteq	r5, r0, lsr r9
 128:	4c12053d 	cfldr32mi	mvfx0, [r2], {61}	; 0x3d
 12c:	3e300205 	cdpcc	2, 3, cr0, cr0, cr5, {0}
 130:	01053e3e 	tsteq	r5, lr, lsr lr
 134:	3e1a053d 	mrccc	5, 0, r0, cr10, cr13, {1}
 138:	052f0505 	streq	r0, [pc, #-1285]!	; fffffc3b <winning_score+0xdfffe8ab>
 13c:	21053d01 	tstcs	r5, r1, lsl #26
 140:	5906053e 	stmdbpl	r6, {r1, r2, r3, r4, r5, r8, sl}
 144:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 148:	17053d0a 	strne	r3, [r5, -sl, lsl #26]
 14c:	6602053e 			; <UNDEFINED> instruction: 0x6602053e
 150:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
 154:	13054c31 	movwne	r4, #23601	; 0x5c31
 158:	2e060592 	mcrcs	5, 0, r0, cr6, cr2, {4}
 15c:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
 160:	15053c06 	strne	r3, [r5, #-3078]	; 0xfffff3fa
 164:	2e060521 	cfsh32cs	mvfx0, mvfx6, #17
 168:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 16c:	02052010 	andeq	r2, r5, #16
 170:	2011052f 	andscs	r0, r1, pc, lsr #10
 174:	052f0505 	streq	r0, [pc, #-1285]!	; fffffc77 <winning_score+0xdfffe8e7>
 178:	02052015 	andeq	r2, r5, #21
 17c:	055a673d 	ldrbeq	r6, [sl, #-1853]	; 0xfffff8c3
 180:	02052010 	andeq	r2, r5, #16
 184:	2011052f 	andscs	r0, r1, pc, lsr #10
 188:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 18c:	01052012 	tsteq	r5, r2, lsl r0
 190:	000d022f 	andeq	r0, sp, pc, lsr #4
 194:	01b10101 			; <UNDEFINED> instruction: 0x01b10101
 198:	00030000 	andeq	r0, r3, r0
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1a4:	0101000d 	tsteq	r1, sp
 1a8:	00000101 	andeq	r0, r0, r1, lsl #2
 1ac:	00000100 	andeq	r0, r0, r0, lsl #2
 1b0:	61620001 	cmnvs	r2, r1
 1b4:	6e616c6c 	cdpvs	12, 6, cr6, cr1, cr12, {3}
 1b8:	64617064 	strbtvs	r7, [r1], #-100	; 0xffffff9c
 1bc:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
 1c0:	00000063 	andeq	r0, r0, r3, rrx
 1c4:	73696400 	cmnvc	r9, #0, 8
 1c8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1cc:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
 1d0:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
 1dc:	00032c02 	andeq	r2, r3, r2, lsl #24
 1e0:	01160320 	tsteq	r6, r0, lsr #6
 1e4:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
 1e8:	21052e05 	tstcs	r5, r5, lsl #28
 1ec:	03040200 	movweq	r0, #16896	; 0x4200
 1f0:	002d0521 	eoreq	r0, sp, r1, lsr #10
 1f4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 1f8:	02003605 	andeq	r3, r0, #5242880	; 0x500000
 1fc:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 200:	04020009 	streq	r0, [r2], #-9
 204:	44052e03 	strmi	r2, [r5], #-3587	; 0xfffff1fd
 208:	03040200 	movweq	r0, #16896	; 0x4200
 20c:	00500520 	subseq	r0, r0, r0, lsr #10
 210:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 214:	02005905 	andeq	r5, r0, #81920	; 0x14000
 218:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 21c:	04020009 	streq	r0, [r2], #-9
 220:	31052e03 	tstcc	r5, r3, lsl #28
 224:	03040200 	movweq	r0, #16896	; 0x4200
 228:	001e0549 	andseq	r0, lr, r9, asr #10
 22c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 230:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 234:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 238:	04020005 	streq	r0, [r2], #-5
 23c:	01052001 	tsteq	r5, r1
 240:	5a26053f 	bpl	981744 <startup-0x1f67e8bc>
 244:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 248:	23052e07 	movwcs	r2, #24071	; 0x5e07
 24c:	03040200 	movweq	r0, #16896	; 0x4200
 250:	002f0521 	eoreq	r0, pc, r1, lsr #10
 254:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 258:	02003805 	andeq	r3, r0, #327680	; 0x50000
 25c:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 260:	04020009 	streq	r0, [r2], #-9
 264:	46052e03 	strmi	r2, [r5], -r3, lsl #28
 268:	03040200 	movweq	r0, #16896	; 0x4200
 26c:	00520520 	subseq	r0, r2, r0, lsr #10
 270:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 274:	02005b05 	andeq	r5, r0, #5120	; 0x1400
 278:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 27c:	04020009 	streq	r0, [r2], #-9
 280:	33052e03 	movwcc	r2, #24067	; 0x5e03
 284:	03040200 	movweq	r0, #16896	; 0x4200
 288:	00200549 	eoreq	r0, r0, r9, asr #10
 28c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 290:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 294:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 298:	04020007 	streq	r0, [r2], #-7
 29c:	01052001 	tsteq	r5, r1
 2a0:	5925053f 	stmdbpl	r5!, {r0, r1, r2, r3, r4, r5, r8, sl}
 2a4:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 2a8:	1a054b11 	bne	152ef4 <startup-0x1fead10c>
 2ac:	2e11052e 	cfmul64cs	mvdx0, mvdx1, mvdx14
 2b0:	2e1a053d 	mrccs	5, 0, r0, cr10, cr13, {1}
 2b4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 2b8:	07053e0e 	streq	r3, [r5, -lr, lsl #28]
 2bc:	2f1f052e 	svccs	0x001f052e
 2c0:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 2c4:	0e052016 	mcreq	0, 0, r2, cr5, cr6, {0}
 2c8:	2e070530 	cfmv64hrcs	mvdx7, r0
 2cc:	052f1f05 	streq	r1, [pc, #-3845]!	; fffff3cf <winning_score+0xdfffe03f>
 2d0:	16052e18 			; <UNDEFINED> instruction: 0x16052e18
 2d4:	300e0520 	andcc	r0, lr, r0, lsr #10
 2d8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 2dc:	18052f1f 	stmdane	r5, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
 2e0:	2016052e 	andscs	r0, r6, lr, lsr #10
 2e4:	05300e05 	ldreq	r0, [r0, #-3589]!	; 0xfffff1fb
 2e8:	1f052e07 	svcne	0x00052e07
 2ec:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 2f0:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 2f4:	01053005 	tsteq	r5, r5
 2f8:	4c27054b 	cfstr32mi	mvfx0, [r7], #-300	; 0xfffffed4
 2fc:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 300:	1a054b11 	bne	152f4c <startup-0x1fead0b4>
 304:	2e11052e 	cfmul64cs	mvdx0, mvdx1, mvdx14
 308:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 30c:	16052e07 	strne	r2, [r5], -r7, lsl #28
 310:	0e053d2f 	cdpeq	13, 0, cr3, cr5, cr15, {1}
 314:	2e07053e 	mcrcs	5, 0, r0, cr7, cr14, {1}
 318:	3d2f1605 	stccc	6, cr1, [pc, #-20]!	; 30c <startup-0x1ffffcf4>
 31c:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 320:	42054b01 	andmi	r4, r5, #1024	; 0x400
 324:	6712054d 	ldrvs	r0, [r2, -sp, asr #10]
 328:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 32c:	054c2d05 	strbeq	r2, [ip, #-3333]	; 0xfffff2fb
 330:	0903670c 	stmdbeq	r3, {r2, r3, r8, r9, sl, sp, lr}
 334:	0105ac08 	tsteq	r5, r8, lsl #24
 338:	e62f0583 	strt	r0, [pc], -r3, lsl #11
 33c:	03670c05 	cmneq	r7, #1280	; 0x500
 340:	05ac0809 	streq	r0, [ip, #2057]!	; 0x809
 344:	0e028301 	cdpeq	3, 0, cr8, cr2, cr1, {0}
 348:	af010100 	svcge	0x00010100
 34c:	03000000 	movweq	r0, #0
 350:	00002800 	andeq	r2, r0, r0, lsl #16
 354:	fb010200 	blx	40b5e <startup-0x1ffbf4a2>
 358:	01000d0e 	tsteq	r0, lr, lsl #26
 35c:	00010101 	andeq	r0, r1, r1, lsl #2
 360:	00010000 	andeq	r0, r1, r0
 364:	63000100 	movwvs	r0, #256	; 0x100
 368:	6b636f6c 	blvs	18dc120 <startup-0x1e723ee0>
 36c:	0000632e 	andeq	r6, r0, lr, lsr #6
 370:	616d0000 	cmnvs	sp, r0
 374:	682e6e69 	stmdavs	lr!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}
 378:	00000000 	andeq	r0, r0, r0
 37c:	00130500 	andseq	r0, r3, r0, lsl #10
 380:	05c80205 	strbeq	r0, [r8, #517]	; 0x205
 384:	0c032000 	stceq	0, cr2, [r3], {-0}
 388:	2f0f0501 	svccs	0x000f0501
 38c:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 390:	0f056702 	svceq	0x00056702
 394:	2f120520 	svccs	0x00120520
 398:	05760205 	ldrbeq	r0, [r6, #-517]!	; 0xfffffdfb
 39c:	0205200c 	andeq	r2, r5, #12
 3a0:	200c052f 	andcs	r0, ip, pc, lsr #10
 3a4:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff6a7 <winning_score+0xdfffe317>
 3a8:	0105670c 	tsteq	r5, ip, lsl #14
 3ac:	08170567 	ldmdaeq	r7, {r0, r1, r2, r5, r6, r8, sl}
 3b0:	2f0d0568 	svccs	0x000d0568
 3b4:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
 3b8:	15052e27 	strne	r2, [r5, #-3623]	; 0xfffff1d9
 3bc:	2031054a 	eorscs	r0, r1, sl, asr #10
 3c0:	052e3905 	streq	r3, [lr, #-2309]!	; 0xfffff6fb
 3c4:	01054a2b 	tsteq	r5, fp, lsr #20
 3c8:	68140521 	ldmdavs	r4, {r0, r5, r8, sl}
 3cc:	052f0c05 	streq	r0, [pc, #-3077]!	; fffff7cf <winning_score+0xdfffe43f>
 3d0:	13056701 	movwne	r6, #22273	; 0x5701
 3d4:	2f0c0568 	svccs	0x000c0568
 3d8:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 3dc:	02056811 	andeq	r6, r5, #1114112	; 0x110000
 3e0:	200c052f 	andcs	r0, ip, pc, lsr #10
 3e4:	052f0205 	streq	r0, [pc, #-517]!	; 1e7 <startup-0x1ffffe19>
 3e8:	02052010 	andeq	r2, r5, #16
 3ec:	2011052f 	andscs	r0, r1, pc, lsr #10
 3f0:	052f0505 	streq	r0, [pc, #-1285]!	; fffffef3 <winning_score+0xdfffeb63>
 3f4:	01052015 	tsteq	r5, r5, lsl r0
 3f8:	000f023d 	andeq	r0, pc, sp, lsr r2	; <UNPREDICTABLE>
 3fc:	00720101 	rsbseq	r0, r2, r1, lsl #2
 400:	00030000 	andeq	r0, r3, r0
 404:	0000001e 	andeq	r0, r0, lr, lsl r0
 408:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 40c:	0101000d 	tsteq	r1, sp
 410:	00000101 	andeq	r0, r0, r1, lsl #2
 414:	00000100 	andeq	r0, r0, r0, lsl #2
 418:	65640001 	strbvs	r0, [r4, #-1]!
 41c:	2e677562 	cdpcs	5, 6, cr7, cr7, cr2, {3}
 420:	00000063 	andeq	r0, r0, r3, rrx
 424:	20050000 	andcs	r0, r5, r0
 428:	e8020500 	stmda	r2, {r8, sl}
 42c:	03200006 			; <UNDEFINED> instruction: 0x03200006
 430:	08050116 	stmdaeq	r5, {r1, r2, r4, r8}
 434:	00100568 	andseq	r0, r0, r8, ror #10
 438:	20010402 	andcs	r0, r1, r2, lsl #8
 43c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 440:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 444:	04020008 	streq	r0, [r2], #-8
 448:	05223c01 	streq	r3, [r2, #-3073]!	; 0xfffff3ff
 44c:	0d05200f 	stceq	0, cr2, [r5, #-60]	; 0xffffffc4
 450:	2105053c 	tstcs	r5, ip, lsr r5
 454:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
 458:	15053e01 	strne	r3, [r5, #-3585]	; 0xfffff1ff
 45c:	4b080568 	blmi	201a04 <startup-0x1fdfe5fc>
 460:	05211105 	streq	r1, [r1, #-261]!	; 0xfffffefb
 464:	09053c03 	stmdbeq	r5, {r0, r1, sl, fp, ip, sp}
 468:	2e080549 	cfsh32cs	mvfx0, mvfx8, #41
 46c:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
 470:	01010005 	tsteq	r1, r5
 474:	000000af 	andeq	r0, r0, pc, lsr #1
 478:	001e0003 	andseq	r0, lr, r3
 47c:	01020000 	mrseq	r0, (UNDEF: 2)
 480:	000d0efb 	strdeq	r0, [sp], -fp
 484:	01010101 	tsteq	r1, r1, lsl #2
 488:	01000000 	mrseq	r0, (UNDEF: 0)
 48c:	00010000 	andeq	r0, r1, r0
 490:	616c6564 	cmnvs	ip, r4, ror #10
 494:	00632e79 	rsbeq	r2, r3, r9, ror lr
 498:	00000000 	andeq	r0, r0, r0
 49c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
 4a0:	00075402 	andeq	r5, r7, r2, lsl #8
 4a4:	0e051420 	cfcpydeq	mvd1, mvd5
 4a8:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 4ac:	02000905 	andeq	r0, r0, #81920	; 0x14000
 4b0:	00210304 	eoreq	r0, r1, r4, lsl #6
 4b4:	2f030402 	svccs	0x00030402
 4b8:	03040200 	movweq	r0, #16896	; 0x4200
 4bc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 4c0:	1d052f03 	stcne	15, cr2, [r5, #-12]
 4c4:	03040200 	movweq	r0, #16896	; 0x4200
 4c8:	0016052a 	andseq	r0, r6, sl, lsr #10
 4cc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 4d0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 4d4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4d8:	13054201 	movwne	r4, #20993	; 0x5201
 4dc:	2f02055b 	svccs	0x0002055b
 4e0:	052f0505 	streq	r0, [pc, #-1285]!	; ffffffe3 <winning_score+0xdfffec53>
 4e4:	13052f01 	movwne	r2, #24321	; 0x5f01
 4e8:	2f05053e 	svccs	0x0005053e
 4ec:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 4f0:	0c052f02 	stceq	15, cr2, [r5], {2}
 4f4:	2f020520 	svccs	0x00020520
 4f8:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 4fc:	0c052f02 	stceq	15, cr2, [r5], {2}
 500:	2f070520 	svccs	0x00070520
 504:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 508:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 50c:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 510:	07052e01 	streq	r2, [r5, -r1, lsl #28]
 514:	01040200 	mrseq	r0, R12_usr
 518:	2102053c 	tstcs	r2, ip, lsr r5
 51c:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 520:	0a022f01 	beq	8c12c <startup-0x1ff73ed4>
 524:	a8010100 	stmdage	r1, {r8}
 528:	03000001 	movweq	r0, #1
 52c:	00003700 	andeq	r3, r0, r0, lsl #14
 530:	fb010200 	blx	40d3a <startup-0x1ffbf2c6>
 534:	01000d0e 	tsteq	r0, lr, lsl #26
 538:	00010101 	andeq	r0, r1, r1, lsl #2
 53c:	00010000 	andeq	r0, r1, r0
 540:	64000100 	strvs	r0, [r0], #-256	; 0xffffff00
 544:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 548:	74497961 	strbvc	r7, [r9], #-2401	; 0xfffff69f
 54c:	2e736d65 	cdpcs	13, 7, cr6, cr3, cr5, {3}
 550:	00000063 	andeq	r0, r0, r3, rrx
 554:	73696400 	cmnvc	r9, #0, 8
 558:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 55c:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
 560:	00682e73 	rsbeq	r2, r8, r3, ror lr
 564:	00000000 	andeq	r0, r0, r0
 568:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
 56c:	0007e002 	andeq	lr, r7, r2
 570:	0e051820 	cdpeq	8, 0, cr1, cr5, cr0, {1}
 574:	3c080577 	cfstr32cc	mvfx0, [r8], {119}	; 0x77
 578:	053c1905 	ldreq	r1, [ip, #-2309]!	; 0xfffff6fb
 57c:	07053c13 	smladeq	r5, r3, ip, r3
 580:	2f0f053c 	svccs	0x000f053c
 584:	4c07055a 	cfstr32mi	mvfx0, [r7], {90}	; 0x5a
 588:	68590905 	ldmdavs	r9, {r0, r2, r8, fp}^
 58c:	05680705 	strbeq	r0, [r8, #-1797]!	; 0xfffff8fb
 590:	69684b09 	stmdbvs	r8!, {r0, r3, r8, r9, fp, lr}^
 594:	054b1805 	strbeq	r1, [fp, #-2053]	; 0xfffff7fb
 598:	2f4b3c09 	svccs	0x004b3c09
 59c:	05300705 	ldreq	r0, [r0, #-1797]!	; 0xfffff8fb
 5a0:	053e4b0f 	ldreq	r4, [lr, #-2831]!	; 0xfffff4f1
 5a4:	05053e0d 	streq	r3, [r5, #-3597]	; 0xfffff1f3
 5a8:	210b052e 	tstcs	fp, lr, lsr #10
 5ac:	76590d05 	ldrbvc	r0, [r9], -r5, lsl #26
 5b0:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
 5b4:	0b054b11 	bleq	153200 <startup-0x1feace00>
 5b8:	3d0f052e 	cfstr32cc	mvfx0, [pc, #-184]	; 508 <startup-0x1ffffaf8>
 5bc:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
 5c0:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 5c4:	4a760302 	bmi	1d811d4 <startup-0x1e27ee2c>
 5c8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 5cc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 5d0:	4a0d0301 	bmi	3411dc <startup-0x1fcbee24>
 5d4:	055a1d05 	ldrbeq	r1, [sl, #-3333]	; 0xfffff2fb
 5d8:	0d055919 	vstreq.16	s10, [r5, #-50]	; 0xffffffce	; <UNPREDICTABLE>
 5dc:	2119052e 	tstcs	r9, lr, lsr #10
 5e0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 5e4:	0d052219 	sfmeq	f2, 4, [r5, #-100]	; 0xffffff9c
 5e8:	2119052e 	tstcs	r9, lr, lsr #10
 5ec:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 5f0:	10052107 	andne	r2, r5, r7, lsl #2
 5f4:	01040200 	mrseq	r0, R12_usr
 5f8:	3d09053c 	cfstr32cc	mvfx0, [r9, #-240]	; 0xffffff10
 5fc:	05671005 	strbeq	r1, [r7, #-5]!
 600:	0105300c 	tsteq	r5, ip
 604:	4d1a0521 	cfldr32mi	mvfx0, [sl, #-132]	; 0xffffff7c
 608:	055b0b05 	ldrbeq	r0, [fp, #-2821]	; 0xfffff4fb
 60c:	0559590a 	ldrbeq	r5, [r9, #-2314]	; 0xfffff6f6
 610:	0d055b14 	vstreq	d5, [r5, #-80]	; 0xffffffb0
 614:	3c27052e 	cfstr32cc	mvfx0, [r7], #-184	; 0xffffff48
 618:	052e2005 	streq	r2, [lr, #-5]!
 61c:	3b052e38 	blcc	14bf04 <startup-0x1feb40fc>
 620:	4a31052e 	bmi	c41ae0 <startup-0x1f3be520>
 624:	053c4d05 	ldreq	r4, [ip, #-3333]!	; 0xfffff2fb
 628:	5a052e46 	bpl	14bf48 <startup-0x1feb40b8>
 62c:	666b052e 	strbtvs	r0, [fp], -lr, lsr #10
 630:	05587205 	ldrbeq	r7, [r8, #-517]	; 0xfffffdfb
 634:	17054b14 	smladne	r5, r4, fp, r4
 638:	580d052e 	stmdapl	sp, {r1, r2, r3, r5, r8, sl}
 63c:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
 640:	3c052e24 	stccc	14, cr2, [r5], {36}	; 0x24
 644:	3c35052e 	cfldr32cc	mvfx0, [r5], #-184	; 0xffffff48
 648:	052e4d05 	streq	r4, [lr, #-3333]!	; 0xfffff2fb
 64c:	46052e50 			; <UNDEFINED> instruction: 0x46052e50
 650:	2e5d0558 	mrccs	5, 2, r0, cr13, cr8, {2}
 654:	05666e05 	strbeq	r6, [r6, #-3589]!	; 0xfffff1fb
 658:	14055875 	strne	r5, [r5], #-2165	; 0xfffff78b
 65c:	2e17054b 	cfmac32cs	mvfx0, mvfx7, mvfx11
 660:	05580d05 	ldrbeq	r0, [r8, #-3333]	; 0xfffff2fb
 664:	2d053c2b 	stccs	12, cr3, [r5, #-172]	; 0xffffff54
 668:	5824052e 	stmdapl	r4!, {r1, r2, r3, r5, r8, sl}
 66c:	052e3e05 	streq	r3, [lr, #-3589]!	; 0xfffff1fb
 670:	4f052e37 	svcmi	0x00052e37
 674:	2e52052e 	cdpcs	5, 5, cr0, cr2, cr14, {1}
 678:	054a4805 	strbeq	r4, [sl, #-2053]	; 0xfffff7fb
 67c:	70052e5f 	andvc	r2, r5, pc, asr lr
 680:	58770566 	ldmdapl	r7!, {r1, r2, r5, r6, r8, sl}^
 684:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
 688:	01052e14 	tsteq	r5, r4, lsl lr
 68c:	4c26054b 	cfstr32mi	mvfx0, [r6], #-300	; 0xfffffed4
 690:	05691405 	strbeq	r1, [r9, #-1029]!	; 0xfffffbfb
 694:	27052e0a 	strcs	r2, [r5, -sl, lsl #28]
 698:	2e1d053c 	mrccs	5, 0, r0, cr13, cr12, {1}
 69c:	052f1a05 	streq	r1, [pc, #-2565]!	; fffffc9f <winning_score+0xdfffe90f>
 6a0:	15053d0a 	strne	r3, [r5, #-3338]	; 0xfffff2f6
 6a4:	2e0e0521 	cfsh32cs	mvfx0, mvfx14, #17
 6a8:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 6ac:	052f2e0e 	streq	r2, [pc, #-3598]!	; fffff8a6 <winning_score+0xdfffe516>
 6b0:	1205bb09 	andne	fp, r5, #9216	; 0x2400
 6b4:	3c0e054b 	cfstr32cc	mvfx0, [lr], {75}	; 0x4b
 6b8:	052f1205 	streq	r1, [pc, #-517]!	; 4bb <startup-0x1ffffb45>
 6bc:	0d052e0e 	stceq	14, cr2, [r5, #-56]	; 0xffffffc8
 6c0:	030a052f 	movweq	r0, #42287	; 0xa52f
 6c4:	0c053c79 	stceq	12, cr3, [r5], {121}	; 0x79
 6c8:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
 6cc:	04022301 	streq	r2, [r2], #-769	; 0xfffffcff
 6d0:	32010100 	andcc	r0, r1, #0, 2
 6d4:	03000001 	movweq	r0, #1
 6d8:	00001d00 	andeq	r1, r0, r0, lsl #26
 6dc:	fb010200 	blx	40ee6 <startup-0x1ffbf11a>
 6e0:	01000d0e 	tsteq	r0, lr, lsl #26
 6e4:	00010101 	andeq	r0, r1, r1, lsl #2
 6e8:	00010000 	andeq	r0, r1, r0
 6ec:	6b000100 	blvs	af4 <startup-0x1ffff50c>
 6f0:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 6f4:	00000063 	andeq	r0, r0, r3, rrx
 6f8:	1a050000 	bne	140700 <startup-0x1febf900>
 6fc:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
 700:	0320000a 			; <UNDEFINED> instruction: 0x0320000a
 704:	0505010a 	streq	r0, [r5, #-266]	; 0xfffffef6
 708:	0811054c 	ldmdaeq	r1, {r2, r3, r6, r8, sl}
 70c:	2021052f 	eorcs	r0, r1, pc, lsr #10
 710:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 714:	22052111 	andcs	r2, r5, #1073741828	; 0x40000004
 718:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 71c:	05211105 	streq	r1, [r1, #-261]!	; 0xfffffefb
 720:	09052021 	stmdbeq	r5, {r0, r5, sp}
 724:	2111052e 	tstcs	r1, lr, lsr #10
 728:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
 72c:	12052e09 	andne	r2, r5, #9, 28	; 0x90
 730:	20230521 	eorcs	r0, r3, r1, lsr #10
 734:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 738:	16052301 	strne	r2, [r5], -r1, lsl #6
 73c:	3e020576 	cfrshl64cc	mvdx2, mvdx6, r0
 740:	05201005 	streq	r1, [r0, #-5]!
 744:	0a052f0f 	beq	14c388 <startup-0x1feb3c78>
 748:	07053d20 	streq	r3, [r5, -r0, lsr #26]
 74c:	2110054a 	tstcs	r0, sl, asr #10
 750:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 754:	10054a07 	andne	r4, r5, r7, lsl #20
 758:	300a0521 	andcc	r0, sl, r1, lsr #10
 75c:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 760:	0a052110 	beq	148ba8 <startup-0x1feb7458>
 764:	4a070530 	bmi	1c1c2c <startup-0x1fe3e3d4>
 768:	05211005 	streq	r1, [r1, #-5]!
 76c:	0105300c 	tsteq	r5, ip
 770:	ae140521 	cfmul64ge	mvdx0, mvdx4, mvdx1
 774:	05310905 	ldreq	r0, [r1, #-2309]!	; 0xfffff6fb
 778:	09052017 	stmdbeq	r5, {r0, r1, r2, r4, sp}
 77c:	2018053f 	andscs	r0, r8, pc, lsr r5
 780:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 784:	05052019 	streq	r2, [r5, #-25]	; 0xffffffe7
 788:	2025053f 	eorcs	r0, r5, pc, lsr r5
 78c:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 790:	01052010 	tsteq	r5, r0, lsl r0
 794:	1005e62f 	andne	lr, r5, pc, lsr #12
 798:	2e09053e 	mcrcs	5, 0, r0, cr9, cr14, {1}
 79c:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
 7a0:	0e052f0a 	cdpeq	15, 0, cr2, cr5, cr10, {0}
 7a4:	2e050569 	cfsh32cs	mvfx0, mvfx5, #57
 7a8:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 7ac:	0c054b12 			; <UNDEFINED> instruction: 0x0c054b12
 7b0:	3d0d054b 	cfstr32cc	mvfx0, [sp, #-300]	; 0xfffffed4
 7b4:	054b1f05 	strbeq	r1, [fp, #-3845]	; 0xfffff0fb
 7b8:	2a052e1a 	bcs	14c028 <startup-0x1feb3fd8>
 7bc:	2e220520 	cfsh64cs	mvdx0, mvdx2, #16
 7c0:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
 7c4:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 7c8:	05053702 	streq	r3, [r5, #-1794]	; 0xfffff8fe
 7cc:	01040200 	mrseq	r0, R12_usr
 7d0:	3c09033c 	stccc	3, cr0, [r9], {60}	; 0x3c
 7d4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 7d8:	01052f0d 	tsteq	r5, sp, lsl #30
 7dc:	01040200 	mrseq	r0, R12_usr
 7e0:	b11f0521 	tstlt	pc, r1, lsr #10
 7e4:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
 7e8:	74110304 	ldrvc	r0, [r1], #-772	; 0xfffffcfc
 7ec:	054b2205 	strbeq	r2, [fp, #-517]	; 0xfffffdfb
 7f0:	22052e05 	andcs	r2, r5, #5, 28	; 0x50
 7f4:	2e150520 	cfmul64cs	mvdx0, mvdx5, mvdx0
 7f8:	05250105 	streq	r0, [r5, #-261]!	; 0xfffffefb
 7fc:	15051e05 	strne	r1, [r5, #-3589]	; 0xfffff1fb
 800:	30010520 	andcc	r0, r1, r0, lsr #10
 804:	01000902 	tsteq	r0, r2, lsl #18
 808:	00025501 	andeq	r5, r2, r1, lsl #10
 80c:	39000300 	stmdbcc	r0, {r8, r9}
 810:	02000000 	andeq	r0, r0, #0
 814:	0d0efb01 	vstreq	d15, [lr, #-4]
 818:	01010100 	mrseq	r0, (UNDEF: 17)
 81c:	00000001 	andeq	r0, r0, r1
 820:	01000001 	tsteq	r0, r1
 824:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 828:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 82c:	64000000 	strvs	r0, [r0], #-0
 830:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 834:	74497961 	strbvc	r7, [r9], #-2401	; 0xfffff69f
 838:	2e736d65 	cdpcs	13, 7, cr6, cr3, cr5, {3}
 83c:	00000068 	andeq	r0, r0, r8, rrx
 840:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 844:	00682e6e 	rsbeq	r2, r8, lr, ror #28
 848:	00000000 	andeq	r0, r0, r0
 84c:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
 850:	000cc402 	andeq	ip, ip, r2, lsl #8
 854:	010e0320 	tsteq	lr, r0, lsr #6
 858:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffd5b <winning_score+0xdfffe9cb>
 85c:	0e056706 	cdpeq	7, 0, cr6, cr5, cr6, {0}
 860:	3d0a052e 	cfstr32cc	mvfx0, [sl, #-184]	; 0xffffff48
 864:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 868:	13052f07 	movwne	r2, #24327	; 0x5f07
 86c:	3d10052e 	cfldr32cc	mvfx0, [r0, #-184]	; 0xffffff48
 870:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 874:	07052e05 	streq	r2, [r5, -r5, lsl #28]
 878:	2e0f052f 	cfsh32cs	mvfx0, mvfx15, #31
 87c:	303e0205 	eorscc	r0, lr, r5, lsl #4
 880:	4b1c052f 	blmi	701d44 <startup-0x1f8fe2bc>
 884:	672e0205 	strvs	r0, [lr, -r5, lsl #4]!
 888:	053d1c05 	ldreq	r1, [sp, #-3077]!	; 0xfffff3fb
 88c:	1c052e02 	stcne	14, cr2, [r5], {2}
 890:	2e020567 	cfsh32cs	mvfx0, mvfx2, #55
 894:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 898:	1a057c31 	bne	15f964 <startup-0x1fea069c>
 89c:	3c29059f 	cfstr32cc	mvfx0, [r9], #-636	; 0xfffffd84
 8a0:	054a2005 	strbeq	r2, [sl, #-5]
 8a4:	1a052006 	bne	1488c4 <startup-0x1feb773c>
 8a8:	2e29054b 	cfsh64cs	mvdx0, mvdx9, #43
 8ac:	054a2005 	strbeq	r2, [sl, #-5]
 8b0:	04052006 	streq	r2, [r5], #-6
 8b4:	000e054b 	andeq	r0, lr, fp, asr #10
 8b8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 8bc:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 8c0:	01053009 	tsteq	r5, r9
 8c4:	76170521 	ldrvc	r0, [r7], -r1, lsr #10
 8c8:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
 8cc:	2f2f2f02 	svccs	0x002f2f02
 8d0:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 8d4:	04052103 	streq	r2, [r5], #-259	; 0xfffffefd
 8d8:	3a080559 	bcc	201e44 <startup-0x1fdfe1bc>
 8dc:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 8e0:	07053202 	streq	r3, [r5, -r2, lsl #4]
 8e4:	2103054b 	tstcs	r3, fp, asr #10
 8e8:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
 8ec:	07055608 	streq	r5, [r5, -r8, lsl #12]
 8f0:	3202053c 	andcc	r0, r2, #60, 10	; 0xf000000
 8f4:	05305a2f 	ldreq	r5, [r0, #-2607]!	; 0xfffff5d1
 8f8:	07054b04 	streq	r4, [r5, -r4, lsl #22]
 8fc:	2103052f 	tstcs	r3, pc, lsr #10
 900:	05590405 	ldrbeq	r0, [r9, #-1029]	; 0xfffffbfb
 904:	07053a08 	streq	r3, [r5, -r8, lsl #20]
 908:	0805322e 	stmdaeq	r5, {r1, r2, r3, r5, r9, ip, sp}
 90c:	01040200 	mrseq	r0, R12_usr
 910:	00070520 	andeq	r0, r7, r0, lsr #10
 914:	3c010402 	cfstrscc	mvf0, [r1], {2}
 918:	052f0f05 	streq	r0, [pc, #-3845]!	; fffffa1b <winning_score+0xdfffe68b>
 91c:	0f053d13 	svceq	0x00053d13
 920:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 924:	052f0105 	streq	r0, [pc, #-261]!	; 827 <startup-0x1ffff7d9>
 928:	0905ca14 	stmdbeq	r5, {r2, r4, r9, fp, lr, pc}
 92c:	02052f3d 	andeq	r2, r5, #61, 30	; 0xf4
 930:	4b080530 	blmi	201df8 <startup-0x1fdfe208>
 934:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 938:	09055918 	stmdbeq	r5, {r3, r4, r8, fp, ip, lr}
 93c:	2e08053a 	mcrcs	5, 0, r0, cr8, cr10, {1}
 940:	76320205 	ldrtvc	r0, [r2], -r5, lsl #4
 944:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 948:	18052103 	stmdane	r5, {r0, r1, r8, sp}
 94c:	3a080559 	bcc	201eb8 <startup-0x1fdfe148>
 950:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 954:	01053202 	tsteq	r5, r2, lsl #4
 958:	ca100578 	bgt	401f40 <startup-0x1fbfe0c0>
 95c:	2f2f0205 	svccs	0x002f0205
 960:	05201005 	streq	r1, [r0, #-5]!
 964:	11052f02 	tstne	r5, r2, lsl #30
 968:	2f050520 	svccs	0x00050520
 96c:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 970:	052f3d02 	streq	r3, [pc, #-3330]!	; fffffc76 <winning_score+0xdfffe8e6>
 974:	32052f01 	andcc	r2, r5, #1, 30
 978:	9f1005bc 	svcls	0x001005bc
 97c:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
 980:	02056706 	andeq	r6, r5, #1572864	; 0x180000
 984:	052f4d2e 	streq	r4, [pc, #-3374]!	; fffffc5e <winning_score+0xdfffe8ce>
 988:	0305300a 	movweq	r3, #20490	; 0x500a
 98c:	3d0a053c 	cfstr32cc	mvfx0, [sl, #-240]	; 0xffffff10
 990:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 994:	03054b07 	movweq	r4, #23303	; 0x5b07
 998:	3d07052e 	cfstr32cc	mvfx0, [r7, #-184]	; 0xffffff48
 99c:	05670305 	strbeq	r0, [r7, #-773]!	; 0xfffffcfb
 9a0:	0c05f313 	stceq	3, cr15, [r5], {19}
 9a4:	66040558 			; <UNDEFINED> instruction: 0x66040558
 9a8:	05211305 	streq	r1, [r1, #-773]!	; 0xfffffcfb
 9ac:	0405580c 	streq	r5, [r5], #-2060	; 0xfffff7f4
 9b0:	21130558 	tstcs	r3, r8, asr r5
 9b4:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
 9b8:	13056604 	movwne	r6, #22020	; 0x5604
 9bc:	3c0c0521 	cfstr32cc	mvfx0, [ip], {33}	; 0x21
 9c0:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 9c4:	0405210c 	streq	r2, [r5], #-268	; 0xfffffef4
 9c8:	16059e08 	strne	r9, [r5], -r8, lsl #28
 9cc:	3c0f0521 	cfstr32cc	mvfx0, [pc], {33}	; 0x21
 9d0:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 9d4:	05052606 	streq	r2, [r5, #-1542]	; 0xfffff9fa
 9d8:	16059008 	strne	r9, [r5], -r8
 9dc:	2e110521 	cfmul64cs	mvdx0, mvdx1, mvdx1
 9e0:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 9e4:	05053006 	streq	r3, [r5, #-6]
 9e8:	1605ac08 	strne	sl, [r5], -r8, lsl #24
 9ec:	2e110521 	cfmul64cs	mvdx0, mvdx1, mvdx1
 9f0:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 9f4:	0505300a 	streq	r3, [r5, #-10]
 9f8:	2f12052e 	svccs	0x0012052e
 9fc:	2f670405 	svccs	0x00670405
 a00:	a0080a05 	andge	r0, r8, r5, lsl #20
 a04:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 a08:	04052f12 	streq	r2, [r5], #-3858	; 0xfffff0ee
 a0c:	0a052f67 	beq	14c7b0 <startup-0x1feb3850>
 a10:	1705a008 	strne	sl, [r5, -r8]
 a14:	2e23052e 	cfsh64cs	mvdx0, mvdx3, #30
 a18:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
 a1c:	16052005 	strne	r2, [r5], -r5
 a20:	4a06053d 	bmi	181f1c <startup-0x1fe7e0e4>
 a24:	052f1105 	streq	r1, [pc, #-261]!	; 927 <startup-0x1ffff6d9>
 a28:	052f3d05 	streq	r3, [pc, #-3333]!	; fffffd2b <winning_score+0xdfffe99b>
 a2c:	0c05211c 	stfeqs	f2, [r5], {28}
 a30:	3d11054a 	cfldr32cc	mvfx0, [r1, #-296]	; 0xfffffed8
 a34:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 a38:	2e120301 	cdpcs	3, 1, cr0, cr2, cr1, {0}
 a3c:	60081005 	andvs	r1, r8, r5
 a40:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 a44:	11053010 	tstne	r5, r0, lsl r0
 a48:	7506054b 	strvc	r0, [r6, #-1355]	; 0xfffffab5
 a4c:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
 a50:	05754b14 	ldrbeq	r4, [r5, #-2836]!	; 0xfffff4ec
 a54:	09056702 	stmdbeq	r5, {r1, r8, r9, sl, sp, lr}
 a58:	01057508 	tsteq	r5, r8, lsl #10
 a5c:	00040221 	andeq	r0, r4, r1, lsr #4
 a60:	003e0101 	eorseq	r0, lr, r1, lsl #2
 a64:	00030000 	andeq	r0, r3, r0
 a68:	0000001d 	andeq	r0, r0, sp, lsl r0
 a6c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a70:	0101000d 	tsteq	r1, sp
 a74:	00000101 	andeq	r0, r0, r1, lsl #2
 a78:	00000100 	andeq	r0, r0, r0, lsl #2
 a7c:	616d0001 	cmnvs	sp, r1
 a80:	632e6874 			; <UNDEFINED> instruction: 0x632e6874
 a84:	00000000 	andeq	r0, r0, r0
 a88:	00110500 	andseq	r0, r1, r0, lsl #10
 a8c:	12980205 	addsne	r0, r8, #1342177280	; 0x50000000
 a90:	05162000 	ldreq	r2, [r6, #-0]
 a94:	10054b07 	andne	r4, r5, r7, lsl #22
 a98:	3e0c053d 	mcrcc	5, 0, r0, cr12, cr13, {1}
 a9c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 aa0:	01010004 	tsteq	r1, r4
 aa4:	00000088 	andeq	r0, r0, r8, lsl #1
 aa8:	00200003 	eoreq	r0, r0, r3
 aac:	01020000 	mrseq	r0, (UNDEF: 2)
 ab0:	000d0efb 	strdeq	r0, [sp], -fp
 ab4:	01010101 	tsteq	r1, r1, lsl #2
 ab8:	01000000 	mrseq	r0, (UNDEF: 0)
 abc:	00010000 	andeq	r0, r1, r0
 ac0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 ac4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 ac8:	00000063 	andeq	r0, r0, r3, rrx
 acc:	0f050000 	svceq	0x00050000
 ad0:	00020500 	andeq	r0, r2, r0, lsl #10
 ad4:	17200000 	strne	r0, [r0, -r0]!
 ad8:	21130205 	tstcs	r3, r5, lsl #4
 adc:	01052f21 	tsteq	r5, r1, lsr #30
 ae0:	00030221 	andeq	r0, r3, r1, lsr #4
 ae4:	31050101 	tstcc	r5, r1, lsl #2
 ae8:	b6020500 	strlt	r0, [r2], -r0, lsl #10
 aec:	03200012 			; <UNDEFINED> instruction: 0x03200012
 af0:	02050110 	andeq	r0, r5, #16, 2
 af4:	01051321 	tsteq	r5, r1, lsr #6
 af8:	23330521 	teqcs	r3, #138412032	; 0x8400000
 afc:	13210205 			; <UNDEFINED> instruction: 0x13210205
 b00:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 b04:	0205223c 	andeq	r2, r5, #60, 4	; 0xc0000003
 b08:	01051321 	tsteq	r5, r1, lsr #6
 b0c:	233e0521 	teqcs	lr, #138412032	; 0x8400000
 b10:	13210205 			; <UNDEFINED> instruction: 0x13210205
 b14:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 b18:	02052330 	andeq	r2, r5, #48, 6	; 0xc0000000
 b1c:	01052113 	tsteq	r5, r3, lsl r1
 b20:	22310521 	eorscs	r0, r1, #138412032	; 0x8400000
 b24:	21130205 	tstcs	r3, r5, lsl #4
 b28:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 b2c:	01010001 	tsteq	r1, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20373143 	eorscs	r3, r7, r3, asr #2
   8:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
   c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  10:	30313230 	eorscc	r3, r1, r0, lsr r2
  14:	20343238 	eorscs	r3, r4, r8, lsr r2
  18:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  1c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  20:	6d2d2029 	stcvs	0, cr2, [sp, #-164]!	; 0xffffff5c
  24:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  28:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  2c:	752d6f6e 	strvc	r6, [sp, #-3950]!	; 0xfffff092
  30:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
  34:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  38:	6363612d 	cmnvs	r3, #1073741835	; 0x4000000b
  3c:	20737365 	rsbscs	r7, r3, r5, ror #6
  40:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  44:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  48:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  4c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  64:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  68:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  6c:	31756e67 	cmncc	r5, r7, ror #28
  70:	64610037 	strbtvs	r0, [r1], #-55	; 0xffffffc9
  74:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
  78:	63736100 	cmnvs	r3, #0, 2
  7c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  80:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  84:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
  88:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
  8c:	63736100 	cmnvs	r3, #0, 2
  90:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
  94:	0074696e 	rsbseq	r6, r4, lr, ror #18
  98:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  9c:	6f675f69 	svcvs	0x00675f69
  a0:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  a4:	63736100 	cmnvs	r3, #0, 2
  a8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  ac:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  b0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
  b4:	736e7500 	cmnvc	lr, #0, 10
  b8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  bc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  c0:	61007261 	tstvs	r0, r1, ror #4
  c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  c8:	6165725f 	cmnvs	r5, pc, asr r2
  cc:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  d0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
  d4:	6f687300 	svcvs	0x00687300
  d8:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  dc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e0:	2064656e 	rsbcs	r6, r4, lr, ror #10
  e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
  e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  ec:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  f0:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
  f4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  f8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  fc:	73610072 	cmnvc	r1, #114	; 0x72
 100:	5f696963 	svcpl	0x00696963
 104:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 108:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 10c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 110:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 114:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 118:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 11c:	6f6d0065 	svcvs	0x006d0065
 120:	5f726564 	svcpl	0x00726564
 124:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0xfffffe8d
 128:	63736100 	cmnvs	r3, #0, 2
 12c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 130:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 134:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 138:	73610061 	cmnvc	r1, #97	; 0x61
 13c:	5f696963 	svcpl	0x00696963
 140:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 144:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 148:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 14c:	61007261 	tstvs	r0, r1, ror #4
 150:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 154:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 158:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 15c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 160:	746f006e 	strbtvc	r0, [pc], #-110	; 168 <startup-0x1ffffe98>
 164:	72657079 	rsbvc	r7, r5, #121	; 0x79
 168:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 16c:	73610065 	cmnvc	r1, #101	; 0x65
 170:	5f696963 	svcpl	0x00696963
 174:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 178:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 17c:	73610061 	cmnvc	r1, #97	; 0x61
 180:	5f696963 	svcpl	0x00696963
 184:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 188:	00646e61 	rsbeq	r6, r4, r1, ror #28
 18c:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 190:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 194:	7361635c 	cmnvc	r1, #92, 6	; 0x70000001
 198:	445c6168 	ldrbmi	r6, [ip], #-360	; 0xfffffe98
 19c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1a0:	73746e65 	cmnvc	r4, #1616	; 0x650
 1a4:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
 1a8:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
 1ac:	73696467 	cmnvc	r9, #1728053248	; 0x67000000
 1b0:	6f6f5070 	svcvs	0x006f5070
 1b4:	675c676e 	ldrbvs	r6, [ip, -lr, ror #14]
 1b8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 1bc:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 1c0:	63736100 	cmnvs	r3, #0, 2
 1c4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1cc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1d0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8 <startup-0x1ffffff8>
 1d4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1dc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1e0:	5f657469 	svcpl	0x00657469
 1e4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e8:	63736100 	cmnvs	r3, #0, 2
 1ec:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 1f0:	45475000 	strbmi	r5, [r7, #-0]
 1f4:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 1f8:	6d005952 	vstrvs.16	s10, [r0, #-164]	; 0xffffff5c	; <UNPREDICTABLE>
 1fc:	5f65766f 	svcpl	0x0065766f
 200:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 204:	626f656c 	rsbvs	r6, pc, #108, 10	; 0x1b000000
 208:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 20c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 210:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
 214:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
 218:	00797269 	rsbseq	r7, r9, r9, ror #4
 21c:	5f746573 	svcpl	0x00746573
 220:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 224:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 228:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 22c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 230:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 234:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 238:	70006465 	andvc	r6, r0, r5, ror #8
 23c:	0078736f 	rsbseq	r7, r8, pc, ror #6
 240:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 244:	6c616200 	sfmvs	f6, 2, [r1], #-0
 248:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 24c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 250:	70007972 	andvc	r7, r0, r2, ror r9
 254:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 258:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
 25c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 260:	63007972 	movwvs	r7, #2418	; 0x972
 264:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 268:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 26c:	6a626f6c 	bvs	189c024 <startup-0x1e763fdc>
 270:	00746365 	rsbseq	r6, r4, r5, ror #6
 274:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 278:	73007964 	movwvc	r7, #2404	; 0x964
 27c:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 280:	7a697300 	bvc	1a5ce88 <startup-0x1e5a3178>
 284:	63007965 	movwvs	r7, #2405	; 0x965
 288:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
 28c:	61705f65 	cmnvs	r0, r5, ror #30
 290:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 294:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 298:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 29c:	00776172 	rsbseq	r6, r7, r2, ror r1
 2a0:	61657263 	cmnvs	r5, r3, ror #4
 2a4:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
 2a8:	6f6c6c61 	svcvs	0x006c6c61
 2ac:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b0:	4f740074 	svcmi	0x00740074
 2b4:	6e006a62 	vmlsvs.f32	s12, s0, s5
 2b8:	6f706d75 	svcvs	0x00706d75
 2bc:	73746e69 	cmnvc	r4, #1680	; 0x690
 2c0:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 2c4:	61625f65 	cmnvs	r2, r5, ror #30
 2c8:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 2cc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2d0:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 2d4:	00786465 	rsbseq	r6, r8, r5, ror #8
 2d8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2dc:	70646e61 	rsbvc	r6, r4, r1, ror #28
 2e0:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 2e4:	00632e65 	rsbeq	r2, r3, r5, ror #28
 2e8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2ec:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 2f0:	6a626f6c 	bvs	189c0a8 <startup-0x1e763f58>
 2f4:	00746365 	rsbseq	r6, r4, r5, ror #6
 2f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 2fc:	695f3672 	ldmdbvs	pc, {r1, r4, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
 300:	0074696e 	rsbseq	r6, r4, lr, ror #18
 304:	756e696d 	strbvc	r6, [lr, #-2413]!	; 0xfffff693
 308:	00736574 	rsbseq	r6, r3, r4, ror r5
 30c:	5f6e6574 	svcpl	0x006e6574
 310:	6f636573 	svcvs	0x00636573
 314:	0073646e 	rsbseq	r6, r3, lr, ror #8
 318:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
 31c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 320:	69645f36 	stmdbvs	r4!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 324:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
 328:	70670065 	rsbvc	r0, r7, r5, rrx
 32c:	695f6f69 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 330:	0074696e 	rsbseq	r6, r4, lr, ror #18
 334:	5f746567 	svcpl	0x00746567
 338:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
 33c:	5f746e65 	svcpl	0x00746e65
 340:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 344:	6f6c6300 	svcvs	0x006c6300
 348:	632e6b63 			; <UNDEFINED> instruction: 0x632e6b63
 34c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 350:	6e655f36 	mcrvs	15, 3, r5, cr5, cr6, {1}
 354:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 358:	61735500 	cmnvs	r3, r0, lsl #10
 35c:	5f007472 	svcpl	0x00007472
 360:	73756e75 	cmnvc	r5, #1872	; 0x750
 364:	00306465 	eorseq	r6, r0, r5, ror #8
 368:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
 36c:	00632e67 	rsbeq	r2, r3, r7, ror #28
 370:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 374:	31646573 	smccc	18003	; 0x4653
 378:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 37c:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 380:	755f0032 	ldrbvc	r0, [pc, #-50]	; 356 <startup-0x1ffffcaa>
 384:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 388:	5f003364 	svcpl	0x00003364
 38c:	73756e75 	cmnvc	r5, #1872	; 0x750
 390:	00346465 	eorseq	r6, r4, r5, ror #8
 394:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 398:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
 39c:	70746700 	rsbsvc	r6, r4, r0, lsl #14
 3a0:	72700072 	rsbsvc	r0, r0, #114	; 0x72
 3a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 3a8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 3ac:	68635f74 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3b0:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
 3b4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3b8:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 3bc:	65640069 	strbvs	r0, [r4, #-105]!	; 0xffffff97
 3c0:	5f79616c 	svcpl	0x0079616c
 3c4:	6e353231 	mrcvs	2, 1, r3, cr5, cr1, {1}
 3c8:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 3cc:	2e79616c 	rpwcsez	f6, f1, #4.0
 3d0:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 3d4:	5f79616c 	svcpl	0x0079616c
 3d8:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 3dc:	656e0073 	strbvs	r0, [lr, #-115]!	; 0xffffff8d
 3e0:	79007478 	stmdbvc	r0, {r3, r4, r5, r6, sl, ip, sp, lr}
 3e4:	70657473 	rsbvc	r7, r5, r3, ror r4
 3e8:	4c4f5000 	marmi	acc0, r5, pc
 3ec:	494f5059 	stmdbmi	pc, {r0, r3, r4, r6, ip, lr}^	; <UNPREDICTABLE>
 3f0:	7300544e 	movwvc	r5, #1102	; 0x44e
 3f4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 3f8:	6f6c7000 	svcvs	0x006c7000
 3fc:	6f705f74 	svcvs	0x00705f74
 400:	6f67796c 	svcvs	0x0067796c
 404:	6964006e 	stmdbvs	r4!, {r1, r2, r3, r5, r6}^
 408:	616c7073 	smcvs	50947	; 0xc703
 40c:	696c5f79 	stmdbvs	ip!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 410:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
 414:	00706d65 	rsbseq	r6, r0, r5, ror #26
 418:	6f727265 	svcvs	0x00727265
 41c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 420:	7961746c 	stmdbvc	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
 424:	61726400 	cmnvs	r2, r0, lsl #8
 428:	696c5f77 	stmdbvs	ip!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 42c:	665f656e 	ldrbvs	r6, [pc], -lr, ror #10
 430:	5f6d6f72 	svcpl	0x006d6f72
 434:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 438:	70007374 	andvc	r7, r0, r4, ror r3
 43c:	67796c6f 	ldrbvs	r6, [r9, -pc, ror #24]!
 440:	00316e6f 	eorseq	r6, r1, pc, ror #28
 444:	454e494c 	strbmi	r4, [lr, #-2380]	; 0xfffff6b4
 448:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0xfffffd00
 44c:	70007065 	andvc	r7, r0, r5, rrx
 450:	5f746f6c 	svcpl	0x00746f6c
 454:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 458:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 45c:	00786174 	rsbseq	r6, r8, r4, ror r1
 460:	54434552 	strbpl	r4, [r3], #-1362	; 0xfffffaae
 464:	6c6f7000 	stclvs	0, cr7, [pc], #-0	; 46c <startup-0x1ffffb94>
 468:	6e6f6779 	mcrvs	7, 3, r6, cr15, cr9, {3}
 46c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 470:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
 474:	616c7073 	smcvs	50947	; 0xc703
 478:	65744979 	ldrbvs	r4, [r4, #-2425]!	; 0xfffff687
 47c:	632e736d 			; <UNDEFINED> instruction: 0x632e736d
 480:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 484:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 488:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 48c:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
 490:	5f6e7275 	svcpl	0x006e7275
 494:	73657270 	cmnvc	r5, #112, 4
 498:	5f646573 	svcpl	0x00646573
 49c:	0079656b 	rsbseq	r6, r9, fp, ror #10
 4a0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4a4:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 4a8:	6b006e6d 	blvs	1be64 <startup-0x1ffe419c>
 4ac:	2e627965 	vnmulcs.f16	s15, s4, s11	; <UNPREDICTABLE>
 4b0:	6f630063 	svcvs	0x00630063
 4b4:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 4b8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 4bc:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
 4c0:	756f0062 	strbvc	r0, [pc, #-98]!	; 466 <startup-0x1ffffb9a>
 4c4:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 4c8:	756f0067 	strbvc	r0, [pc, #-103]!	; 469 <startup-0x1ffffb97>
 4cc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 4d0:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
 4d4:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
 4d8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 4dc:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 4e0:	5f73746e 	svcpl	0x0073746e
 4e4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 4e8:	00327265 	eorseq	r7, r2, r5, ror #4
 4ec:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4f0:	00317463 	eorseq	r7, r1, r3, ror #8
 4f4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4f8:	00327463 	eorseq	r7, r2, r3, ror #8
 4fc:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 500:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 504:	5f72656e 	svcpl	0x0072656e
 508:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 50c:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 510:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 514:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 518:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 51c:	6f725f67 	svcvs	0x00725f67
 520:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
 524:	616d0065 	cmnvs	sp, r5, rrx
 528:	70006e69 	andvc	r6, r0, r9, ror #28
 52c:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 530:	73003265 	movwvc	r3, #613	; 0x265
 534:	6c676e69 	stclvs	14, cr6, [r7], #-420	; 0xfffffe5c
 538:	6d614765 	stclvs	7, cr4, [r1, #-404]!	; 0xfffffe6c
 53c:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
 540:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 544:	63735f67 	cmnvs	r3, #412	; 0x19c
 548:	0065726f 	rsbeq	r7, r5, pc, ror #4
 54c:	6c6c6f63 	stclvs	15, cr6, [ip], #-396	; 0xfffffe74
 550:	6f697369 	svcvs	0x00697369
 554:	616d006e 	cmnvs	sp, lr, rrx
 558:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 55c:	72747300 	rsbsvc	r7, r4, #0, 6
 560:	5f676e69 	svcpl	0x00676e69
 564:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 568:	705f7374 	subsvc	r7, pc, r4, ror r3	; <UNPREDICTABLE>
 56c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 570:	74003172 	strvc	r3, [r0], #-370	; 0xfffffe8e
 574:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 578:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
 57c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 580:	00747075 	rsbseq	r7, r4, r5, ror r0
 584:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 588:	0031656c 	eorseq	r6, r1, ip, ror #10
 58c:	4a424f50 	bmi	10942d4 <startup-0x1ef6bd2c>
 590:	00544345 	subseq	r4, r4, r5, asr #6
 594:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 598:	63735f74 	cmnvs	r3, #116, 30	; 0x1d0
 59c:	7365726f 	cmnvc	r5, #-268435450	; 0xf0000006
 5a0:	74616d00 	strbtvc	r6, [r1], #-3328	; 0xfffff300
 5a4:	00632e68 	rsbeq	r2, r3, r8, ror #28
 5a8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 5ac:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 5b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 5b4:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
 5b8:	61726700 	cmnvs	r2, r0, lsl #14
 5bc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5c0:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 5c4:	635f6c65 	cmpvs	pc, #25856	; 0x6500
 5c8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 5cc:	61726700 	cmnvs	r2, r0, lsl #14
 5d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5d4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 5d8:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 5dc:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 5e0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 5e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5e8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 5ec:	61697469 	cmnvs	r9, r9, ror #8
 5f0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 5f4:	61747300 	cmnvs	r4, r0, lsl #6
 5f8:	70757472 	rsbsvc	r7, r5, r2, ror r4
 5fc:	73696400 	cmnvc	r9, #0, 8
 600:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 604:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 608:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 60c:	73007470 	movwvc	r7, #1136	; 0x470
 610:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 614:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 618:	61726700 	cmnvs	r2, r0, lsl #14
 61c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 620:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 624:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 628:	Address 0x00000628 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000048 	andcs	r0, r0, r8, asr #32
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000090 	mulcs	r0, r0, r0
  5c:	00000034 	andeq	r0, r0, r4, lsr r0
  60:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  64:	41018e02 	tstmi	r1, r2, lsl #28
  68:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  6c:	00000007 	andeq	r0, r0, r7
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000c4 	andcs	r0, r0, r4, asr #1
  7c:	00000040 	andeq	r0, r0, r0, asr #32
  80:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  84:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000104 	andcs	r0, r0, r4, lsl #2
  9c:	0000004c 	andeq	r0, r0, ip, asr #32
  a0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000150 	andcs	r0, r0, r0, asr r1
  bc:	00000034 	andeq	r0, r0, r4, lsr r0
  c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c4:	41018e02 	tstmi	r1, r2, lsl #28
  c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  cc:	00000007 	andeq	r0, r0, r7
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000184 	andcs	r0, r0, r4, lsl #3
  dc:	0000002a 	andeq	r0, r0, sl, lsr #32
  e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e4:	41018e02 	tstmi	r1, r2, lsl #28
  e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  ec:	00000007 	andeq	r0, r0, r7
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200001ae 	andcs	r0, r0, lr, lsr #3
  fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 100:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 104:	41018e02 	tstmi	r1, r2, lsl #28
 108:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 10c:	00000007 	andeq	r0, r0, r7
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200001d8 	ldrdcs	r0, [r0], -r8
 11c:	00000036 	andeq	r0, r0, r6, lsr r0
 120:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 124:	41018e02 	tstmi	r1, r2, lsl #28
 128:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 12c:	00000007 	andeq	r0, r0, r7
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	2000020e 	andcs	r0, r0, lr, lsl #4
 13c:	00000036 	andeq	r0, r0, r6, lsr r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	00000018 	andeq	r0, r0, r8, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000244 	andcs	r0, r0, r4, asr #4
 15c:	00000022 	andeq	r0, r0, r2, lsr #32
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0000070d 	andeq	r0, r0, sp, lsl #14
 16c:	00000018 	andeq	r0, r0, r8, lsl r0
 170:	00000000 	andeq	r0, r0, r0
 174:	20000266 	andcs	r0, r0, r6, ror #4
 178:	00000010 	andeq	r0, r0, r0, lsl r0
 17c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 180:	41018e02 	tstmi	r1, r2, lsl #28
 184:	0000070d 	andeq	r0, r0, sp, lsl #14
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	20000276 	andcs	r0, r0, r6, ror r2
 194:	00000038 	andeq	r0, r0, r8, lsr r0
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	200002ae 	andcs	r0, r0, lr, lsr #5
 1b4:	0000007e 	andeq	r0, r0, lr, ror r0
 1b8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1c0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	0000000c 	andeq	r0, r0, ip
 1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000001c8 	andeq	r0, r0, r8, asr #3
 1e0:	2000032c 	andcs	r0, r0, ip, lsr #6
 1e4:	00000060 	andeq	r0, r0, r0, rrx
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000001c8 	andeq	r0, r0, r8, asr #3
 200:	2000038c 	andcs	r0, r0, ip, lsl #7
 204:	00000060 	andeq	r0, r0, r0, rrx
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000001c8 	andeq	r0, r0, r8, asr #3
 220:	200003ec 	andcs	r0, r0, ip, ror #7
 224:	00000084 	andeq	r0, r0, r4, lsl #1
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	000001c8 	andeq	r0, r0, r8, asr #3
 240:	20000470 	andcs	r0, r0, r0, ror r4
 244:	00000056 	andeq	r0, r0, r6, asr r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	000001c8 	andeq	r0, r0, r8, asr #3
 260:	200004c6 	andcs	r0, r0, r6, asr #9
 264:	00000020 	andeq	r0, r0, r0, lsr #32
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	000001c8 	andeq	r0, r0, r8, asr #3
 280:	200004e6 	andcs	r0, r0, r6, ror #9
 284:	00000072 	andeq	r0, r0, r2, ror r0
 288:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 28c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 290:	480e4101 	stmdami	lr, {r0, r8, lr}
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	000001c8 	andeq	r0, r0, r8, asr #3
 2a0:	20000558 	andcs	r0, r0, r8, asr r5
 2a4:	00000070 	andeq	r0, r0, r0, ror r0
 2a8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2b0:	480e4101 	stmdami	lr, {r0, r8, lr}
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c8:	00000018 	andeq	r0, r0, r8, lsl r0
 2cc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2d0:	200005c8 	andcs	r0, r0, r8, asr #11
 2d4:	0000007c 	andeq	r0, r0, ip, ror r0
 2d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2dc:	41018e02 	tstmi	r1, r2, lsl #28
 2e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2ec:	20000644 	andcs	r0, r0, r4, asr #12
 2f0:	00000030 	andeq	r0, r0, r0, lsr r0
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 300:	00000018 	andeq	r0, r0, r8, lsl r0
 304:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 308:	20000674 	andcs	r0, r0, r4, ror r6
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 314:	41018e02 	tstmi	r1, r2, lsl #28
 318:	0000070d 	andeq	r0, r0, sp, lsl #14
 31c:	00000018 	andeq	r0, r0, r8, lsl r0
 320:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 324:	20000690 	mulcs	r0, r0, r6
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 330:	41018e02 	tstmi	r1, r2, lsl #28
 334:	0000070d 	andeq	r0, r0, sp, lsl #14
 338:	00000018 	andeq	r0, r0, r8, lsl r0
 33c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 340:	200006ac 	andcs	r0, r0, ip, lsr #13
 344:	0000003c 	andeq	r0, r0, ip, lsr r0
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0000070d 	andeq	r0, r0, sp, lsl #14
 354:	0000000c 	andeq	r0, r0, ip
 358:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 35c:	7c020001 	stcvc	0, cr0, [r2], {1}
 360:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 364:	0000001c 	andeq	r0, r0, ip, lsl r0
 368:	00000354 	andeq	r0, r0, r4, asr r3
 36c:	200006e8 	andcs	r0, r0, r8, ror #13
 370:	00000040 	andeq	r0, r0, r0, asr #32
 374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 378:	41018e02 	tstmi	r1, r2, lsl #28
 37c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 380:	00000007 	andeq	r0, r0, r7
 384:	0000001c 	andeq	r0, r0, ip, lsl r0
 388:	00000354 	andeq	r0, r0, r4, asr r3
 38c:	20000728 	andcs	r0, r0, r8, lsr #14
 390:	0000002a 	andeq	r0, r0, sl, lsr #32
 394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 398:	41018e02 	tstmi	r1, r2, lsl #28
 39c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a0:	00000007 	andeq	r0, r0, r7
 3a4:	0000000c 	andeq	r0, r0, ip
 3a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 3b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	000003a4 	andeq	r0, r0, r4, lsr #7
 3bc:	20000754 	andcs	r0, r0, r4, asr r7
 3c0:	00000036 	andeq	r0, r0, r6, lsr r0
 3c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c8:	41018e02 	tstmi	r1, r2, lsl #28
 3cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d0:	00000007 	andeq	r0, r0, r7
 3d4:	00000018 	andeq	r0, r0, r8, lsl r0
 3d8:	000003a4 	andeq	r0, r0, r4, lsr #7
 3dc:	2000078a 	andcs	r0, r0, sl, lsl #15
 3e0:	00000012 	andeq	r0, r0, r2, lsl r0
 3e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3e8:	41018e02 	tstmi	r1, r2, lsl #28
 3ec:	0000070d 	andeq	r0, r0, sp, lsl #14
 3f0:	00000018 	andeq	r0, r0, r8, lsl r0
 3f4:	000003a4 	andeq	r0, r0, r4, lsr #7
 3f8:	2000079c 	mulcs	r0, ip, r7
 3fc:	00000044 	andeq	r0, r0, r4, asr #32
 400:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 404:	41018e02 	tstmi	r1, r2, lsl #28
 408:	0000070d 	andeq	r0, r0, sp, lsl #14
 40c:	0000000c 	andeq	r0, r0, ip
 410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 414:	7c020001 	stcvc	0, cr0, [r2], {1}
 418:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	0000040c 	andeq	r0, r0, ip, lsl #8
 424:	200007e0 	andcs	r0, r0, r0, ror #15
 428:	00000114 	andeq	r0, r0, r4, lsl r1
 42c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 430:	41018e02 	tstmi	r1, r2, lsl #28
 434:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 438:	00000007 	andeq	r0, r0, r7
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	0000040c 	andeq	r0, r0, ip, lsl #8
 444:	200008f4 	strdcs	r0, [r0], -r4
 448:	00000048 	andeq	r0, r0, r8, asr #32
 44c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 450:	41018e02 	tstmi	r1, r2, lsl #28
 454:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 458:	00000007 	andeq	r0, r0, r7
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	0000040c 	andeq	r0, r0, ip, lsl #8
 464:	2000093c 	andcs	r0, r0, ip, lsr r9
 468:	00000136 	andeq	r0, r0, r6, lsr r1
 46c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 470:	86048505 	strhi	r8, [r4], -r5, lsl #10
 474:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 478:	300e4101 	andcc	r4, lr, r1, lsl #2
 47c:	00070d41 	andeq	r0, r7, r1, asr #26
 480:	00000020 	andeq	r0, r0, r0, lsr #32
 484:	0000040c 	andeq	r0, r0, ip, lsl #8
 488:	20000a72 	andcs	r0, r0, r2, ror sl
 48c:	00000080 	andeq	r0, r0, r0, lsl #1
 490:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 494:	86048505 	strhi	r8, [r4], -r5, lsl #10
 498:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 49c:	300e4101 	andcc	r4, lr, r1, lsl #2
 4a0:	00070d41 	andeq	r0, r7, r1, asr #26
 4a4:	0000000c 	andeq	r0, r0, ip
 4a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4ac:	7c020001 	stcvc	0, cr0, [r2], {1}
 4b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b8:	000004a4 	andeq	r0, r0, r4, lsr #9
 4bc:	20000af4 	strdcs	r0, [r0], -r4
 4c0:	00000064 	andeq	r0, r0, r4, rrx
 4c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4c8:	41018e02 	tstmi	r1, r2, lsl #28
 4cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4d0:	00000007 	andeq	r0, r0, r7
 4d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d8:	000004a4 	andeq	r0, r0, r4, lsr #9
 4dc:	20000b58 	andcs	r0, r0, r8, asr fp
 4e0:	00000064 	andeq	r0, r0, r4, rrx
 4e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4e8:	41018e02 	tstmi	r1, r2, lsl #28
 4ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4f0:	00000007 	andeq	r0, r0, r7
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	000004a4 	andeq	r0, r0, r4, lsr #9
 4fc:	20000bbc 			; <UNDEFINED> instruction: 0x20000bbc
 500:	00000044 	andeq	r0, r0, r4, asr #32
 504:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 508:	41018e02 	tstmi	r1, r2, lsl #28
 50c:	0000070d 	andeq	r0, r0, sp, lsl #14
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000004a4 	andeq	r0, r0, r4, lsr #9
 518:	20000c00 	andcs	r0, r0, r0, lsl #24
 51c:	0000007c 	andeq	r0, r0, ip, ror r0
 520:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 524:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 528:	300e4101 	andcc	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	00000020 	andeq	r0, r0, r0, lsr #32
 534:	000004a4 	andeq	r0, r0, r4, lsr #9
 538:	20000c7c 	andcs	r0, r0, ip, ror ip
 53c:	00000048 	andeq	r0, r0, r8, asr #32
 540:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 544:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 548:	41018e02 	tstmi	r1, r2, lsl #28
 54c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 550:	00000007 	andeq	r0, r0, r7
 554:	0000000c 	andeq	r0, r0, ip
 558:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 55c:	7c020001 	stcvc	0, cr0, [r2], {1}
 560:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 564:	00000018 	andeq	r0, r0, r8, lsl r0
 568:	00000554 	andeq	r0, r0, r4, asr r5
 56c:	20000cc4 	andcs	r0, r0, r4, asr #25
 570:	00000098 	muleq	r0, r8, r0
 574:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 578:	41018e02 	tstmi	r1, r2, lsl #28
 57c:	0000070d 	andeq	r0, r0, sp, lsl #14
 580:	00000020 	andeq	r0, r0, r0, lsr #32
 584:	00000554 	andeq	r0, r0, r4, asr r5
 588:	20000d5c 	andcs	r0, r0, ip, asr sp
 58c:	00000062 	andeq	r0, r0, r2, rrx
 590:	41100e41 	tstmi	r0, r1, asr #28
 594:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 598:	06870785 	streq	r0, [r7], r5, lsl #15
 59c:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 5a0:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	00000554 	andeq	r0, r0, r4, asr r5
 5ac:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 5b0:	000000d2 	ldrdeq	r0, [r0], -r2
 5b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5b8:	41018e02 	tstmi	r1, r2, lsl #28
 5bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5c0:	00000007 	andeq	r0, r0, r7
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	00000554 	andeq	r0, r0, r4, asr r5
 5cc:	20000e90 	mulcs	r0, r0, lr
 5d0:	00000088 	andeq	r0, r0, r8, lsl #1
 5d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5d8:	41018e02 	tstmi	r1, r2, lsl #28
 5dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5e0:	00000007 	andeq	r0, r0, r7
 5e4:	00000018 	andeq	r0, r0, r8, lsl r0
 5e8:	00000554 	andeq	r0, r0, r4, asr r5
 5ec:	20000f18 	andcs	r0, r0, r8, lsl pc
 5f0:	0000003c 	andeq	r0, r0, ip, lsr r0
 5f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5f8:	41018e02 	tstmi	r1, r2, lsl #28
 5fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 600:	00000024 	andeq	r0, r0, r4, lsr #32
 604:	00000554 	andeq	r0, r0, r4, asr r5
 608:	20000f54 	andcs	r0, r0, r4, asr pc
 60c:	000002c0 	andeq	r0, r0, r0, asr #5
 610:	41100e41 	tstmi	r0, r1, asr #28
 614:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 618:	06870785 	streq	r0, [r7], r5, lsl #15
 61c:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 620:	0c410180 	stfeqe	f0, [r1], {128}	; 0x80
 624:	00004807 	andeq	r4, r0, r7, lsl #16
 628:	00000020 	andeq	r0, r0, r0, lsr #32
 62c:	00000554 	andeq	r0, r0, r4, asr r5
 630:	20001214 	andcs	r1, r0, r4, lsl r2
 634:	00000082 	andeq	r0, r0, r2, lsl #1
 638:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 63c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 640:	41018e02 	tstmi	r1, r2, lsl #28
 644:	4101b80e 	tstmi	r1, lr, lsl #16
 648:	0180070c 	orreq	r0, r0, ip, lsl #14
 64c:	0000000c 	andeq	r0, r0, ip
 650:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 654:	7c020001 	stcvc	0, cr0, [r2], {1}
 658:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 65c:	0000001c 	andeq	r0, r0, ip, lsl r0
 660:	0000064c 	andeq	r0, r0, ip, asr #12
 664:	20001298 	mulcs	r0, r8, r2
 668:	0000001e 	andeq	r0, r0, lr, lsl r0
 66c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 670:	41018e02 	tstmi	r1, r2, lsl #28
 674:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 678:	00000007 	andeq	r0, r0, r7
 67c:	0000000c 	andeq	r0, r0, ip
 680:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 684:	7c020001 	stcvc	0, cr0, [r2], {1}
 688:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 68c:	0000000c 	andeq	r0, r0, ip
 690:	0000067c 	andeq	r0, r0, ip, ror r6
 694:	20000000 	andcs	r0, r0, r0
 698:	0000000c 	andeq	r0, r0, ip
 69c:	0000000c 	andeq	r0, r0, ip
 6a0:	0000067c 	andeq	r0, r0, ip, ror r6
 6a4:	200012b6 			; <UNDEFINED> instruction: 0x200012b6
 6a8:	00000006 	andeq	r0, r0, r6
 6ac:	0000000c 	andeq	r0, r0, ip
 6b0:	0000067c 	andeq	r0, r0, ip, ror r6
 6b4:	200012bc 			; <UNDEFINED> instruction: 0x200012bc
 6b8:	00000006 	andeq	r0, r0, r6
 6bc:	0000000c 	andeq	r0, r0, ip
 6c0:	0000067c 	andeq	r0, r0, ip, ror r6
 6c4:	200012c2 	andcs	r1, r0, r2, asr #5
 6c8:	00000006 	andeq	r0, r0, r6
 6cc:	0000000c 	andeq	r0, r0, ip
 6d0:	0000067c 	andeq	r0, r0, ip, ror r6
 6d4:	200012c8 	andcs	r1, r0, r8, asr #5
 6d8:	00000006 	andeq	r0, r0, r6
 6dc:	0000000c 	andeq	r0, r0, ip
 6e0:	0000067c 	andeq	r0, r0, ip, ror r6
 6e4:	200012ce 	andcs	r1, r0, lr, asr #5
 6e8:	00000006 	andeq	r0, r0, r6
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	0000067c 	andeq	r0, r0, ip, ror r6
 6f4:	200012d4 	ldrdcs	r1, [r0], -r4
 6f8:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200012b6 			; <UNDEFINED> instruction: 0x200012b6
   4:	200012da 	ldrdcs	r1, [r0], -sl
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
