
debug/MOP:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

#include "startup.h"

__attribute__((naked)) __attribute__((section(".start_section"))) void
startup(void) {
	__asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
	__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
	__asm__ volatile(" BL main\n");   /* call main */
20000004:	f001 f8ba 	bl	2000117c <main>
	__asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_ctrl_bit_set>:
#include "ascii.h"
#include "startup.h"
#include "delay.h"

void ascii_ctrl_bit_set(char x){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
        char c;
        c = *GPIO_E_ODR_LOW;
2000001c:	4a09      	ldr	r2, [pc, #36]	; (20000044 <ascii_ctrl_bit_set+0x34>)
2000001e:	210f      	movs	r1, #15
20000020:	187b      	adds	r3, r7, r1
20000022:	7812      	ldrb	r2, [r2, #0]
20000024:	701a      	strb	r2, [r3, #0]
        *GPIO_E_ODR_LOW = B_SELECT | x | c;
20000026:	1dfa      	adds	r2, r7, #7
20000028:	187b      	adds	r3, r7, r1
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	781b      	ldrb	r3, [r3, #0]
2000002e:	4313      	orrs	r3, r2
20000030:	b2db      	uxtb	r3, r3
20000032:	4a04      	ldr	r2, [pc, #16]	; (20000044 <ascii_ctrl_bit_set+0x34>)
20000034:	2104      	movs	r1, #4
20000036:	430b      	orrs	r3, r1
20000038:	b2db      	uxtb	r3, r3
2000003a:	7013      	strb	r3, [r2, #0]
}
2000003c:	46c0      	nop			; (mov r8, r8)
2000003e:	46bd      	mov	sp, r7
20000040:	b004      	add	sp, #16
20000042:	bd80      	pop	{r7, pc}
20000044:	40021014 	andmi	r1, r2, r4, lsl r0

20000048 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(char x){
20000048:	b580      	push	{r7, lr}
2000004a:	b084      	sub	sp, #16
2000004c:	af00      	add	r7, sp, #0
2000004e:	0002      	movs	r2, r0
20000050:	1dfb      	adds	r3, r7, #7
20000052:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
20000054:	4a0d      	ldr	r2, [pc, #52]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000056:	210f      	movs	r1, #15
20000058:	187b      	adds	r3, r7, r1
2000005a:	7812      	ldrb	r2, [r2, #0]
2000005c:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
2000005e:	1dfb      	adds	r3, r7, #7
20000060:	781b      	ldrb	r3, [r3, #0]
20000062:	b25b      	sxtb	r3, r3
20000064:	43db      	mvns	r3, r3
20000066:	b25b      	sxtb	r3, r3
20000068:	187a      	adds	r2, r7, r1
2000006a:	7812      	ldrb	r2, [r2, #0]
2000006c:	b252      	sxtb	r2, r2
2000006e:	4013      	ands	r3, r2
20000070:	b25a      	sxtb	r2, r3
20000072:	187b      	adds	r3, r7, r1
20000074:	701a      	strb	r2, [r3, #0]
	*GPIO_E_ODR_LOW = B_SELECT | c;
20000076:	4a05      	ldr	r2, [pc, #20]	; (2000008c <ascii_ctrl_bit_clear+0x44>)
20000078:	187b      	adds	r3, r7, r1
2000007a:	781b      	ldrb	r3, [r3, #0]
2000007c:	2104      	movs	r1, #4
2000007e:	430b      	orrs	r3, r1
20000080:	b2db      	uxtb	r3, r3
20000082:	7013      	strb	r3, [r2, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	b004      	add	sp, #16
2000008a:	bd80      	pop	{r7, pc}
2000008c:	40021014 	andmi	r1, r2, r4, lsl r0

20000090 <ascii_read_controller>:


char  ascii_read_controller(){
20000090:	b580      	push	{r7, lr}
20000092:	b082      	sub	sp, #8
20000094:	af00      	add	r7, sp, #0
        
        char c;
        ascii_ctrl_bit_set(B_E);
20000096:	2040      	movs	r0, #64	; 0x40
20000098:	f7ff ffba 	bl	20000010 <ascii_ctrl_bit_set>

        delay_250ns();
2000009c:	f000 fb59 	bl	20000752 <delay_250ns>
        delay_250ns();
200000a0:	f000 fb57 	bl	20000752 <delay_250ns>


        c = *GPIO_E_IDR_HIGH;
200000a4:	4a06      	ldr	r2, [pc, #24]	; (200000c0 <ascii_read_controller+0x30>)
200000a6:	1dfb      	adds	r3, r7, #7
200000a8:	7812      	ldrb	r2, [r2, #0]
200000aa:	701a      	strb	r2, [r3, #0]

        ascii_ctrl_bit_clear(B_E);
200000ac:	2040      	movs	r0, #64	; 0x40
200000ae:	f7ff ffcb 	bl	20000048 <ascii_ctrl_bit_clear>
        
        return c;
200000b2:	1dfb      	adds	r3, r7, #7
200000b4:	781b      	ldrb	r3, [r3, #0]
    }
200000b6:	0018      	movs	r0, r3
200000b8:	46bd      	mov	sp, r7
200000ba:	b002      	add	sp, #8
200000bc:	bd80      	pop	{r7, pc}
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	40021011 	andmi	r1, r2, r1, lsl r0

200000c4 <ascii_read_status>:
char  ascii_read_status(){
200000c4:	b590      	push	{r4, r7, lr}
200000c6:	b083      	sub	sp, #12
200000c8:	af00      	add	r7, sp, #0
	*GPIO_E_MODER = 0x00005555;
200000ca:	4b0b      	ldr	r3, [pc, #44]	; (200000f8 <ascii_read_status+0x34>)
200000cc:	4a0b      	ldr	r2, [pc, #44]	; (200000fc <ascii_read_status+0x38>)
200000ce:	601a      	str	r2, [r3, #0]
        char c;

        // vilket kommando vil vi göra
      
        ascii_ctrl_bit_clear(B_RS);
200000d0:	2001      	movs	r0, #1
200000d2:	f7ff ffb9 	bl	20000048 <ascii_ctrl_bit_clear>
		  ascii_ctrl_bit_set(B_RW);
200000d6:	2002      	movs	r0, #2
200000d8:	f7ff ff9a 	bl	20000010 <ascii_ctrl_bit_set>
        // kicka ingång det hela
        c = ascii_read_controller();
200000dc:	1dfc      	adds	r4, r7, #7
200000de:	f7ff ffd7 	bl	20000090 <ascii_read_controller>
200000e2:	0003      	movs	r3, r0
200000e4:	7023      	strb	r3, [r4, #0]
		*GPIO_E_MODER = 0x55555555;
200000e6:	4b04      	ldr	r3, [pc, #16]	; (200000f8 <ascii_read_status+0x34>)
200000e8:	4a05      	ldr	r2, [pc, #20]	; (20000100 <ascii_read_status+0x3c>)
200000ea:	601a      	str	r2, [r3, #0]
        return c;
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	781b      	ldrb	r3, [r3, #0]
    }
200000f0:	0018      	movs	r0, r3
200000f2:	46bd      	mov	sp, r7
200000f4:	b003      	add	sp, #12
200000f6:	bd90      	pop	{r4, r7, pc}
200000f8:	40021000 	andmi	r1, r2, r0
200000fc:	00005555 	andeq	r5, r0, r5, asr r5
20000100:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000104 <ascii_read_data>:

char ascii_read_data(){
20000104:	b590      	push	{r4, r7, lr}
20000106:	b083      	sub	sp, #12
20000108:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = *GPIO_E_MODER & 0x00005555;
2000010a:	4b0e      	ldr	r3, [pc, #56]	; (20000144 <ascii_read_data+0x40>)
2000010c:	681a      	ldr	r2, [r3, #0]
2000010e:	4b0d      	ldr	r3, [pc, #52]	; (20000144 <ascii_read_data+0x40>)
20000110:	490d      	ldr	r1, [pc, #52]	; (20000148 <ascii_read_data+0x44>)
20000112:	400a      	ands	r2, r1
20000114:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000116:	2002      	movs	r0, #2
20000118:	f7ff ff7a 	bl	20000010 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RS);
2000011c:	2001      	movs	r0, #1
2000011e:	f7ff ff77 	bl	20000010 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
20000122:	1dfc      	adds	r4, r7, #7
20000124:	f7ff ffb4 	bl	20000090 <ascii_read_controller>
20000128:	0003      	movs	r3, r0
2000012a:	7023      	strb	r3, [r4, #0]
	*GPIO_E_MODER = *GPIO_E_MODER & 0x55555555;
2000012c:	4b05      	ldr	r3, [pc, #20]	; (20000144 <ascii_read_data+0x40>)
2000012e:	681a      	ldr	r2, [r3, #0]
20000130:	4b04      	ldr	r3, [pc, #16]	; (20000144 <ascii_read_data+0x40>)
20000132:	4906      	ldr	r1, [pc, #24]	; (2000014c <ascii_read_data+0x48>)
20000134:	400a      	ands	r2, r1
20000136:	601a      	str	r2, [r3, #0]
	return c;
20000138:	1dfb      	adds	r3, r7, #7
2000013a:	781b      	ldrb	r3, [r3, #0]

}
2000013c:	0018      	movs	r0, r3
2000013e:	46bd      	mov	sp, r7
20000140:	b003      	add	sp, #12
20000142:	bd90      	pop	{r4, r7, pc}
20000144:	40021000 	andmi	r1, r2, r0
20000148:	00005555 	andeq	r5, r0, r5, asr r5
2000014c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000150 <ascii_write_controller>:
    void ascii_write_controller(char command){
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
        char c;
        ascii_ctrl_bit_set(B_E);
2000015c:	2040      	movs	r0, #64	; 0x40
2000015e:	f7ff ff57 	bl	20000010 <ascii_ctrl_bit_set>
        *GPIO_E_ODR_HIGH = command;
20000162:	4a07      	ldr	r2, [pc, #28]	; (20000180 <ascii_write_controller+0x30>)
20000164:	1dfb      	adds	r3, r7, #7
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	7013      	strb	r3, [r2, #0]
        delay_250ns();
2000016a:	f000 faf2 	bl	20000752 <delay_250ns>
        ascii_ctrl_bit_clear(B_E);
2000016e:	2040      	movs	r0, #64	; 0x40
20000170:	f7ff ff6a 	bl	20000048 <ascii_ctrl_bit_clear>
        delay_250ns();
20000174:	f000 faed 	bl	20000752 <delay_250ns>
        
        
    }
20000178:	46c0      	nop			; (mov r8, r8)
2000017a:	46bd      	mov	sp, r7
2000017c:	b002      	add	sp, #8
2000017e:	bd80      	pop	{r7, pc}
20000180:	40021015 	andmi	r1, r2, r5, lsl r0

20000184 <ascii_write_cmd>:
void ascii_write_cmd(char command){
20000184:	b580      	push	{r7, lr}
20000186:	b082      	sub	sp, #8
20000188:	af00      	add	r7, sp, #0
2000018a:	0002      	movs	r2, r0
2000018c:	1dfb      	adds	r3, r7, #7
2000018e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RW);
20000190:	2002      	movs	r0, #2
20000192:	f7ff ff59 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RS);
20000196:	2001      	movs	r0, #1
20000198:	f7ff ff56 	bl	20000048 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	781b      	ldrb	r3, [r3, #0]
200001a0:	0018      	movs	r0, r3
200001a2:	f7ff ffd5 	bl	20000150 <ascii_write_controller>
}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	46bd      	mov	sp, r7
200001aa:	b002      	add	sp, #8
200001ac:	bd80      	pop	{r7, pc}

200001ae <ascii_write_data>:
void ascii_write_data(char command){
200001ae:	b580      	push	{r7, lr}
200001b0:	b082      	sub	sp, #8
200001b2:	af00      	add	r7, sp, #0
200001b4:	0002      	movs	r2, r0
200001b6:	1dfb      	adds	r3, r7, #7
200001b8:	701a      	strb	r2, [r3, #0]
		ascii_ctrl_bit_set(B_RS);
200001ba:	2001      	movs	r0, #1
200001bc:	f7ff ff28 	bl	20000010 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200001c0:	2002      	movs	r0, #2
200001c2:	f7ff ff41 	bl	20000048 <ascii_ctrl_bit_clear>

	ascii_write_controller(command);
200001c6:	1dfb      	adds	r3, r7, #7
200001c8:	781b      	ldrb	r3, [r3, #0]
200001ca:	0018      	movs	r0, r3
200001cc:	f7ff ffc0 	bl	20000150 <ascii_write_controller>
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	b002      	add	sp, #8
200001d6:	bd80      	pop	{r7, pc}

200001d8 <ascii_command>:

void ascii_command(char command){
200001d8:	b580      	push	{r7, lr}
200001da:	b082      	sub	sp, #8
200001dc:	af00      	add	r7, sp, #0
200001de:	0002      	movs	r2, r0
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	f7ff ff6d 	bl	200000c4 <ascii_read_status>
200001ea:	0003      	movs	r3, r0
200001ec:	001a      	movs	r2, r3
200001ee:	2380      	movs	r3, #128	; 0x80
200001f0:	4013      	ands	r3, r2
200001f2:	2b80      	cmp	r3, #128	; 0x80
200001f4:	d0f7      	beq.n	200001e6 <ascii_command+0xe>
	}
	ascii_write_cmd(command);
200001f6:	1dfb      	adds	r3, r7, #7
200001f8:	781b      	ldrb	r3, [r3, #0]
200001fa:	0018      	movs	r0, r3
200001fc:	f7ff ffc2 	bl	20000184 <ascii_write_cmd>
	delay_mili(2);
20000200:	2002      	movs	r0, #2
20000202:	f000 fa8b 	bl	2000071c <delay_mili>
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}

2000020e <ascii_write_char>:

void ascii_write_char(char command){
2000020e:	b580      	push	{r7, lr}
20000210:	b082      	sub	sp, #8
20000212:	af00      	add	r7, sp, #0
20000214:	0002      	movs	r2, r0
20000216:	1dfb      	adds	r3, r7, #7
20000218:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	f7ff ff52 	bl	200000c4 <ascii_read_status>
20000220:	0003      	movs	r3, r0
20000222:	001a      	movs	r2, r3
20000224:	2380      	movs	r3, #128	; 0x80
20000226:	4013      	ands	r3, r2
20000228:	2b80      	cmp	r3, #128	; 0x80
2000022a:	d0f7      	beq.n	2000021c <ascii_write_char+0xe>
	}
	ascii_write_data(command);
2000022c:	1dfb      	adds	r3, r7, #7
2000022e:	781b      	ldrb	r3, [r3, #0]
20000230:	0018      	movs	r0, r3
20000232:	f7ff ffbc 	bl	200001ae <ascii_write_data>
	delay_mili(2);
20000236:	2002      	movs	r0, #2
20000238:	f000 fa70 	bl	2000071c <delay_mili>
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	b002      	add	sp, #8
20000242:	bd80      	pop	{r7, pc}

20000244 <ascii_init>:

void ascii_init(){
20000244:	b580      	push	{r7, lr}
20000246:	af00      	add	r7, sp, #0
	// functions set
	ascii_command(0x38);
20000248:	2038      	movs	r0, #56	; 0x38
2000024a:	f7ff ffc5 	bl	200001d8 <ascii_command>
	//display init blinking cursor
	ascii_command(0xC);
2000024e:	200c      	movs	r0, #12
20000250:	f7ff ffc2 	bl	200001d8 <ascii_command>
	//clear display
	ascii_command(1);
20000254:	2001      	movs	r0, #1
20000256:	f7ff ffbf 	bl	200001d8 <ascii_command>
	// entry mode left, no increment
	ascii_command(0x6);
2000025a:	2006      	movs	r0, #6
2000025c:	f7ff ffbc 	bl	200001d8 <ascii_command>
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	bd80      	pop	{r7, pc}

20000266 <ascii_clear_screen>:

void ascii_clear_screen(){
20000266:	b580      	push	{r7, lr}
20000268:	af00      	add	r7, sp, #0
    ascii_command(1);
2000026a:	2001      	movs	r0, #1
2000026c:	f7ff ffb4 	bl	200001d8 <ascii_command>
}
20000270:	46c0      	nop			; (mov r8, r8)
20000272:	46bd      	mov	sp, r7
20000274:	bd80      	pop	{r7, pc}

20000276 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y ){
20000276:	b580      	push	{r7, lr}
20000278:	b084      	sub	sp, #16
2000027a:	af00      	add	r7, sp, #0
2000027c:	6078      	str	r0, [r7, #4]
2000027e:	6039      	str	r1, [r7, #0]
	int adress = x-1;
20000280:	687b      	ldr	r3, [r7, #4]
20000282:	3b01      	subs	r3, #1
20000284:	60fb      	str	r3, [r7, #12]
	if(y == 2){
20000286:	683b      	ldr	r3, [r7, #0]
20000288:	2b02      	cmp	r3, #2
2000028a:	d102      	bne.n	20000292 <ascii_gotoxy+0x1c>
		adress = adress + 0x40;
2000028c:	68fb      	ldr	r3, [r7, #12]
2000028e:	3340      	adds	r3, #64	; 0x40
20000290:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80 | adress);
20000292:	68fb      	ldr	r3, [r7, #12]
20000294:	b25b      	sxtb	r3, r3
20000296:	2280      	movs	r2, #128	; 0x80
20000298:	4252      	negs	r2, r2
2000029a:	4313      	orrs	r3, r2
2000029c:	b25b      	sxtb	r3, r3
2000029e:	b2db      	uxtb	r3, r3
200002a0:	0018      	movs	r0, r3
200002a2:	f7ff ff6f 	bl	20000184 <ascii_write_cmd>

}
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	46bd      	mov	sp, r7
200002aa:	b004      	add	sp, #16
200002ac:	bd80      	pop	{r7, pc}

200002ae <ascii_write_text_at>:

void ascii_write_text_at(char num, int x, int y){
200002ae:	b590      	push	{r4, r7, lr}
200002b0:	b089      	sub	sp, #36	; 0x24
200002b2:	af00      	add	r7, sp, #0
200002b4:	60b9      	str	r1, [r7, #8]
200002b6:	607a      	str	r2, [r7, #4]
200002b8:	240f      	movs	r4, #15
200002ba:	193b      	adds	r3, r7, r4
200002bc:	1c02      	adds	r2, r0, #0
200002be:	701a      	strb	r2, [r3, #0]
	
	int moder_save = *GPIO_E_MODER;
200002c0:	4b16      	ldr	r3, [pc, #88]	; (2000031c <ascii_write_text_at+0x6e>)
200002c2:	681b      	ldr	r3, [r3, #0]
200002c4:	61fb      	str	r3, [r7, #28]
	int otyper_save = *GPIO_E_OTYPER;
200002c6:	4b16      	ldr	r3, [pc, #88]	; (20000320 <ascii_write_text_at+0x72>)
200002c8:	881b      	ldrh	r3, [r3, #0]
200002ca:	b29b      	uxth	r3, r3
200002cc:	61bb      	str	r3, [r7, #24]
	int ospeedr_save = *GPIO_E_OSPEEDR;
200002ce:	4b15      	ldr	r3, [pc, #84]	; (20000324 <ascii_write_text_at+0x76>)
200002d0:	681b      	ldr	r3, [r3, #0]
200002d2:	617b      	str	r3, [r7, #20]
	*GPIO_E_MODER = 0x55555555;
200002d4:	4b11      	ldr	r3, [pc, #68]	; (2000031c <ascii_write_text_at+0x6e>)
200002d6:	4a14      	ldr	r2, [pc, #80]	; (20000328 <ascii_write_text_at+0x7a>)
200002d8:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
200002da:	4b11      	ldr	r3, [pc, #68]	; (20000320 <ascii_write_text_at+0x72>)
200002dc:	2200      	movs	r2, #0
200002de:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
200002e0:	4b10      	ldr	r3, [pc, #64]	; (20000324 <ascii_write_text_at+0x76>)
200002e2:	2201      	movs	r2, #1
200002e4:	4252      	negs	r2, r2
200002e6:	601a      	str	r2, [r3, #0]
	ascii_gotoxy(x,y);
200002e8:	687a      	ldr	r2, [r7, #4]
200002ea:	68bb      	ldr	r3, [r7, #8]
200002ec:	0011      	movs	r1, r2
200002ee:	0018      	movs	r0, r3
200002f0:	f7ff ffc1 	bl	20000276 <ascii_gotoxy>
	ascii_write_char(num);
200002f4:	193b      	adds	r3, r7, r4
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	0018      	movs	r0, r3
200002fa:	f7ff ff88 	bl	2000020e <ascii_write_char>

	*GPIO_E_MODER = moder_save;
200002fe:	4b07      	ldr	r3, [pc, #28]	; (2000031c <ascii_write_text_at+0x6e>)
20000300:	69fa      	ldr	r2, [r7, #28]
20000302:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = otyper_save;
20000304:	4b06      	ldr	r3, [pc, #24]	; (20000320 <ascii_write_text_at+0x72>)
20000306:	69ba      	ldr	r2, [r7, #24]
20000308:	b292      	uxth	r2, r2
2000030a:	801a      	strh	r2, [r3, #0]
	*GPIO_E_OSPEEDR = ospeedr_save;
2000030c:	4b05      	ldr	r3, [pc, #20]	; (20000324 <ascii_write_text_at+0x76>)
2000030e:	697a      	ldr	r2, [r7, #20]
20000310:	601a      	str	r2, [r3, #0]
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b009      	add	sp, #36	; 0x24
20000318:	bd90      	pop	{r4, r7, pc}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	40021000 	andmi	r1, r2, r0
20000320:	40021004 	andmi	r1, r2, r4
20000324:	40021008 	andmi	r1, r2, r8
20000328:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000032c <draw_ballobject>:
    {4,7},{4,6},{4,5},{4,4},{4,3},{4,2},{4,1},
    {2,3},{2,4},{2,5}}
};


void draw_ballobject(OBJECT* object){
2000032c:	b580      	push	{r7, lr}
2000032e:	b084      	sub	sp, #16
20000330:	af00      	add	r7, sp, #0
20000332:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < object->geo->numpoints; i++){
20000334:	2300      	movs	r3, #0
20000336:	60fb      	str	r3, [r7, #12]
20000338:	e01d      	b.n	20000376 <draw_ballobject+0x4a>
        graphic_pixel_set(object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy);
2000033a:	687b      	ldr	r3, [r7, #4]
2000033c:	681a      	ldr	r2, [r3, #0]
2000033e:	68fb      	ldr	r3, [r7, #12]
20000340:	3304      	adds	r3, #4
20000342:	005b      	lsls	r3, r3, #1
20000344:	18d3      	adds	r3, r2, r3
20000346:	3304      	adds	r3, #4
20000348:	781b      	ldrb	r3, [r3, #0]
2000034a:	001a      	movs	r2, r3
2000034c:	687b      	ldr	r3, [r7, #4]
2000034e:	68db      	ldr	r3, [r3, #12]
20000350:	18d0      	adds	r0, r2, r3
20000352:	687b      	ldr	r3, [r7, #4]
20000354:	681a      	ldr	r2, [r3, #0]
20000356:	68fb      	ldr	r3, [r7, #12]
20000358:	3304      	adds	r3, #4
2000035a:	005b      	lsls	r3, r3, #1
2000035c:	18d3      	adds	r3, r2, r3
2000035e:	3305      	adds	r3, #5
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	001a      	movs	r2, r3
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	691b      	ldr	r3, [r3, #16]
20000368:	18d3      	adds	r3, r2, r3
2000036a:	0019      	movs	r1, r3
2000036c:	f000 ff5b 	bl	20001226 <graphic_pixel_set>
    for(int i = 0; i < object->geo->numpoints; i++){
20000370:	68fb      	ldr	r3, [r7, #12]
20000372:	3301      	adds	r3, #1
20000374:	60fb      	str	r3, [r7, #12]
20000376:	687b      	ldr	r3, [r7, #4]
20000378:	681b      	ldr	r3, [r3, #0]
2000037a:	681b      	ldr	r3, [r3, #0]
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	429a      	cmp	r2, r3
20000380:	dbdb      	blt.n	2000033a <draw_ballobject+0xe>
    }
}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	46c0      	nop			; (mov r8, r8)
20000386:	46bd      	mov	sp, r7
20000388:	b004      	add	sp, #16
2000038a:	bd80      	pop	{r7, pc}

2000038c <clear_ballobject>:

void clear_ballobject(OBJECT* object){
2000038c:	b580      	push	{r7, lr}
2000038e:	b084      	sub	sp, #16
20000390:	af00      	add	r7, sp, #0
20000392:	6078      	str	r0, [r7, #4]
      for(int i = 0; i < object->geo->numpoints; i++){
20000394:	2300      	movs	r3, #0
20000396:	60fb      	str	r3, [r7, #12]
20000398:	e01d      	b.n	200003d6 <clear_ballobject+0x4a>
        graphic_pixel_clear(object->geo->px[i].x+object->posx, object->geo->px[i].y+object->posy);
2000039a:	687b      	ldr	r3, [r7, #4]
2000039c:	681a      	ldr	r2, [r3, #0]
2000039e:	68fb      	ldr	r3, [r7, #12]
200003a0:	3304      	adds	r3, #4
200003a2:	005b      	lsls	r3, r3, #1
200003a4:	18d3      	adds	r3, r2, r3
200003a6:	3304      	adds	r3, #4
200003a8:	781b      	ldrb	r3, [r3, #0]
200003aa:	001a      	movs	r2, r3
200003ac:	687b      	ldr	r3, [r7, #4]
200003ae:	68db      	ldr	r3, [r3, #12]
200003b0:	18d0      	adds	r0, r2, r3
200003b2:	687b      	ldr	r3, [r7, #4]
200003b4:	681a      	ldr	r2, [r3, #0]
200003b6:	68fb      	ldr	r3, [r7, #12]
200003b8:	3304      	adds	r3, #4
200003ba:	005b      	lsls	r3, r3, #1
200003bc:	18d3      	adds	r3, r2, r3
200003be:	3305      	adds	r3, #5
200003c0:	781b      	ldrb	r3, [r3, #0]
200003c2:	001a      	movs	r2, r3
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	691b      	ldr	r3, [r3, #16]
200003c8:	18d3      	adds	r3, r2, r3
200003ca:	0019      	movs	r1, r3
200003cc:	f000 ff2e 	bl	2000122c <graphic_pixel_clear>
      for(int i = 0; i < object->geo->numpoints; i++){
200003d0:	68fb      	ldr	r3, [r7, #12]
200003d2:	3301      	adds	r3, #1
200003d4:	60fb      	str	r3, [r7, #12]
200003d6:	687b      	ldr	r3, [r7, #4]
200003d8:	681b      	ldr	r3, [r3, #0]
200003da:	681b      	ldr	r3, [r3, #0]
200003dc:	68fa      	ldr	r2, [r7, #12]
200003de:	429a      	cmp	r2, r3
200003e0:	dbdb      	blt.n	2000039a <clear_ballobject+0xe>
    }
}
200003e2:	46c0      	nop			; (mov r8, r8)
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b004      	add	sp, #16
200003ea:	bd80      	pop	{r7, pc}

200003ec <move_ballobject>:
void move_ballobject(OBJECT* object){
200003ec:	b580      	push	{r7, lr}
200003ee:	b082      	sub	sp, #8
200003f0:	af00      	add	r7, sp, #0
200003f2:	6078      	str	r0, [r7, #4]
    clear_ballobject(object);
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	0018      	movs	r0, r3
200003f8:	f7ff ffc8 	bl	2000038c <clear_ballobject>
    object->posx+= object->dirx;
200003fc:	687b      	ldr	r3, [r7, #4]
200003fe:	68da      	ldr	r2, [r3, #12]
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	685b      	ldr	r3, [r3, #4]
20000404:	18d2      	adds	r2, r2, r3
20000406:	687b      	ldr	r3, [r7, #4]
20000408:	60da      	str	r2, [r3, #12]
    object->posy+= object->diry;
2000040a:	687b      	ldr	r3, [r7, #4]
2000040c:	691a      	ldr	r2, [r3, #16]
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	689b      	ldr	r3, [r3, #8]
20000412:	18d2      	adds	r2, r2, r3
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	611a      	str	r2, [r3, #16]

    if(object->posx >127){
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	68db      	ldr	r3, [r3, #12]
2000041c:	2b7f      	cmp	r3, #127	; 0x7f
2000041e:	dd04      	ble.n	2000042a <move_ballobject+0x3e>
        object->dirx = -object->dirx;
20000420:	687b      	ldr	r3, [r7, #4]
20000422:	685b      	ldr	r3, [r3, #4]
20000424:	425a      	negs	r2, r3
20000426:	687b      	ldr	r3, [r7, #4]
20000428:	605a      	str	r2, [r3, #4]
    }
    if(object->posx <1){
2000042a:	687b      	ldr	r3, [r7, #4]
2000042c:	68db      	ldr	r3, [r3, #12]
2000042e:	2b00      	cmp	r3, #0
20000430:	dc04      	bgt.n	2000043c <move_ballobject+0x50>
        object->dirx = -object->dirx;
20000432:	687b      	ldr	r3, [r7, #4]
20000434:	685b      	ldr	r3, [r3, #4]
20000436:	425a      	negs	r2, r3
20000438:	687b      	ldr	r3, [r7, #4]
2000043a:	605a      	str	r2, [r3, #4]
    }
    if(object->posy >64){
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	691b      	ldr	r3, [r3, #16]
20000440:	2b40      	cmp	r3, #64	; 0x40
20000442:	dd04      	ble.n	2000044e <move_ballobject+0x62>
        object->diry = -object->diry;
20000444:	687b      	ldr	r3, [r7, #4]
20000446:	689b      	ldr	r3, [r3, #8]
20000448:	425a      	negs	r2, r3
2000044a:	687b      	ldr	r3, [r7, #4]
2000044c:	609a      	str	r2, [r3, #8]
    }
    if(object->posy <1){
2000044e:	687b      	ldr	r3, [r7, #4]
20000450:	691b      	ldr	r3, [r3, #16]
20000452:	2b00      	cmp	r3, #0
20000454:	dc04      	bgt.n	20000460 <move_ballobject+0x74>
        object->diry = -object->diry;
20000456:	687b      	ldr	r3, [r7, #4]
20000458:	689b      	ldr	r3, [r3, #8]
2000045a:	425a      	negs	r2, r3
2000045c:	687b      	ldr	r3, [r7, #4]
2000045e:	609a      	str	r2, [r3, #8]
    }
    draw_ballobject(object);
20000460:	687b      	ldr	r3, [r7, #4]
20000462:	0018      	movs	r0, r3
20000464:	f7ff ff62 	bl	2000032c <draw_ballobject>
}
20000468:	46c0      	nop			; (mov r8, r8)
2000046a:	46bd      	mov	sp, r7
2000046c:	b002      	add	sp, #8
2000046e:	bd80      	pop	{r7, pc}

20000470 <move_paddleobject>:

void move_paddleobject(OBJECT* object){
20000470:	b580      	push	{r7, lr}
20000472:	b082      	sub	sp, #8
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
    clear_ballobject(object);
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ff86 	bl	2000038c <clear_ballobject>
    object->posy+= object->diry;
20000480:	687b      	ldr	r3, [r7, #4]
20000482:	691a      	ldr	r2, [r3, #16]
20000484:	687b      	ldr	r3, [r7, #4]
20000486:	689b      	ldr	r3, [r3, #8]
20000488:	18d2      	adds	r2, r2, r3
2000048a:	687b      	ldr	r3, [r7, #4]
2000048c:	611a      	str	r2, [r3, #16]

    if(object->posy >64){
2000048e:	687b      	ldr	r3, [r7, #4]
20000490:	691b      	ldr	r3, [r3, #16]
20000492:	2b40      	cmp	r3, #64	; 0x40
20000494:	dd05      	ble.n	200004a2 <move_paddleobject+0x32>
        object->diry = 0;
20000496:	687b      	ldr	r3, [r7, #4]
20000498:	2200      	movs	r2, #0
2000049a:	609a      	str	r2, [r3, #8]
        object->posy = 60;
2000049c:	687b      	ldr	r3, [r7, #4]
2000049e:	223c      	movs	r2, #60	; 0x3c
200004a0:	611a      	str	r2, [r3, #16]
    }
    if(object->posy <1){
200004a2:	687b      	ldr	r3, [r7, #4]
200004a4:	691b      	ldr	r3, [r3, #16]
200004a6:	2b00      	cmp	r3, #0
200004a8:	dc05      	bgt.n	200004b6 <move_paddleobject+0x46>
        object->diry = 0;
200004aa:	687b      	ldr	r3, [r7, #4]
200004ac:	2200      	movs	r2, #0
200004ae:	609a      	str	r2, [r3, #8]
        object->posy = 4;
200004b0:	687b      	ldr	r3, [r7, #4]
200004b2:	2204      	movs	r2, #4
200004b4:	611a      	str	r2, [r3, #16]
    }
    draw_ballobject(object);
200004b6:	687b      	ldr	r3, [r7, #4]
200004b8:	0018      	movs	r0, r3
200004ba:	f7ff ff37 	bl	2000032c <draw_ballobject>
}
200004be:	46c0      	nop			; (mov r8, r8)
200004c0:	46bd      	mov	sp, r7
200004c2:	b002      	add	sp, #8
200004c4:	bd80      	pop	{r7, pc}

200004c6 <set_ballobject_speed>:


void set_ballobject_speed(OBJECT* object, int speedx, int speedy){
200004c6:	b580      	push	{r7, lr}
200004c8:	b084      	sub	sp, #16
200004ca:	af00      	add	r7, sp, #0
200004cc:	60f8      	str	r0, [r7, #12]
200004ce:	60b9      	str	r1, [r7, #8]
200004d0:	607a      	str	r2, [r7, #4]
    object->dirx = speedx;
200004d2:	68fb      	ldr	r3, [r7, #12]
200004d4:	68ba      	ldr	r2, [r7, #8]
200004d6:	605a      	str	r2, [r3, #4]
    object->diry = speedy;
200004d8:	68fb      	ldr	r3, [r7, #12]
200004da:	687a      	ldr	r2, [r7, #4]
200004dc:	609a      	str	r2, [r3, #8]
}
200004de:	46c0      	nop			; (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	b004      	add	sp, #16
200004e4:	bd80      	pop	{r7, pc}

200004e6 <create_ballobject>:

OBJECT create_ballobject(int posx, int posy){
200004e6:	b590      	push	{r4, r7, lr}
200004e8:	b08f      	sub	sp, #60	; 0x3c
200004ea:	af00      	add	r7, sp, #0
200004ec:	60f8      	str	r0, [r7, #12]
200004ee:	60b9      	str	r1, [r7, #8]
200004f0:	607a      	str	r2, [r7, #4]
    OBJECT ballobject = {
200004f2:	2114      	movs	r1, #20
200004f4:	187b      	adds	r3, r7, r1
200004f6:	4a13      	ldr	r2, [pc, #76]	; (20000544 <create_ballobject+0x5e>)
200004f8:	601a      	str	r2, [r3, #0]
200004fa:	187b      	adds	r3, r7, r1
200004fc:	2200      	movs	r2, #0
200004fe:	605a      	str	r2, [r3, #4]
20000500:	187b      	adds	r3, r7, r1
20000502:	2200      	movs	r2, #0
20000504:	609a      	str	r2, [r3, #8]
20000506:	187b      	adds	r3, r7, r1
20000508:	68ba      	ldr	r2, [r7, #8]
2000050a:	60da      	str	r2, [r3, #12]
2000050c:	187b      	adds	r3, r7, r1
2000050e:	687a      	ldr	r2, [r7, #4]
20000510:	611a      	str	r2, [r3, #16]
20000512:	187b      	adds	r3, r7, r1
20000514:	4a0c      	ldr	r2, [pc, #48]	; (20000548 <create_ballobject+0x62>)
20000516:	615a      	str	r2, [r3, #20]
20000518:	187b      	adds	r3, r7, r1
2000051a:	4a0c      	ldr	r2, [pc, #48]	; (2000054c <create_ballobject+0x66>)
2000051c:	619a      	str	r2, [r3, #24]
2000051e:	187b      	adds	r3, r7, r1
20000520:	4a0b      	ldr	r2, [pc, #44]	; (20000550 <create_ballobject+0x6a>)
20000522:	61da      	str	r2, [r3, #28]
20000524:	187b      	adds	r3, r7, r1
20000526:	4a0b      	ldr	r2, [pc, #44]	; (20000554 <create_ballobject+0x6e>)
20000528:	621a      	str	r2, [r3, #32]
        draw_ballobject,
        clear_ballobject,
        move_ballobject,
        set_ballobject_speed
    };
    return ballobject;
2000052a:	68fb      	ldr	r3, [r7, #12]
2000052c:	187a      	adds	r2, r7, r1
2000052e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000530:	c313      	stmia	r3!, {r0, r1, r4}
20000532:	ca13      	ldmia	r2!, {r0, r1, r4}
20000534:	c313      	stmia	r3!, {r0, r1, r4}
20000536:	ca13      	ldmia	r2!, {r0, r1, r4}
20000538:	c313      	stmia	r3!, {r0, r1, r4}
}
2000053a:	68f8      	ldr	r0, [r7, #12]
2000053c:	46bd      	mov	sp, r7
2000053e:	b00f      	add	sp, #60	; 0x3c
20000540:	bd90      	pop	{r4, r7, pc}
20000542:	46c0      	nop			; (mov r8, r8)
20000544:	20001258 	andcs	r1, r0, r8, asr r2
20000548:	2000032d 	andcs	r0, r0, sp, lsr #6
2000054c:	2000038d 	andcs	r0, r0, sp, lsl #7
20000550:	200003ed 	andcs	r0, r0, sp, ror #7
20000554:	200004c7 	andcs	r0, r0, r7, asr #9

20000558 <create_paddleobject>:

OBJECT create_paddleobject(int posx, int posy){
20000558:	b590      	push	{r4, r7, lr}
2000055a:	b08f      	sub	sp, #60	; 0x3c
2000055c:	af00      	add	r7, sp, #0
2000055e:	60f8      	str	r0, [r7, #12]
20000560:	60b9      	str	r1, [r7, #8]
20000562:	607a      	str	r2, [r7, #4]
    OBJECT paddleobject = {
20000564:	2114      	movs	r1, #20
20000566:	187b      	adds	r3, r7, r1
20000568:	4a12      	ldr	r2, [pc, #72]	; (200005b4 <create_paddleobject+0x5c>)
2000056a:	601a      	str	r2, [r3, #0]
2000056c:	187b      	adds	r3, r7, r1
2000056e:	2200      	movs	r2, #0
20000570:	605a      	str	r2, [r3, #4]
20000572:	187b      	adds	r3, r7, r1
20000574:	2200      	movs	r2, #0
20000576:	609a      	str	r2, [r3, #8]
20000578:	187b      	adds	r3, r7, r1
2000057a:	68ba      	ldr	r2, [r7, #8]
2000057c:	60da      	str	r2, [r3, #12]
2000057e:	187b      	adds	r3, r7, r1
20000580:	687a      	ldr	r2, [r7, #4]
20000582:	611a      	str	r2, [r3, #16]
20000584:	187b      	adds	r3, r7, r1
20000586:	4a0c      	ldr	r2, [pc, #48]	; (200005b8 <create_paddleobject+0x60>)
20000588:	615a      	str	r2, [r3, #20]
2000058a:	187b      	adds	r3, r7, r1
2000058c:	4a0b      	ldr	r2, [pc, #44]	; (200005bc <create_paddleobject+0x64>)
2000058e:	619a      	str	r2, [r3, #24]
20000590:	187b      	adds	r3, r7, r1
20000592:	4a0b      	ldr	r2, [pc, #44]	; (200005c0 <create_paddleobject+0x68>)
20000594:	61da      	str	r2, [r3, #28]
20000596:	187b      	adds	r3, r7, r1
20000598:	4a0a      	ldr	r2, [pc, #40]	; (200005c4 <create_paddleobject+0x6c>)
2000059a:	621a      	str	r2, [r3, #32]
        draw_ballobject,
        clear_ballobject,
        move_paddleobject,
        set_ballobject_speed
    };
    return paddleobject;
2000059c:	68fb      	ldr	r3, [r7, #12]
2000059e:	187a      	adds	r2, r7, r1
200005a0:	ca13      	ldmia	r2!, {r0, r1, r4}
200005a2:	c313      	stmia	r3!, {r0, r1, r4}
200005a4:	ca13      	ldmia	r2!, {r0, r1, r4}
200005a6:	c313      	stmia	r3!, {r0, r1, r4}
200005a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200005aa:	c313      	stmia	r3!, {r0, r1, r4}
200005ac:	68f8      	ldr	r0, [r7, #12]
200005ae:	46bd      	mov	sp, r7
200005b0:	b00f      	add	sp, #60	; 0x3c
200005b2:	bd90      	pop	{r4, r7, pc}
200005b4:	200012a0 	andcs	r1, r0, r0, lsr #5
200005b8:	2000032d 	andcs	r0, r0, sp, lsr #6
200005bc:	2000038d 	andcs	r0, r0, sp, lsl #7
200005c0:	20000471 	andcs	r0, r0, r1, ror r4
200005c4:	200004c7 	andcs	r0, r0, r7, asr #9

200005c8 <timer6_init>:





void timer6_init(){
200005c8:	b580      	push	{r7, lr}
200005ca:	af00      	add	r7, sp, #0
	time.seconds = 0;
200005cc:	4b13      	ldr	r3, [pc, #76]	; (2000061c <timer6_init+0x54>)
200005ce:	2200      	movs	r2, #0
200005d0:	601a      	str	r2, [r3, #0]
	*TIM6_CR1 &= ~CEN;
200005d2:	4b13      	ldr	r3, [pc, #76]	; (20000620 <timer6_init+0x58>)
200005d4:	681a      	ldr	r2, [r3, #0]
200005d6:	4b12      	ldr	r3, [pc, #72]	; (20000620 <timer6_init+0x58>)
200005d8:	2101      	movs	r1, #1
200005da:	438a      	bics	r2, r1
200005dc:	601a      	str	r2, [r3, #0]
	*TIM6_IRQVEC = timer6_interrupt;
200005de:	4b11      	ldr	r3, [pc, #68]	; (20000624 <timer6_init+0x5c>)
200005e0:	4a11      	ldr	r2, [pc, #68]	; (20000628 <timer6_init+0x60>)
200005e2:	601a      	str	r2, [r3, #0]
	*NVIC_TIM6_ISER |= NVIC_TIM6_IRQ_BPOS;
200005e4:	4b11      	ldr	r3, [pc, #68]	; (2000062c <timer6_init+0x64>)
200005e6:	681a      	ldr	r2, [r3, #0]
200005e8:	4b10      	ldr	r3, [pc, #64]	; (2000062c <timer6_init+0x64>)
200005ea:	2180      	movs	r1, #128	; 0x80
200005ec:	03c9      	lsls	r1, r1, #15
200005ee:	430a      	orrs	r2, r1
200005f0:	601a      	str	r2, [r3, #0]
	
	*TIM6_PSC = 8399;
200005f2:	4b0f      	ldr	r3, [pc, #60]	; (20000630 <timer6_init+0x68>)
200005f4:	4a0f      	ldr	r2, [pc, #60]	; (20000634 <timer6_init+0x6c>)
200005f6:	601a      	str	r2, [r3, #0]
	*TIM6_ARR = 999;
200005f8:	4b0f      	ldr	r3, [pc, #60]	; (20000638 <timer6_init+0x70>)
200005fa:	4a10      	ldr	r2, [pc, #64]	; (2000063c <timer6_init+0x74>)
200005fc:	601a      	str	r2, [r3, #0]
	*TIM6_DIER |= UIE;
200005fe:	4b10      	ldr	r3, [pc, #64]	; (20000640 <timer6_init+0x78>)
20000600:	681a      	ldr	r2, [r3, #0]
20000602:	4b0f      	ldr	r3, [pc, #60]	; (20000640 <timer6_init+0x78>)
20000604:	2101      	movs	r1, #1
20000606:	430a      	orrs	r2, r1
20000608:	601a      	str	r2, [r3, #0]
	*TIM6_CR1 |= CEN;
2000060a:	4b05      	ldr	r3, [pc, #20]	; (20000620 <timer6_init+0x58>)
2000060c:	681a      	ldr	r2, [r3, #0]
2000060e:	4b04      	ldr	r3, [pc, #16]	; (20000620 <timer6_init+0x58>)
20000610:	2101      	movs	r1, #1
20000612:	430a      	orrs	r2, r1
20000614:	601a      	str	r2, [r3, #0]
}
20000616:	46c0      	nop			; (mov r8, r8)
20000618:	46bd      	mov	sp, r7
2000061a:	bd80      	pop	{r7, pc}
2000061c:	20001234 	andcs	r1, r0, r4, lsr r2
20000620:	40001000 	andmi	r1, r0, r0
20000624:	2001c118 	andcs	ip, r1, r8, lsl r1
20000628:	20000c8d 	andcs	r0, r0, sp, lsl #25
2000062c:	e000e104 	and	lr, r0, r4, lsl #2
20000630:	40001028 	andmi	r1, r0, r8, lsr #32
20000634:	000020cf 	andeq	r2, r0, pc, asr #1
20000638:	4000102c 	andmi	r1, r0, ip, lsr #32
2000063c:	000003e7 	andeq	r0, r0, r7, ror #7
20000640:	4000100c 	andmi	r1, r0, ip

20000644 <get_current_time>:

int get_current_time(){
20000644:	b580      	push	{r7, lr}
20000646:	af00      	add	r7, sp, #0
	return time.seconds+ time.ten_seconds*10 + time.minutes*60;
20000648:	4b09      	ldr	r3, [pc, #36]	; (20000670 <get_current_time+0x2c>)
2000064a:	6819      	ldr	r1, [r3, #0]
2000064c:	4b08      	ldr	r3, [pc, #32]	; (20000670 <get_current_time+0x2c>)
2000064e:	685a      	ldr	r2, [r3, #4]
20000650:	0013      	movs	r3, r2
20000652:	009b      	lsls	r3, r3, #2
20000654:	189b      	adds	r3, r3, r2
20000656:	005b      	lsls	r3, r3, #1
20000658:	18c9      	adds	r1, r1, r3
2000065a:	4b05      	ldr	r3, [pc, #20]	; (20000670 <get_current_time+0x2c>)
2000065c:	689a      	ldr	r2, [r3, #8]
2000065e:	0013      	movs	r3, r2
20000660:	011b      	lsls	r3, r3, #4
20000662:	1a9b      	subs	r3, r3, r2
20000664:	009b      	lsls	r3, r3, #2
20000666:	18cb      	adds	r3, r1, r3
}
20000668:	0018      	movs	r0, r3
2000066a:	46bd      	mov	sp, r7
2000066c:	bd80      	pop	{r7, pc}
2000066e:	46c0      	nop			; (mov r8, r8)
20000670:	20001234 	andcs	r1, r0, r4, lsr r2

20000674 <gpio_init>:

void gpio_init(){
20000674:	b580      	push	{r7, lr}
20000676:	af00      	add	r7, sp, #0
	*SCB_VTOR = 0x2001c000;
20000678:	4b07      	ldr	r3, [pc, #28]	; (20000698 <gpio_init+0x24>)
2000067a:	4a08      	ldr	r2, [pc, #32]	; (2000069c <gpio_init+0x28>)
2000067c:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER = 0x55555555;
2000067e:	4b08      	ldr	r3, [pc, #32]	; (200006a0 <gpio_init+0x2c>)
20000680:	4a08      	ldr	r2, [pc, #32]	; (200006a4 <gpio_init+0x30>)
20000682:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
20000684:	4b08      	ldr	r3, [pc, #32]	; (200006a8 <gpio_init+0x34>)
20000686:	2200      	movs	r2, #0
20000688:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
2000068a:	4b08      	ldr	r3, [pc, #32]	; (200006ac <gpio_init+0x38>)
2000068c:	2201      	movs	r2, #1
2000068e:	4252      	negs	r2, r2
20000690:	601a      	str	r2, [r3, #0]
}
20000692:	46c0      	nop			; (mov r8, r8)
20000694:	46bd      	mov	sp, r7
20000696:	bd80      	pop	{r7, pc}
20000698:	e000ed20 	and	lr, r0, r0, lsr #26
2000069c:	2001c000 	andcs	ip, r1, r0
200006a0:	40021000 	andmi	r1, r2, r0
200006a4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200006a8:	40021004 	andmi	r1, r2, r4
200006ac:	40021008 	andmi	r1, r2, r8

200006b0 <print_char>:
	volatile unsigned short gtpr;
} Usart;

#define USART1 ((Usart *) 0x40011000)

static void print_char(char c) {
200006b0:	b580      	push	{r7, lr}
200006b2:	b082      	sub	sp, #8
200006b4:	af00      	add	r7, sp, #0
200006b6:	0002      	movs	r2, r0
200006b8:	1dfb      	adds	r3, r7, #7
200006ba:	701a      	strb	r2, [r3, #0]
	// write character to usart1
	while ((USART1->sr & 0x80) == 0)
200006bc:	46c0      	nop			; (mov r8, r8)
200006be:	4b0b      	ldr	r3, [pc, #44]	; (200006ec <print_char+0x3c>)
200006c0:	881b      	ldrh	r3, [r3, #0]
200006c2:	b29b      	uxth	r3, r3
200006c4:	001a      	movs	r2, r3
200006c6:	2380      	movs	r3, #128	; 0x80
200006c8:	4013      	ands	r3, r2
200006ca:	d0f8      	beq.n	200006be <print_char+0xe>
		;
	USART1->dr = (unsigned short) c;
200006cc:	4a07      	ldr	r2, [pc, #28]	; (200006ec <print_char+0x3c>)
200006ce:	1dfb      	adds	r3, r7, #7
200006d0:	781b      	ldrb	r3, [r3, #0]
200006d2:	b29b      	uxth	r3, r3
200006d4:	8093      	strh	r3, [r2, #4]
	if (c == '\n') {
200006d6:	1dfb      	adds	r3, r7, #7
200006d8:	781b      	ldrb	r3, [r3, #0]
200006da:	2b0a      	cmp	r3, #10
200006dc:	d102      	bne.n	200006e4 <print_char+0x34>
		print_char('\r');
200006de:	200d      	movs	r0, #13
200006e0:	f7ff ffe6 	bl	200006b0 <print_char>
	}
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b002      	add	sp, #8
200006ea:	bd80      	pop	{r7, pc}
200006ec:	40011000 	andmi	r1, r1, r0

200006f0 <print>:

void print(char *s) {
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
	while (*s != '\0') {
200006f8:	e006      	b.n	20000708 <print+0x18>
		print_char(*(s++));
200006fa:	687b      	ldr	r3, [r7, #4]
200006fc:	1c5a      	adds	r2, r3, #1
200006fe:	607a      	str	r2, [r7, #4]
20000700:	781b      	ldrb	r3, [r3, #0]
20000702:	0018      	movs	r0, r3
20000704:	f7ff ffd4 	bl	200006b0 <print_char>
	while (*s != '\0') {
20000708:	687b      	ldr	r3, [r7, #4]
2000070a:	781b      	ldrb	r3, [r3, #0]
2000070c:	2b00      	cmp	r3, #0
2000070e:	d1f4      	bne.n	200006fa <print+0xa>
	}
}
20000710:	46c0      	nop			; (mov r8, r8)
20000712:	46c0      	nop			; (mov r8, r8)
20000714:	46bd      	mov	sp, r7
20000716:	b002      	add	sp, #8
20000718:	bd80      	pop	{r7, pc}
2000071a:	46c0      	nop			; (mov r8, r8)

2000071c <delay_mili>:
#include "delay.h"

void delay_mili(unsigned int ms){
2000071c:	b580      	push	{r7, lr}
2000071e:	b084      	sub	sp, #16
20000720:	af00      	add	r7, sp, #0
20000722:	6078      	str	r0, [r7, #4]
    for (int i = 0; i< ms; i++){
20000724:	2300      	movs	r3, #0
20000726:	60fb      	str	r3, [r7, #12]
20000728:	e00a      	b.n	20000740 <delay_mili+0x24>
        delay_250ns();
2000072a:	f000 f812 	bl	20000752 <delay_250ns>
        delay_250ns();
2000072e:	f000 f810 	bl	20000752 <delay_250ns>
        delay_250ns();
20000732:	f000 f80e 	bl	20000752 <delay_250ns>
        delay_250ns();
20000736:	f000 f80c 	bl	20000752 <delay_250ns>
    for (int i = 0; i< ms; i++){
2000073a:	68fb      	ldr	r3, [r7, #12]
2000073c:	3301      	adds	r3, #1
2000073e:	60fb      	str	r3, [r7, #12]
20000740:	68fb      	ldr	r3, [r7, #12]
20000742:	687a      	ldr	r2, [r7, #4]
20000744:	429a      	cmp	r2, r3
20000746:	d8f0      	bhi.n	2000072a <delay_mili+0xe>
    }
}
20000748:	46c0      	nop			; (mov r8, r8)
2000074a:	46c0      	nop			; (mov r8, r8)
2000074c:	46bd      	mov	sp, r7
2000074e:	b004      	add	sp, #16
20000750:	bd80      	pop	{r7, pc}

20000752 <delay_250ns>:


void delay_250ns(){
20000752:	b580      	push	{r7, lr}
20000754:	af00      	add	r7, sp, #0
	delay_125ns();
20000756:	f000 f805 	bl	20000764 <delay_125ns>
    delay_125ns();
2000075a:	f000 f803 	bl	20000764 <delay_125ns>
}
2000075e:	46c0      	nop			; (mov r8, r8)
20000760:	46bd      	mov	sp, r7
20000762:	bd80      	pop	{r7, pc}

20000764 <delay_125ns>:

void delay_125ns(){
20000764:	b580      	push	{r7, lr}
20000766:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000768:	4b0c      	ldr	r3, [pc, #48]	; (2000079c <delay_125ns+0x38>)
2000076a:	2200      	movs	r2, #0
2000076c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = (168/8 );
2000076e:	4b0c      	ldr	r3, [pc, #48]	; (200007a0 <delay_125ns+0x3c>)
20000770:	2215      	movs	r2, #21
20000772:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000774:	4b0b      	ldr	r3, [pc, #44]	; (200007a4 <delay_125ns+0x40>)
20000776:	2200      	movs	r2, #0
20000778:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000077a:	4b08      	ldr	r3, [pc, #32]	; (2000079c <delay_125ns+0x38>)
2000077c:	2205      	movs	r2, #5
2000077e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
20000780:	46c0      	nop			; (mov r8, r8)
20000782:	4b06      	ldr	r3, [pc, #24]	; (2000079c <delay_125ns+0x38>)
20000784:	681a      	ldr	r2, [r3, #0]
20000786:	2380      	movs	r3, #128	; 0x80
20000788:	025b      	lsls	r3, r3, #9
2000078a:	4013      	ands	r3, r2
2000078c:	d0f9      	beq.n	20000782 <delay_125ns+0x1e>
	*STK_CTRL = 0;
2000078e:	4b03      	ldr	r3, [pc, #12]	; (2000079c <delay_125ns+0x38>)
20000790:	2200      	movs	r2, #0
20000792:	601a      	str	r2, [r3, #0]
}
20000794:	46c0      	nop			; (mov r8, r8)
20000796:	46bd      	mov	sp, r7
20000798:	bd80      	pop	{r7, pc}
2000079a:	46c0      	nop			; (mov r8, r8)
2000079c:	e000e010 	and	lr, r0, r0, lsl r0
200007a0:	e000e014 	and	lr, r0, r4, lsl r0
200007a4:	e000e018 	and	lr, r0, r8, lsl r0

200007a8 <draw_line_from_points>:
#include "startup.h"
#include "math.h"



void draw_line_from_points(int x0,int x1,int y0,int y1){
200007a8:	b580      	push	{r7, lr}
200007aa:	b08c      	sub	sp, #48	; 0x30
200007ac:	af00      	add	r7, sp, #0
200007ae:	60f8      	str	r0, [r7, #12]
200007b0:	60b9      	str	r1, [r7, #8]
200007b2:	607a      	str	r2, [r7, #4]
200007b4:	603b      	str	r3, [r7, #0]
    char steep;
    int temp;
    if(abs(y1-y0)>abs(x1-x0)){
200007b6:	683a      	ldr	r2, [r7, #0]
200007b8:	687b      	ldr	r3, [r7, #4]
200007ba:	1ad3      	subs	r3, r2, r3
200007bc:	17d9      	asrs	r1, r3, #31
200007be:	185a      	adds	r2, r3, r1
200007c0:	404a      	eors	r2, r1
200007c2:	68b9      	ldr	r1, [r7, #8]
200007c4:	68fb      	ldr	r3, [r7, #12]
200007c6:	1acb      	subs	r3, r1, r3
200007c8:	17d9      	asrs	r1, r3, #31
200007ca:	185b      	adds	r3, r3, r1
200007cc:	404b      	eors	r3, r1
200007ce:	429a      	cmp	r2, r3
200007d0:	dd04      	ble.n	200007dc <draw_line_from_points+0x34>
        steep = 1;
200007d2:	232f      	movs	r3, #47	; 0x2f
200007d4:	18fb      	adds	r3, r7, r3
200007d6:	2201      	movs	r2, #1
200007d8:	701a      	strb	r2, [r3, #0]
200007da:	e003      	b.n	200007e4 <draw_line_from_points+0x3c>
    }else{
        steep = 0;
200007dc:	232f      	movs	r3, #47	; 0x2f
200007de:	18fb      	adds	r3, r7, r3
200007e0:	2200      	movs	r2, #0
200007e2:	701a      	strb	r2, [r3, #0]
    }
    if(steep){
200007e4:	232f      	movs	r3, #47	; 0x2f
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	781b      	ldrb	r3, [r3, #0]
200007ea:	2b00      	cmp	r3, #0
200007ec:	d00b      	beq.n	20000806 <draw_line_from_points+0x5e>
        swap(x0, y0);
200007ee:	68fb      	ldr	r3, [r7, #12]
200007f0:	61bb      	str	r3, [r7, #24]
200007f2:	687b      	ldr	r3, [r7, #4]
200007f4:	60fb      	str	r3, [r7, #12]
200007f6:	69bb      	ldr	r3, [r7, #24]
200007f8:	607b      	str	r3, [r7, #4]

        swap(x1, y1);
200007fa:	68bb      	ldr	r3, [r7, #8]
200007fc:	61bb      	str	r3, [r7, #24]
200007fe:	683b      	ldr	r3, [r7, #0]
20000800:	60bb      	str	r3, [r7, #8]
20000802:	69bb      	ldr	r3, [r7, #24]
20000804:	603b      	str	r3, [r7, #0]
    }
    if(x0>x1){
20000806:	68fa      	ldr	r2, [r7, #12]
20000808:	68bb      	ldr	r3, [r7, #8]
2000080a:	429a      	cmp	r2, r3
2000080c:	dd0b      	ble.n	20000826 <draw_line_from_points+0x7e>
        swap(x0,x1);
2000080e:	68fb      	ldr	r3, [r7, #12]
20000810:	61bb      	str	r3, [r7, #24]
20000812:	68bb      	ldr	r3, [r7, #8]
20000814:	60fb      	str	r3, [r7, #12]
20000816:	69bb      	ldr	r3, [r7, #24]
20000818:	60bb      	str	r3, [r7, #8]
       
        swap(y0,y1);
2000081a:	687b      	ldr	r3, [r7, #4]
2000081c:	61bb      	str	r3, [r7, #24]
2000081e:	683b      	ldr	r3, [r7, #0]
20000820:	607b      	str	r3, [r7, #4]
20000822:	69bb      	ldr	r3, [r7, #24]
20000824:	603b      	str	r3, [r7, #0]

    }
    int deltax = x1-x0;
20000826:	68ba      	ldr	r2, [r7, #8]
20000828:	68fb      	ldr	r3, [r7, #12]
2000082a:	1ad3      	subs	r3, r2, r3
2000082c:	617b      	str	r3, [r7, #20]
    int deltay = abs(y1-y0);
2000082e:	683a      	ldr	r2, [r7, #0]
20000830:	687b      	ldr	r3, [r7, #4]
20000832:	1ad3      	subs	r3, r2, r3
20000834:	17da      	asrs	r2, r3, #31
20000836:	189b      	adds	r3, r3, r2
20000838:	4053      	eors	r3, r2
2000083a:	613b      	str	r3, [r7, #16]
    int error = 0;
2000083c:	2300      	movs	r3, #0
2000083e:	62bb      	str	r3, [r7, #40]	; 0x28
    int y = y0;
20000840:	687b      	ldr	r3, [r7, #4]
20000842:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep;
    if(y0 < y1){
20000844:	687a      	ldr	r2, [r7, #4]
20000846:	683b      	ldr	r3, [r7, #0]
20000848:	429a      	cmp	r2, r3
2000084a:	da02      	bge.n	20000852 <draw_line_from_points+0xaa>
        ystep = 1;
2000084c:	2301      	movs	r3, #1
2000084e:	623b      	str	r3, [r7, #32]
20000850:	e002      	b.n	20000858 <draw_line_from_points+0xb0>
    }else{
        ystep = -1;
20000852:	2301      	movs	r3, #1
20000854:	425b      	negs	r3, r3
20000856:	623b      	str	r3, [r7, #32]
    }
    for(int x = x0; x < x1; x++){
20000858:	68fb      	ldr	r3, [r7, #12]
2000085a:	61fb      	str	r3, [r7, #28]
2000085c:	e025      	b.n	200008aa <draw_line_from_points+0x102>
        if(steep){
2000085e:	232f      	movs	r3, #47	; 0x2f
20000860:	18fb      	adds	r3, r7, r3
20000862:	781b      	ldrb	r3, [r3, #0]
20000864:	2b00      	cmp	r3, #0
20000866:	d006      	beq.n	20000876 <draw_line_from_points+0xce>
            graphic_pixel_set(y,x);
20000868:	69fa      	ldr	r2, [r7, #28]
2000086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000086c:	0011      	movs	r1, r2
2000086e:	0018      	movs	r0, r3
20000870:	f000 fcd9 	bl	20001226 <graphic_pixel_set>
20000874:	e005      	b.n	20000882 <draw_line_from_points+0xda>
        }else{
            graphic_pixel_set(x,y);
20000876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000878:	69fb      	ldr	r3, [r7, #28]
2000087a:	0011      	movs	r1, r2
2000087c:	0018      	movs	r0, r3
2000087e:	f000 fcd2 	bl	20001226 <graphic_pixel_set>
        }
        // graphic_pixel_set(x,y1);
        error = error+deltay;
20000882:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000884:	693b      	ldr	r3, [r7, #16]
20000886:	18d3      	adds	r3, r2, r3
20000888:	62bb      	str	r3, [r7, #40]	; 0x28
        if(error* 2 >= deltax){
2000088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000088c:	005b      	lsls	r3, r3, #1
2000088e:	697a      	ldr	r2, [r7, #20]
20000890:	429a      	cmp	r2, r3
20000892:	dc07      	bgt.n	200008a4 <draw_line_from_points+0xfc>
            y = y +ystep;
20000894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000896:	6a3b      	ldr	r3, [r7, #32]
20000898:	18d3      	adds	r3, r2, r3
2000089a:	627b      	str	r3, [r7, #36]	; 0x24
            error = error-deltax;
2000089c:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000089e:	697b      	ldr	r3, [r7, #20]
200008a0:	1ad3      	subs	r3, r2, r3
200008a2:	62bb      	str	r3, [r7, #40]	; 0x28
    for(int x = x0; x < x1; x++){
200008a4:	69fb      	ldr	r3, [r7, #28]
200008a6:	3301      	adds	r3, #1
200008a8:	61fb      	str	r3, [r7, #28]
200008aa:	69fa      	ldr	r2, [r7, #28]
200008ac:	68bb      	ldr	r3, [r7, #8]
200008ae:	429a      	cmp	r2, r3
200008b0:	dbd5      	blt.n	2000085e <draw_line_from_points+0xb6>
        }
    }
}
200008b2:	46c0      	nop			; (mov r8, r8)
200008b4:	46c0      	nop			; (mov r8, r8)
200008b6:	46bd      	mov	sp, r7
200008b8:	b00c      	add	sp, #48	; 0x30
200008ba:	bd80      	pop	{r7, pc}

200008bc <display_line>:

char display_line(LINE line){
200008bc:	b580      	push	{r7, lr}
200008be:	b086      	sub	sp, #24
200008c0:	af00      	add	r7, sp, #0
200008c2:	1d3b      	adds	r3, r7, #4
200008c4:	6018      	str	r0, [r3, #0]
        int x0 = line.p1.x;
200008c6:	1d3b      	adds	r3, r7, #4
200008c8:	781b      	ldrb	r3, [r3, #0]
200008ca:	617b      	str	r3, [r7, #20]
        int x1 = line.p2.x;
200008cc:	1d3b      	adds	r3, r7, #4
200008ce:	789b      	ldrb	r3, [r3, #2]
200008d0:	613b      	str	r3, [r7, #16]

        int y0 = line.p1.y;
200008d2:	1d3b      	adds	r3, r7, #4
200008d4:	785b      	ldrb	r3, [r3, #1]
200008d6:	60fb      	str	r3, [r7, #12]
        int y1 = line.p2.y;
200008d8:	1d3b      	adds	r3, r7, #4
200008da:	78db      	ldrb	r3, [r3, #3]
200008dc:	60bb      	str	r3, [r7, #8]
    if(y0<= 64 && y1 <= 64){
200008de:	68fb      	ldr	r3, [r7, #12]
200008e0:	2b40      	cmp	r3, #64	; 0x40
200008e2:	dc0a      	bgt.n	200008fa <display_line+0x3e>
200008e4:	68bb      	ldr	r3, [r7, #8]
200008e6:	2b40      	cmp	r3, #64	; 0x40
200008e8:	dc07      	bgt.n	200008fa <display_line+0x3e>
        draw_line_from_points(x0,x1, y0, y1);
200008ea:	68bb      	ldr	r3, [r7, #8]
200008ec:	68fa      	ldr	r2, [r7, #12]
200008ee:	6939      	ldr	r1, [r7, #16]
200008f0:	6978      	ldr	r0, [r7, #20]
200008f2:	f7ff ff59 	bl	200007a8 <draw_line_from_points>
        return 1;
200008f6:	2301      	movs	r3, #1
200008f8:	e000      	b.n	200008fc <display_line+0x40>
    }
    return 0;    
200008fa:	2300      	movs	r3, #0
}
200008fc:	0018      	movs	r0, r3
200008fe:	46bd      	mov	sp, r7
20000900:	b006      	add	sp, #24
20000902:	bd80      	pop	{r7, pc}

20000904 <plot_rect>:


char plot_rect(RECT rect){
20000904:	b5f0      	push	{r4, r5, r6, r7, lr}
20000906:	b087      	sub	sp, #28
20000908:	af00      	add	r7, sp, #0
2000090a:	1d3b      	adds	r3, r7, #4
2000090c:	6018      	str	r0, [r3, #0]
    POINT start;
    POINT end;
    POINT point = rect.p;
2000090e:	240c      	movs	r4, #12
20000910:	193b      	adds	r3, r7, r4
20000912:	1d3a      	adds	r2, r7, #4
20000914:	8812      	ldrh	r2, [r2, #0]
20000916:	801a      	strh	r2, [r3, #0]
    char x = rect.x;
20000918:	2017      	movs	r0, #23
2000091a:	183b      	adds	r3, r7, r0
2000091c:	1d3a      	adds	r2, r7, #4
2000091e:	7892      	ldrb	r2, [r2, #2]
20000920:	701a      	strb	r2, [r3, #0]
    char y = rect.y;
20000922:	2516      	movs	r5, #22
20000924:	197b      	adds	r3, r7, r5
20000926:	1d3a      	adds	r2, r7, #4
20000928:	78d2      	ldrb	r2, [r2, #3]
2000092a:	701a      	strb	r2, [r3, #0]
    LINE line;
    
    start.x = point.x; start.y = point.y; end.x = point.x + x; end.y = point.y ; line.p1 = start; line.p2 = end; display_line(line);
2000092c:	193b      	adds	r3, r7, r4
2000092e:	781a      	ldrb	r2, [r3, #0]
20000930:	2114      	movs	r1, #20
20000932:	187b      	adds	r3, r7, r1
20000934:	701a      	strb	r2, [r3, #0]
20000936:	193b      	adds	r3, r7, r4
20000938:	785a      	ldrb	r2, [r3, #1]
2000093a:	187b      	adds	r3, r7, r1
2000093c:	705a      	strb	r2, [r3, #1]
2000093e:	193b      	adds	r3, r7, r4
20000940:	781a      	ldrb	r2, [r3, #0]
20000942:	183b      	adds	r3, r7, r0
20000944:	781b      	ldrb	r3, [r3, #0]
20000946:	18d3      	adds	r3, r2, r3
20000948:	b2da      	uxtb	r2, r3
2000094a:	2610      	movs	r6, #16
2000094c:	19bb      	adds	r3, r7, r6
2000094e:	701a      	strb	r2, [r3, #0]
20000950:	193b      	adds	r3, r7, r4
20000952:	785a      	ldrb	r2, [r3, #1]
20000954:	19bb      	adds	r3, r7, r6
20000956:	705a      	strb	r2, [r3, #1]
20000958:	2008      	movs	r0, #8
2000095a:	183b      	adds	r3, r7, r0
2000095c:	000d      	movs	r5, r1
2000095e:	187a      	adds	r2, r7, r1
20000960:	8812      	ldrh	r2, [r2, #0]
20000962:	801a      	strh	r2, [r3, #0]
20000964:	183b      	adds	r3, r7, r0
20000966:	2102      	movs	r1, #2
20000968:	19ba      	adds	r2, r7, r6
2000096a:	8812      	ldrh	r2, [r2, #0]
2000096c:	525a      	strh	r2, [r3, r1]
2000096e:	183b      	adds	r3, r7, r0
20000970:	6818      	ldr	r0, [r3, #0]
20000972:	f7ff ffa3 	bl	200008bc <display_line>
    start.x = point.x + x; start.y = point.y; end.x = start.x; end.y = point.y + y; line.p1 = start; line.p2 = end; display_line(line);
20000976:	193b      	adds	r3, r7, r4
20000978:	781a      	ldrb	r2, [r3, #0]
2000097a:	2317      	movs	r3, #23
2000097c:	18fb      	adds	r3, r7, r3
2000097e:	781b      	ldrb	r3, [r3, #0]
20000980:	18d3      	adds	r3, r2, r3
20000982:	b2da      	uxtb	r2, r3
20000984:	197b      	adds	r3, r7, r5
20000986:	701a      	strb	r2, [r3, #0]
20000988:	193b      	adds	r3, r7, r4
2000098a:	785a      	ldrb	r2, [r3, #1]
2000098c:	197b      	adds	r3, r7, r5
2000098e:	705a      	strb	r2, [r3, #1]
20000990:	0029      	movs	r1, r5
20000992:	197b      	adds	r3, r7, r5
20000994:	781a      	ldrb	r2, [r3, #0]
20000996:	19bb      	adds	r3, r7, r6
20000998:	701a      	strb	r2, [r3, #0]
2000099a:	193b      	adds	r3, r7, r4
2000099c:	785a      	ldrb	r2, [r3, #1]
2000099e:	2516      	movs	r5, #22
200009a0:	197b      	adds	r3, r7, r5
200009a2:	781b      	ldrb	r3, [r3, #0]
200009a4:	18d3      	adds	r3, r2, r3
200009a6:	b2da      	uxtb	r2, r3
200009a8:	19bb      	adds	r3, r7, r6
200009aa:	705a      	strb	r2, [r3, #1]
200009ac:	2008      	movs	r0, #8
200009ae:	183b      	adds	r3, r7, r0
200009b0:	000d      	movs	r5, r1
200009b2:	187a      	adds	r2, r7, r1
200009b4:	8812      	ldrh	r2, [r2, #0]
200009b6:	801a      	strh	r2, [r3, #0]
200009b8:	183b      	adds	r3, r7, r0
200009ba:	2102      	movs	r1, #2
200009bc:	19ba      	adds	r2, r7, r6
200009be:	8812      	ldrh	r2, [r2, #0]
200009c0:	525a      	strh	r2, [r3, r1]
200009c2:	183b      	adds	r3, r7, r0
200009c4:	6818      	ldr	r0, [r3, #0]
200009c6:	f7ff ff79 	bl	200008bc <display_line>
    start.x = point.x + x; start.y = point.y+y; end.x = point.x; end.y = point.y + y; line.p1 = start; line.p2 = end; display_line(line );
200009ca:	193b      	adds	r3, r7, r4
200009cc:	781a      	ldrb	r2, [r3, #0]
200009ce:	2317      	movs	r3, #23
200009d0:	18fb      	adds	r3, r7, r3
200009d2:	781b      	ldrb	r3, [r3, #0]
200009d4:	18d3      	adds	r3, r2, r3
200009d6:	b2da      	uxtb	r2, r3
200009d8:	0029      	movs	r1, r5
200009da:	187b      	adds	r3, r7, r1
200009dc:	701a      	strb	r2, [r3, #0]
200009de:	193b      	adds	r3, r7, r4
200009e0:	785a      	ldrb	r2, [r3, #1]
200009e2:	2516      	movs	r5, #22
200009e4:	197b      	adds	r3, r7, r5
200009e6:	781b      	ldrb	r3, [r3, #0]
200009e8:	18d3      	adds	r3, r2, r3
200009ea:	b2da      	uxtb	r2, r3
200009ec:	187b      	adds	r3, r7, r1
200009ee:	705a      	strb	r2, [r3, #1]
200009f0:	193b      	adds	r3, r7, r4
200009f2:	781a      	ldrb	r2, [r3, #0]
200009f4:	19bb      	adds	r3, r7, r6
200009f6:	701a      	strb	r2, [r3, #0]
200009f8:	193b      	adds	r3, r7, r4
200009fa:	785a      	ldrb	r2, [r3, #1]
200009fc:	197b      	adds	r3, r7, r5
200009fe:	781b      	ldrb	r3, [r3, #0]
20000a00:	18d3      	adds	r3, r2, r3
20000a02:	b2da      	uxtb	r2, r3
20000a04:	19bb      	adds	r3, r7, r6
20000a06:	705a      	strb	r2, [r3, #1]
20000a08:	2008      	movs	r0, #8
20000a0a:	183b      	adds	r3, r7, r0
20000a0c:	000d      	movs	r5, r1
20000a0e:	187a      	adds	r2, r7, r1
20000a10:	8812      	ldrh	r2, [r2, #0]
20000a12:	801a      	strh	r2, [r3, #0]
20000a14:	183b      	adds	r3, r7, r0
20000a16:	2102      	movs	r1, #2
20000a18:	19ba      	adds	r2, r7, r6
20000a1a:	8812      	ldrh	r2, [r2, #0]
20000a1c:	525a      	strh	r2, [r3, r1]
20000a1e:	183b      	adds	r3, r7, r0
20000a20:	6818      	ldr	r0, [r3, #0]
20000a22:	f7ff ff4b 	bl	200008bc <display_line>
    return start.x = point.x ; start.y = point.y+y; end.x = point.x; end.y = point.y; line.p1 = start; line.p2 = end; display_line(line);
20000a26:	193b      	adds	r3, r7, r4
20000a28:	781a      	ldrb	r2, [r3, #0]
20000a2a:	197b      	adds	r3, r7, r5
20000a2c:	701a      	strb	r2, [r3, #0]
20000a2e:	197b      	adds	r3, r7, r5
20000a30:	781b      	ldrb	r3, [r3, #0]
}
20000a32:	0018      	movs	r0, r3
20000a34:	46bd      	mov	sp, r7
20000a36:	b007      	add	sp, #28
20000a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000a3a <plot_polygon>:

char plot_polygon(POLYPOINT polygon1){
20000a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a3c:	b087      	sub	sp, #28
20000a3e:	af00      	add	r7, sp, #0
20000a40:	003b      	movs	r3, r7
20000a42:	6018      	str	r0, [r3, #0]
20000a44:	6059      	str	r1, [r3, #4]
    POINT p0;
    POINT p1;
    p0.x = polygon1.x; p0.y = polygon1.y;
20000a46:	003b      	movs	r3, r7
20000a48:	781a      	ldrb	r2, [r3, #0]
20000a4a:	2110      	movs	r1, #16
20000a4c:	187b      	adds	r3, r7, r1
20000a4e:	701a      	strb	r2, [r3, #0]
20000a50:	003b      	movs	r3, r7
20000a52:	785a      	ldrb	r2, [r3, #1]
20000a54:	187b      	adds	r3, r7, r1
20000a56:	705a      	strb	r2, [r3, #1]
    struct polygonpoint *ptr = polygon1.next;
20000a58:	003b      	movs	r3, r7
20000a5a:	685b      	ldr	r3, [r3, #4]
20000a5c:	617b      	str	r3, [r7, #20]
    while(ptr != 0){
20000a5e:	e024      	b.n	20000aaa <plot_polygon+0x70>
        p1.x =   ptr->x;
20000a60:	697b      	ldr	r3, [r7, #20]
20000a62:	781a      	ldrb	r2, [r3, #0]
20000a64:	200c      	movs	r0, #12
20000a66:	183b      	adds	r3, r7, r0
20000a68:	701a      	strb	r2, [r3, #0]
        p1.y = ptr->y;
20000a6a:	697b      	ldr	r3, [r7, #20]
20000a6c:	785a      	ldrb	r2, [r3, #1]
20000a6e:	183b      	adds	r3, r7, r0
20000a70:	705a      	strb	r2, [r3, #1]
        LINE line =  {p0,p1};
20000a72:	2508      	movs	r5, #8
20000a74:	197b      	adds	r3, r7, r5
20000a76:	2610      	movs	r6, #16
20000a78:	19ba      	adds	r2, r7, r6
20000a7a:	8812      	ldrh	r2, [r2, #0]
20000a7c:	801a      	strh	r2, [r3, #0]
20000a7e:	197b      	adds	r3, r7, r5
20000a80:	2102      	movs	r1, #2
20000a82:	0004      	movs	r4, r0
20000a84:	183a      	adds	r2, r7, r0
20000a86:	8812      	ldrh	r2, [r2, #0]
20000a88:	525a      	strh	r2, [r3, r1]
        display_line(line);
20000a8a:	197b      	adds	r3, r7, r5
20000a8c:	6818      	ldr	r0, [r3, #0]
20000a8e:	f7ff ff15 	bl	200008bc <display_line>
        p0.x = p1.x;
20000a92:	0020      	movs	r0, r4
20000a94:	183b      	adds	r3, r7, r0
20000a96:	781a      	ldrb	r2, [r3, #0]
20000a98:	19bb      	adds	r3, r7, r6
20000a9a:	701a      	strb	r2, [r3, #0]
        p0.y = p1.y;
20000a9c:	183b      	adds	r3, r7, r0
20000a9e:	785a      	ldrb	r2, [r3, #1]
20000aa0:	19bb      	adds	r3, r7, r6
20000aa2:	705a      	strb	r2, [r3, #1]
        ptr = ptr->next;
20000aa4:	697b      	ldr	r3, [r7, #20]
20000aa6:	685b      	ldr	r3, [r3, #4]
20000aa8:	617b      	str	r3, [r7, #20]
    while(ptr != 0){
20000aaa:	697b      	ldr	r3, [r7, #20]
20000aac:	2b00      	cmp	r3, #0
20000aae:	d1d7      	bne.n	20000a60 <plot_polygon+0x26>

    }
    return 1;
20000ab0:	2301      	movs	r3, #1


}
20000ab2:	0018      	movs	r0, r3
20000ab4:	46bd      	mov	sp, r7
20000ab6:	b007      	add	sp, #28
20000ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000abc <activateRow>:





void activateRow(int row){
20000abc:	b580      	push	{r7, lr}
20000abe:	b082      	sub	sp, #8
20000ac0:	af00      	add	r7, sp, #0
20000ac2:	6078      	str	r0, [r7, #4]

    switch (row) {
20000ac4:	687b      	ldr	r3, [r7, #4]
20000ac6:	2b04      	cmp	r3, #4
20000ac8:	d01b      	beq.n	20000b02 <activateRow+0x46>
20000aca:	687b      	ldr	r3, [r7, #4]
20000acc:	2b04      	cmp	r3, #4
20000ace:	dc1c      	bgt.n	20000b0a <activateRow+0x4e>
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	2b03      	cmp	r3, #3
20000ad4:	d011      	beq.n	20000afa <activateRow+0x3e>
20000ad6:	687b      	ldr	r3, [r7, #4]
20000ad8:	2b03      	cmp	r3, #3
20000ada:	dc16      	bgt.n	20000b0a <activateRow+0x4e>
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	2b01      	cmp	r3, #1
20000ae0:	d003      	beq.n	20000aea <activateRow+0x2e>
20000ae2:	687b      	ldr	r3, [r7, #4]
20000ae4:	2b02      	cmp	r3, #2
20000ae6:	d004      	beq.n	20000af2 <activateRow+0x36>
20000ae8:	e00f      	b.n	20000b0a <activateRow+0x4e>
        case 1: *GPIO_D_ODR_HIGH= 0x10; break;
20000aea:	4b0c      	ldr	r3, [pc, #48]	; (20000b1c <activateRow+0x60>)
20000aec:	2210      	movs	r2, #16
20000aee:	701a      	strb	r2, [r3, #0]
20000af0:	e00f      	b.n	20000b12 <activateRow+0x56>
        case 2: *GPIO_D_ODR_HIGH = 0x20; break;
20000af2:	4b0a      	ldr	r3, [pc, #40]	; (20000b1c <activateRow+0x60>)
20000af4:	2220      	movs	r2, #32
20000af6:	701a      	strb	r2, [r3, #0]
20000af8:	e00b      	b.n	20000b12 <activateRow+0x56>
        case 3: *GPIO_D_ODR_HIGH= 0x40; break;
20000afa:	4b08      	ldr	r3, [pc, #32]	; (20000b1c <activateRow+0x60>)
20000afc:	2240      	movs	r2, #64	; 0x40
20000afe:	701a      	strb	r2, [r3, #0]
20000b00:	e007      	b.n	20000b12 <activateRow+0x56>
        case 4: *GPIO_D_ODR_HIGH = 0x80; break;
20000b02:	4b06      	ldr	r3, [pc, #24]	; (20000b1c <activateRow+0x60>)
20000b04:	2280      	movs	r2, #128	; 0x80
20000b06:	701a      	strb	r2, [r3, #0]
20000b08:	e003      	b.n	20000b12 <activateRow+0x56>
        default: *GPIO_D_ODR_HIGH = 0; break;
20000b0a:	4b04      	ldr	r3, [pc, #16]	; (20000b1c <activateRow+0x60>)
20000b0c:	2200      	movs	r2, #0
20000b0e:	701a      	strb	r2, [r3, #0]
20000b10:	46c0      	nop			; (mov r8, r8)

 }
}
20000b12:	46c0      	nop			; (mov r8, r8)
20000b14:	46bd      	mov	sp, r7
20000b16:	b002      	add	sp, #8
20000b18:	bd80      	pop	{r7, pc}
20000b1a:	46c0      	nop			; (mov r8, r8)
20000b1c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000b20 <readColumn>:

int  readColumn(void){
20000b20:	b580      	push	{r7, lr}
20000b22:	b082      	sub	sp, #8
20000b24:	af00      	add	r7, sp, #0

	*GPIO_D_MODER = 0x55005555;
20000b26:	4b14      	ldr	r3, [pc, #80]	; (20000b78 <readColumn+0x58>)
20000b28:	4a14      	ldr	r2, [pc, #80]	; (20000b7c <readColumn+0x5c>)
20000b2a:	601a      	str	r2, [r3, #0]
    char c =  *GPIO_D_IDR_HIGH;
20000b2c:	4a14      	ldr	r2, [pc, #80]	; (20000b80 <readColumn+0x60>)
20000b2e:	1dfb      	adds	r3, r7, #7
20000b30:	7812      	ldrb	r2, [r2, #0]
20000b32:	701a      	strb	r2, [r3, #0]
    if(c & 8){
20000b34:	1dfb      	adds	r3, r7, #7
20000b36:	781b      	ldrb	r3, [r3, #0]
20000b38:	2208      	movs	r2, #8
20000b3a:	4013      	ands	r3, r2
20000b3c:	d001      	beq.n	20000b42 <readColumn+0x22>
        return 4;
20000b3e:	2304      	movs	r3, #4
20000b40:	e015      	b.n	20000b6e <readColumn+0x4e>
    }
    if(c & 4){
20000b42:	1dfb      	adds	r3, r7, #7
20000b44:	781b      	ldrb	r3, [r3, #0]
20000b46:	2204      	movs	r2, #4
20000b48:	4013      	ands	r3, r2
20000b4a:	d001      	beq.n	20000b50 <readColumn+0x30>
        return 3;
20000b4c:	2303      	movs	r3, #3
20000b4e:	e00e      	b.n	20000b6e <readColumn+0x4e>
    }
    if(c & 2){
20000b50:	1dfb      	adds	r3, r7, #7
20000b52:	781b      	ldrb	r3, [r3, #0]
20000b54:	2202      	movs	r2, #2
20000b56:	4013      	ands	r3, r2
20000b58:	d001      	beq.n	20000b5e <readColumn+0x3e>
        return 2;
20000b5a:	2302      	movs	r3, #2
20000b5c:	e007      	b.n	20000b6e <readColumn+0x4e>
    }
    if(c & 1){
20000b5e:	1dfb      	adds	r3, r7, #7
20000b60:	781b      	ldrb	r3, [r3, #0]
20000b62:	2201      	movs	r2, #1
20000b64:	4013      	ands	r3, r2
20000b66:	d001      	beq.n	20000b6c <readColumn+0x4c>
        return 1;
20000b68:	2301      	movs	r3, #1
20000b6a:	e000      	b.n	20000b6e <readColumn+0x4e>
    }
    return 0;
20000b6c:	2300      	movs	r3, #0
}
20000b6e:	0018      	movs	r0, r3
20000b70:	46bd      	mov	sp, r7
20000b72:	b002      	add	sp, #8
20000b74:	bd80      	pop	{r7, pc}
20000b76:	46c0      	nop			; (mov r8, r8)
20000b78:	40020c00 	andmi	r0, r2, r0, lsl #24
20000b7c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000b80:	40020c11 	andmi	r0, r2, r1, lsl ip

20000b84 <initKeyb>:

void initKeyb(void){
20000b84:	b580      	push	{r7, lr}
20000b86:	af00      	add	r7, sp, #0
        //init init pupd 
       
        *GPIO_D_PUPDR = 0x00AA0000;
20000b88:	4b09      	ldr	r3, [pc, #36]	; (20000bb0 <initKeyb+0x2c>)
20000b8a:	22aa      	movs	r2, #170	; 0xaa
20000b8c:	0412      	lsls	r2, r2, #16
20000b8e:	601a      	str	r2, [r3, #0]
        // sets otr
       
        *GPIO_D_OTYPER = 0x0;
20000b90:	4b08      	ldr	r3, [pc, #32]	; (20000bb4 <initKeyb+0x30>)
20000b92:	2200      	movs	r2, #0
20000b94:	801a      	strh	r2, [r3, #0]
        
        *GPIO_D_OSPEEDR = 0xffffffff;
20000b96:	4b08      	ldr	r3, [pc, #32]	; (20000bb8 <initKeyb+0x34>)
20000b98:	2201      	movs	r2, #1
20000b9a:	4252      	negs	r2, r2
20000b9c:	601a      	str	r2, [r3, #0]

            //starts clocks for debug board
    *((unsigned long *) 0x40023830) = 0x18;
20000b9e:	4b07      	ldr	r3, [pc, #28]	; (20000bbc <initKeyb+0x38>)
20000ba0:	2218      	movs	r2, #24
20000ba2:	601a      	str	r2, [r3, #0]
    
	*GPIO_D_MODER = 0x55005555;
20000ba4:	4b06      	ldr	r3, [pc, #24]	; (20000bc0 <initKeyb+0x3c>)
20000ba6:	4a07      	ldr	r2, [pc, #28]	; (20000bc4 <initKeyb+0x40>)
20000ba8:	601a      	str	r2, [r3, #0]
}
20000baa:	46c0      	nop			; (mov r8, r8)
20000bac:	46bd      	mov	sp, r7
20000bae:	bd80      	pop	{r7, pc}
20000bb0:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000bb4:	40020c04 	andmi	r0, r2, r4, lsl #24
20000bb8:	40020c08 	andmi	r0, r2, r8, lsl #24
20000bbc:	40023830 	andmi	r3, r2, r0, lsr r8
20000bc0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000bc4:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000bc8 <return_pressed_key>:
unsigned char return_pressed_key(void)
{
20000bc8:	b590      	push	{r4, r7, lr}
20000bca:	b089      	sub	sp, #36	; 0x24
20000bcc:	af00      	add	r7, sp, #0

    int temp = *GPIO_D_MODER;
20000bce:	4b1a      	ldr	r3, [pc, #104]	; (20000c38 <return_pressed_key+0x70>)
20000bd0:	681b      	ldr	r3, [r3, #0]
20000bd2:	61bb      	str	r3, [r7, #24]

    initKeyb();
20000bd4:	f7ff ffd6 	bl	20000b84 <initKeyb>
    char key[] = 
20000bd8:	1d3b      	adds	r3, r7, #4
20000bda:	4a18      	ldr	r2, [pc, #96]	; (20000c3c <return_pressed_key+0x74>)
20000bdc:	ca13      	ldmia	r2!, {r0, r1, r4}
20000bde:	c313      	stmia	r3!, {r0, r1, r4}
20000be0:	6812      	ldr	r2, [r2, #0]
20000be2:	601a      	str	r2, [r3, #0]
    {1,2,3,0xa,4,5,6,0xb,7,8,9,0xc,0xe,0,0xf,0xd};
    int column;
    for (int row = 1 ; row <= 4; row++){
20000be4:	2301      	movs	r3, #1
20000be6:	61fb      	str	r3, [r7, #28]
20000be8:	e01a      	b.n	20000c20 <return_pressed_key+0x58>
        activateRow(row);
20000bea:	69fb      	ldr	r3, [r7, #28]
20000bec:	0018      	movs	r0, r3
20000bee:	f7ff ff65 	bl	20000abc <activateRow>
        column = readColumn();
20000bf2:	f7ff ff95 	bl	20000b20 <readColumn>
20000bf6:	0003      	movs	r3, r0
20000bf8:	617b      	str	r3, [r7, #20]
        if (column != 0){
20000bfa:	697b      	ldr	r3, [r7, #20]
20000bfc:	2b00      	cmp	r3, #0
20000bfe:	d00c      	beq.n	20000c1a <return_pressed_key+0x52>
            activateRow(600000000);
20000c00:	4b0f      	ldr	r3, [pc, #60]	; (20000c40 <return_pressed_key+0x78>)
20000c02:	0018      	movs	r0, r3
20000c04:	f7ff ff5a 	bl	20000abc <activateRow>
            return key [4*(row-1)+(column-1)];
20000c08:	69fb      	ldr	r3, [r7, #28]
20000c0a:	3b01      	subs	r3, #1
20000c0c:	009a      	lsls	r2, r3, #2
20000c0e:	697b      	ldr	r3, [r7, #20]
20000c10:	3b01      	subs	r3, #1
20000c12:	18d3      	adds	r3, r2, r3
20000c14:	1d3a      	adds	r2, r7, #4
20000c16:	5cd3      	ldrb	r3, [r2, r3]
20000c18:	e009      	b.n	20000c2e <return_pressed_key+0x66>
    for (int row = 1 ; row <= 4; row++){
20000c1a:	69fb      	ldr	r3, [r7, #28]
20000c1c:	3301      	adds	r3, #1
20000c1e:	61fb      	str	r3, [r7, #28]
20000c20:	69fb      	ldr	r3, [r7, #28]
20000c22:	2b04      	cmp	r3, #4
20000c24:	dde1      	ble.n	20000bea <return_pressed_key+0x22>
        }
    }

    *GPIO_D_MODER = temp;
20000c26:	4b04      	ldr	r3, [pc, #16]	; (20000c38 <return_pressed_key+0x70>)
20000c28:	69ba      	ldr	r2, [r7, #24]
20000c2a:	601a      	str	r2, [r3, #0]
    return  0xFF; 
20000c2c:	23ff      	movs	r3, #255	; 0xff
}
20000c2e:	0018      	movs	r0, r3
20000c30:	46bd      	mov	sp, r7
20000c32:	b009      	add	sp, #36	; 0x24
20000c34:	bd90      	pop	{r4, r7, pc}
20000c36:	46c0      	nop			; (mov r8, r8)
20000c38:	40020c00 	andmi	r0, r2, r0, lsl #24
20000c3c:	200012ec 	andcs	r1, r0, ip, ror #5
20000c40:	23c34600 	biccs	r4, r3, #0, 12

20000c44 <out7seg>:




void out7seg( unsigned char c){
20000c44:	b5b0      	push	{r4, r5, r7, lr}
20000c46:	b086      	sub	sp, #24
20000c48:	af00      	add	r7, sp, #0
20000c4a:	0002      	movs	r2, r0
20000c4c:	1dfb      	adds	r3, r7, #7
20000c4e:	701a      	strb	r2, [r3, #0]
    // siiIIick table for convertiong to 7 segment codes
    char outputTable[] = {
20000c50:	2008      	movs	r0, #8
20000c52:	183b      	adds	r3, r7, r0
20000c54:	4a0b      	ldr	r2, [pc, #44]	; (20000c84 <out7seg+0x40>)
20000c56:	ca32      	ldmia	r2!, {r1, r4, r5}
20000c58:	c332      	stmia	r3!, {r1, r4, r5}
20000c5a:	6812      	ldr	r2, [r2, #0]
20000c5c:	601a      	str	r2, [r3, #0]
	0x7C, 
	0x39, 
    0x5E, 
    0x7E, 
    0x21};
 if(c < 15){
20000c5e:	1dfb      	adds	r3, r7, #7
20000c60:	781b      	ldrb	r3, [r3, #0]
20000c62:	2b0e      	cmp	r3, #14
20000c64:	d806      	bhi.n	20000c74 <out7seg+0x30>
    *GPIO_D_ODR_LOW = outputTable[c];
20000c66:	1dfb      	adds	r3, r7, #7
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	4907      	ldr	r1, [pc, #28]	; (20000c88 <out7seg+0x44>)
20000c6c:	183a      	adds	r2, r7, r0
20000c6e:	5cd3      	ldrb	r3, [r2, r3]
20000c70:	700b      	strb	r3, [r1, #0]
 }
 else{ 
    *GPIO_D_ODR_LOW = 0;
 }
}
20000c72:	e002      	b.n	20000c7a <out7seg+0x36>
    *GPIO_D_ODR_LOW = 0;
20000c74:	4b04      	ldr	r3, [pc, #16]	; (20000c88 <out7seg+0x44>)
20000c76:	2200      	movs	r2, #0
20000c78:	701a      	strb	r2, [r3, #0]
}
20000c7a:	46c0      	nop			; (mov r8, r8)
20000c7c:	46bd      	mov	sp, r7
20000c7e:	b006      	add	sp, #24
20000c80:	bdb0      	pop	{r4, r5, r7, pc}
20000c82:	46c0      	nop			; (mov r8, r8)
20000c84:	200012fc 	strdcs	r1, [r0], -ip
20000c88:	40020c14 	andmi	r0, r2, r4, lsl ip

20000c8c <timer6_interrupt>:
#include "main.h"




void timer6_interrupt(){
20000c8c:	b580      	push	{r7, lr}
20000c8e:	af00      	add	r7, sp, #0
	*TIM6_SR &= ~UIF;
20000c90:	4b22      	ldr	r3, [pc, #136]	; (20000d1c <timer6_interrupt+0x90>)
20000c92:	681a      	ldr	r2, [r3, #0]
20000c94:	4b21      	ldr	r3, [pc, #132]	; (20000d1c <timer6_interrupt+0x90>)
20000c96:	2101      	movs	r1, #1
20000c98:	438a      	bics	r2, r1
20000c9a:	601a      	str	r2, [r3, #0]
	time.seconds++;
20000c9c:	4b20      	ldr	r3, [pc, #128]	; (20000d20 <timer6_interrupt+0x94>)
20000c9e:	681b      	ldr	r3, [r3, #0]
20000ca0:	1c5a      	adds	r2, r3, #1
20000ca2:	4b1f      	ldr	r3, [pc, #124]	; (20000d20 <timer6_interrupt+0x94>)
20000ca4:	601a      	str	r2, [r3, #0]
	if (time.seconds > 9){
20000ca6:	4b1e      	ldr	r3, [pc, #120]	; (20000d20 <timer6_interrupt+0x94>)
20000ca8:	681b      	ldr	r3, [r3, #0]
20000caa:	2b09      	cmp	r3, #9
20000cac:	dd07      	ble.n	20000cbe <timer6_interrupt+0x32>
		time.ten_seconds++;
20000cae:	4b1c      	ldr	r3, [pc, #112]	; (20000d20 <timer6_interrupt+0x94>)
20000cb0:	685b      	ldr	r3, [r3, #4]
20000cb2:	1c5a      	adds	r2, r3, #1
20000cb4:	4b1a      	ldr	r3, [pc, #104]	; (20000d20 <timer6_interrupt+0x94>)
20000cb6:	605a      	str	r2, [r3, #4]
		time.seconds = 0;
20000cb8:	4b19      	ldr	r3, [pc, #100]	; (20000d20 <timer6_interrupt+0x94>)
20000cba:	2200      	movs	r2, #0
20000cbc:	601a      	str	r2, [r3, #0]
	}
	if (time.ten_seconds > 5){
20000cbe:	4b18      	ldr	r3, [pc, #96]	; (20000d20 <timer6_interrupt+0x94>)
20000cc0:	685b      	ldr	r3, [r3, #4]
20000cc2:	2b05      	cmp	r3, #5
20000cc4:	dd04      	ble.n	20000cd0 <timer6_interrupt+0x44>
		time.minutes++;
20000cc6:	4b16      	ldr	r3, [pc, #88]	; (20000d20 <timer6_interrupt+0x94>)
20000cc8:	689b      	ldr	r3, [r3, #8]
20000cca:	1c5a      	adds	r2, r3, #1
20000ccc:	4b14      	ldr	r3, [pc, #80]	; (20000d20 <timer6_interrupt+0x94>)
20000cce:	609a      	str	r2, [r3, #8]
	}
	ascii_clear_screen();
20000cd0:	f7ff fac9 	bl	20000266 <ascii_clear_screen>
	
	print_scores();
20000cd4:	f000 f890 	bl	20000df8 <print_scores>
	ascii_gotoxy(10,1);
20000cd8:	2101      	movs	r1, #1
20000cda:	200a      	movs	r0, #10
20000cdc:	f7ff facb 	bl	20000276 <ascii_gotoxy>
	ascii_write_char(48 + time.minutes);
20000ce0:	4b0f      	ldr	r3, [pc, #60]	; (20000d20 <timer6_interrupt+0x94>)
20000ce2:	689b      	ldr	r3, [r3, #8]
20000ce4:	b2db      	uxtb	r3, r3
20000ce6:	3330      	adds	r3, #48	; 0x30
20000ce8:	b2db      	uxtb	r3, r3
20000cea:	0018      	movs	r0, r3
20000cec:	f7ff fa8f 	bl	2000020e <ascii_write_char>
	ascii_write_char(58);
20000cf0:	203a      	movs	r0, #58	; 0x3a
20000cf2:	f7ff fa8c 	bl	2000020e <ascii_write_char>
	ascii_write_char(48 + time.ten_seconds);
20000cf6:	4b0a      	ldr	r3, [pc, #40]	; (20000d20 <timer6_interrupt+0x94>)
20000cf8:	685b      	ldr	r3, [r3, #4]
20000cfa:	b2db      	uxtb	r3, r3
20000cfc:	3330      	adds	r3, #48	; 0x30
20000cfe:	b2db      	uxtb	r3, r3
20000d00:	0018      	movs	r0, r3
20000d02:	f7ff fa84 	bl	2000020e <ascii_write_char>
	ascii_write_char(48 + time.seconds);
20000d06:	4b06      	ldr	r3, [pc, #24]	; (20000d20 <timer6_interrupt+0x94>)
20000d08:	681b      	ldr	r3, [r3, #0]
20000d0a:	b2db      	uxtb	r3, r3
20000d0c:	3330      	adds	r3, #48	; 0x30
20000d0e:	b2db      	uxtb	r3, r3
20000d10:	0018      	movs	r0, r3
20000d12:	f7ff fa7c 	bl	2000020e <ascii_write_char>
}
20000d16:	46c0      	nop			; (mov r8, r8)
20000d18:	46bd      	mov	sp, r7
20000d1a:	bd80      	pop	{r7, pc}
20000d1c:	40001010 	andmi	r1, r0, r0, lsl r0
20000d20:	20001244 	andcs	r1, r0, r4, asr #4

20000d24 <collision>:
char points_player2 = 0;
char winning_score = 5;
char* winner_name;
// char timer_flag = 0;

char collision(POBJECT object1, POBJECT object2){
20000d24:	b084      	sub	sp, #16
20000d26:	b5b0      	push	{r4, r5, r7, lr}
20000d28:	b082      	sub	sp, #8
20000d2a:	af00      	add	r7, sp, #0
20000d2c:	2518      	movs	r5, #24
20000d2e:	197c      	adds	r4, r7, r5
20000d30:	6020      	str	r0, [r4, #0]
20000d32:	6061      	str	r1, [r4, #4]
20000d34:	60a2      	str	r2, [r4, #8]
20000d36:	60e3      	str	r3, [r4, #12]
	int deltax = abs(object1.posx - object2.posx);
20000d38:	0029      	movs	r1, r5
20000d3a:	187b      	adds	r3, r7, r1
20000d3c:	68da      	ldr	r2, [r3, #12]
20000d3e:	2324      	movs	r3, #36	; 0x24
20000d40:	185b      	adds	r3, r3, r1
20000d42:	19db      	adds	r3, r3, r7
20000d44:	68db      	ldr	r3, [r3, #12]
20000d46:	1ad3      	subs	r3, r2, r3
20000d48:	17da      	asrs	r2, r3, #31
20000d4a:	189b      	adds	r3, r3, r2
20000d4c:	4053      	eors	r3, r2
20000d4e:	607b      	str	r3, [r7, #4]
	int deltay = abs(object1.posy - object2.posy);
20000d50:	187b      	adds	r3, r7, r1
20000d52:	691a      	ldr	r2, [r3, #16]
20000d54:	2324      	movs	r3, #36	; 0x24
20000d56:	185b      	adds	r3, r3, r1
20000d58:	19db      	adds	r3, r3, r7
20000d5a:	691b      	ldr	r3, [r3, #16]
20000d5c:	1ad3      	subs	r3, r2, r3
20000d5e:	17da      	asrs	r2, r3, #31
20000d60:	189b      	adds	r3, r3, r2
20000d62:	4053      	eors	r3, r2
20000d64:	603b      	str	r3, [r7, #0]
	if(deltax<5 && deltay<9){
20000d66:	687b      	ldr	r3, [r7, #4]
20000d68:	2b04      	cmp	r3, #4
20000d6a:	dc04      	bgt.n	20000d76 <collision+0x52>
20000d6c:	683b      	ldr	r3, [r7, #0]
20000d6e:	2b08      	cmp	r3, #8
20000d70:	dc01      	bgt.n	20000d76 <collision+0x52>
		return 1;
20000d72:	2301      	movs	r3, #1
20000d74:	e000      	b.n	20000d78 <collision+0x54>
	}
	return 0;
20000d76:	2300      	movs	r3, #0
}
20000d78:	0018      	movs	r0, r3
20000d7a:	46bd      	mov	sp, r7
20000d7c:	b002      	add	sp, #8
20000d7e:	bcb0      	pop	{r4, r5, r7}
20000d80:	bc08      	pop	{r3}
20000d82:	b004      	add	sp, #16
20000d84:	4718      	bx	r3

20000d86 <winning_routine>:

void winning_routine(){
20000d86:	b580      	push	{r7, lr}
20000d88:	b082      	sub	sp, #8
20000d8a:	af00      	add	r7, sp, #0
	char *s = "The epic winner is: ";
20000d8c:	4b18      	ldr	r3, [pc, #96]	; (20000df0 <winning_routine+0x6a>)
20000d8e:	607b      	str	r3, [r7, #4]
	ascii_clear_screen();
20000d90:	f7ff fa69 	bl	20000266 <ascii_clear_screen>
	graphic_clear_screen();
20000d94:	f000 fa44 	bl	20001220 <graphic_clear_screen>
	ascii_gotoxy(1,1);
20000d98:	2101      	movs	r1, #1
20000d9a:	2001      	movs	r0, #1
20000d9c:	f7ff fa6b 	bl	20000276 <ascii_gotoxy>
	while(*s != 0){
20000da0:	e007      	b.n	20000db2 <winning_routine+0x2c>
		ascii_write_char(*s);
20000da2:	687b      	ldr	r3, [r7, #4]
20000da4:	781b      	ldrb	r3, [r3, #0]
20000da6:	0018      	movs	r0, r3
20000da8:	f7ff fa31 	bl	2000020e <ascii_write_char>
		s++;
20000dac:	687b      	ldr	r3, [r7, #4]
20000dae:	3301      	adds	r3, #1
20000db0:	607b      	str	r3, [r7, #4]
	while(*s != 0){
20000db2:	687b      	ldr	r3, [r7, #4]
20000db4:	781b      	ldrb	r3, [r3, #0]
20000db6:	2b00      	cmp	r3, #0
20000db8:	d1f3      	bne.n	20000da2 <winning_routine+0x1c>
	}
	ascii_gotoxy(1,2);
20000dba:	2102      	movs	r1, #2
20000dbc:	2001      	movs	r0, #1
20000dbe:	f7ff fa5a 	bl	20000276 <ascii_gotoxy>
	while(*winner_name != 0){
20000dc2:	e00a      	b.n	20000dda <winning_routine+0x54>
		ascii_write_char(*winner_name);
20000dc4:	4b0b      	ldr	r3, [pc, #44]	; (20000df4 <winning_routine+0x6e>)
20000dc6:	681b      	ldr	r3, [r3, #0]
20000dc8:	781b      	ldrb	r3, [r3, #0]
20000dca:	0018      	movs	r0, r3
20000dcc:	f7ff fa1f 	bl	2000020e <ascii_write_char>
		winner_name++;
20000dd0:	4b08      	ldr	r3, [pc, #32]	; (20000df4 <winning_routine+0x6e>)
20000dd2:	681b      	ldr	r3, [r3, #0]
20000dd4:	1c5a      	adds	r2, r3, #1
20000dd6:	4b07      	ldr	r3, [pc, #28]	; (20000df4 <winning_routine+0x6e>)
20000dd8:	601a      	str	r2, [r3, #0]
	while(*winner_name != 0){
20000dda:	4b06      	ldr	r3, [pc, #24]	; (20000df4 <winning_routine+0x6e>)
20000ddc:	681b      	ldr	r3, [r3, #0]
20000dde:	781b      	ldrb	r3, [r3, #0]
20000de0:	2b00      	cmp	r3, #0
20000de2:	d1ef      	bne.n	20000dc4 <winning_routine+0x3e>
	}
}
20000de4:	46c0      	nop			; (mov r8, r8)
20000de6:	46c0      	nop			; (mov r8, r8)
20000de8:	46bd      	mov	sp, r7
20000dea:	b002      	add	sp, #8
20000dec:	bd80      	pop	{r7, pc}
20000dee:	46c0      	nop			; (mov r8, r8)
20000df0:	2000130c 	andcs	r1, r0, ip, lsl #6
20000df4:	20001254 	andcs	r1, r0, r4, asr r2

20000df8 <print_scores>:

void print_scores(){
20000df8:	b580      	push	{r7, lr}
20000dfa:	b082      	sub	sp, #8
20000dfc:	af00      	add	r7, sp, #0
	char * string_points_player1 = "P1: ";
20000dfe:	4b1c      	ldr	r3, [pc, #112]	; (20000e70 <print_scores+0x78>)
20000e00:	607b      	str	r3, [r7, #4]
	char * string_points_player2 = "P2: ";
20000e02:	4b1c      	ldr	r3, [pc, #112]	; (20000e74 <print_scores+0x7c>)
20000e04:	603b      	str	r3, [r7, #0]

	ascii_gotoxy(1,1);
20000e06:	2101      	movs	r1, #1
20000e08:	2001      	movs	r0, #1
20000e0a:	f7ff fa34 	bl	20000276 <ascii_gotoxy>
	while (*string_points_player1 != 0) {
20000e0e:	e007      	b.n	20000e20 <print_scores+0x28>
		ascii_write_char(*string_points_player1);
20000e10:	687b      	ldr	r3, [r7, #4]
20000e12:	781b      	ldrb	r3, [r3, #0]
20000e14:	0018      	movs	r0, r3
20000e16:	f7ff f9fa 	bl	2000020e <ascii_write_char>
		string_points_player1++;
20000e1a:	687b      	ldr	r3, [r7, #4]
20000e1c:	3301      	adds	r3, #1
20000e1e:	607b      	str	r3, [r7, #4]
	while (*string_points_player1 != 0) {
20000e20:	687b      	ldr	r3, [r7, #4]
20000e22:	781b      	ldrb	r3, [r3, #0]
20000e24:	2b00      	cmp	r3, #0
20000e26:	d1f3      	bne.n	20000e10 <print_scores+0x18>
	}
	ascii_write_char(points_player1+0x30);
20000e28:	4b13      	ldr	r3, [pc, #76]	; (20000e78 <print_scores+0x80>)
20000e2a:	781b      	ldrb	r3, [r3, #0]
20000e2c:	3330      	adds	r3, #48	; 0x30
20000e2e:	b2db      	uxtb	r3, r3
20000e30:	0018      	movs	r0, r3
20000e32:	f7ff f9ec 	bl	2000020e <ascii_write_char>

	ascii_gotoxy(1,2);
20000e36:	2102      	movs	r1, #2
20000e38:	2001      	movs	r0, #1
20000e3a:	f7ff fa1c 	bl	20000276 <ascii_gotoxy>
	while(*string_points_player2 != 0){
20000e3e:	e007      	b.n	20000e50 <print_scores+0x58>
		ascii_write_char(*string_points_player2);
20000e40:	683b      	ldr	r3, [r7, #0]
20000e42:	781b      	ldrb	r3, [r3, #0]
20000e44:	0018      	movs	r0, r3
20000e46:	f7ff f9e2 	bl	2000020e <ascii_write_char>
		string_points_player2++;
20000e4a:	683b      	ldr	r3, [r7, #0]
20000e4c:	3301      	adds	r3, #1
20000e4e:	603b      	str	r3, [r7, #0]
	while(*string_points_player2 != 0){
20000e50:	683b      	ldr	r3, [r7, #0]
20000e52:	781b      	ldrb	r3, [r3, #0]
20000e54:	2b00      	cmp	r3, #0
20000e56:	d1f3      	bne.n	20000e40 <print_scores+0x48>
	}
	ascii_write_char(points_player2+0x30);
20000e58:	4b08      	ldr	r3, [pc, #32]	; (20000e7c <print_scores+0x84>)
20000e5a:	781b      	ldrb	r3, [r3, #0]
20000e5c:	3330      	adds	r3, #48	; 0x30
20000e5e:	b2db      	uxtb	r3, r3
20000e60:	0018      	movs	r0, r3
20000e62:	f7ff f9d4 	bl	2000020e <ascii_write_char>

	// ascii_write_text_at(points_player1, 1, 1);
	// ascii_write_text_at(string_points_player2, 1, 7);
}
20000e66:	46c0      	nop			; (mov r8, r8)
20000e68:	46bd      	mov	sp, r7
20000e6a:	b002      	add	sp, #8
20000e6c:	bd80      	pop	{r7, pc}
20000e6e:	46c0      	nop			; (mov r8, r8)
20000e70:	20001324 	andcs	r1, r0, r4, lsr #6
20000e74:	2000132c 	andcs	r1, r0, ip, lsr #6
20000e78:	20001250 	andcs	r1, r0, r0, asr r2
20000e7c:	20001251 	andcs	r1, r0, r1, asr r2

20000e80 <app_init>:

void app_init(){
20000e80:	b580      	push	{r7, lr}
20000e82:	af00      	add	r7, sp, #0
	ascii_init();
20000e84:	f7ff f9de 	bl	20000244 <ascii_init>
	*GPIO_E_MODER = 0x55555555;
20000e88:	4b08      	ldr	r3, [pc, #32]	; (20000eac <app_init+0x2c>)
20000e8a:	4a09      	ldr	r2, [pc, #36]	; (20000eb0 <app_init+0x30>)
20000e8c:	601a      	str	r2, [r3, #0]
	*GPIO_E_OTYPER = 0x0;
20000e8e:	4b09      	ldr	r3, [pc, #36]	; (20000eb4 <app_init+0x34>)
20000e90:	2200      	movs	r2, #0
20000e92:	801a      	strh	r2, [r3, #0]
    *GPIO_E_OSPEEDR = 0xffffffff;
20000e94:	4b08      	ldr	r3, [pc, #32]	; (20000eb8 <app_init+0x38>)
20000e96:	2201      	movs	r2, #1
20000e98:	4252      	negs	r2, r2
20000e9a:	601a      	str	r2, [r3, #0]
	graphic_initialize();
20000e9c:	f000 f9bd 	bl	2000121a <graphic_initialize>
	graphic_clear_screen();
20000ea0:	f000 f9be 	bl	20001220 <graphic_clear_screen>
}
20000ea4:	46c0      	nop			; (mov r8, r8)
20000ea6:	46bd      	mov	sp, r7
20000ea8:	bd80      	pop	{r7, pc}
20000eaa:	46c0      	nop			; (mov r8, r8)
20000eac:	40021000 	andmi	r1, r2, r0
20000eb0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000eb4:	40021004 	andmi	r1, r2, r4
20000eb8:	40021008 	andmi	r1, r2, r8

20000ebc <singleGame>:

void singleGame(POBJECT paddle1, POBJECT paddle2){
20000ebc:	b084      	sub	sp, #16
20000ebe:	b5b0      	push	{r4, r5, r7, lr}
20000ec0:	b098      	sub	sp, #96	; 0x60
20000ec2:	af0e      	add	r7, sp, #56	; 0x38
20000ec4:	2438      	movs	r4, #56	; 0x38
20000ec6:	193c      	adds	r4, r7, r4
20000ec8:	6020      	str	r0, [r4, #0]
20000eca:	6061      	str	r1, [r4, #4]
20000ecc:	60a2      	str	r2, [r4, #8]
20000ece:	60e3      	str	r3, [r4, #12]
	unsigned char c = 0xff;
20000ed0:	2327      	movs	r3, #39	; 0x27
20000ed2:	18fb      	adds	r3, r7, r3
20000ed4:	22ff      	movs	r2, #255	; 0xff
20000ed6:	701a      	strb	r2, [r3, #0]
	POBJECT ball = create_ballobject(1,1);
20000ed8:	003b      	movs	r3, r7
20000eda:	2201      	movs	r2, #1
20000edc:	2101      	movs	r1, #1
20000ede:	0018      	movs	r0, r3
20000ee0:	f7ff fb01 	bl	200004e6 <create_ballobject>
	ball.set_speed(&ball, 4,1);
20000ee4:	003b      	movs	r3, r7
20000ee6:	6a1b      	ldr	r3, [r3, #32]
20000ee8:	0038      	movs	r0, r7
20000eea:	2201      	movs	r2, #1
20000eec:	2104      	movs	r1, #4
20000eee:	4798      	blx	r3
	// POBJECT paddle1 = create_paddleobject(100, 32);
	// POBJECT paddle2 = create_paddleobject(28, 32);
	print_scores();
20000ef0:	f7ff ff82 	bl	20000df8 <print_scores>
	timer6_init();
20000ef4:	f7ff fb68 	bl	200005c8 <timer6_init>
	while(1){
		paddle1.move(&paddle1);
20000ef8:	2438      	movs	r4, #56	; 0x38
20000efa:	193b      	adds	r3, r7, r4
20000efc:	69da      	ldr	r2, [r3, #28]
20000efe:	193b      	adds	r3, r7, r4
20000f00:	0018      	movs	r0, r3
20000f02:	4790      	blx	r2
		paddle2.move(&paddle2);
20000f04:	2324      	movs	r3, #36	; 0x24
20000f06:	191b      	adds	r3, r3, r4
20000f08:	19db      	adds	r3, r3, r7
20000f0a:	69db      	ldr	r3, [r3, #28]
20000f0c:	225c      	movs	r2, #92	; 0x5c
20000f0e:	18ba      	adds	r2, r7, r2
20000f10:	0010      	movs	r0, r2
20000f12:	4798      	blx	r3
		ball.move(&ball);
20000f14:	003b      	movs	r3, r7
20000f16:	69db      	ldr	r3, [r3, #28]
20000f18:	003a      	movs	r2, r7
20000f1a:	0010      	movs	r0, r2
20000f1c:	4798      	blx	r3
		c = return_pressed_key();
20000f1e:	2527      	movs	r5, #39	; 0x27
20000f20:	197c      	adds	r4, r7, r5
20000f22:	f7ff fe51 	bl	20000bc8 <return_pressed_key>
20000f26:	0003      	movs	r3, r0
20000f28:	7023      	strb	r3, [r4, #0]
		switch(c){
20000f2a:	197b      	adds	r3, r7, r5
20000f2c:	781b      	ldrb	r3, [r3, #0]
20000f2e:	2b09      	cmp	r3, #9
20000f30:	dc08      	bgt.n	20000f44 <singleGame+0x88>
20000f32:	2b00      	cmp	r3, #0
20000f34:	dd58      	ble.n	20000fe8 <singleGame+0x12c>
20000f36:	2b09      	cmp	r3, #9
20000f38:	d856      	bhi.n	20000fe8 <singleGame+0x12c>
20000f3a:	009a      	lsls	r2, r3, #2
20000f3c:	4b88      	ldr	r3, [pc, #544]	; (20001160 <singleGame+0x2a4>)
20000f3e:	18d3      	adds	r3, r2, r3
20000f40:	681b      	ldr	r3, [r3, #0]
20000f42:	469f      	mov	pc, r3
20000f44:	2bff      	cmp	r3, #255	; 0xff
20000f46:	d046      	beq.n	20000fd6 <singleGame+0x11a>
20000f48:	e04e      	b.n	20000fe8 <singleGame+0x12c>
			case 1: paddle2.set_speed(&paddle2, 0,-3); break;
20000f4a:	2324      	movs	r3, #36	; 0x24
20000f4c:	2238      	movs	r2, #56	; 0x38
20000f4e:	189b      	adds	r3, r3, r2
20000f50:	19db      	adds	r3, r3, r7
20000f52:	6a1b      	ldr	r3, [r3, #32]
20000f54:	2203      	movs	r2, #3
20000f56:	4252      	negs	r2, r2
20000f58:	215c      	movs	r1, #92	; 0x5c
20000f5a:	1878      	adds	r0, r7, r1
20000f5c:	2100      	movs	r1, #0
20000f5e:	4798      	blx	r3
20000f60:	e042      	b.n	20000fe8 <singleGame+0x12c>
			case 7: paddle2.set_speed(&paddle2,0,3);break;
20000f62:	2324      	movs	r3, #36	; 0x24
20000f64:	2238      	movs	r2, #56	; 0x38
20000f66:	189b      	adds	r3, r3, r2
20000f68:	19db      	adds	r3, r3, r7
20000f6a:	6a1b      	ldr	r3, [r3, #32]
20000f6c:	225c      	movs	r2, #92	; 0x5c
20000f6e:	18b8      	adds	r0, r7, r2
20000f70:	2203      	movs	r2, #3
20000f72:	2100      	movs	r1, #0
20000f74:	4798      	blx	r3
20000f76:	e037      	b.n	20000fe8 <singleGame+0x12c>
			case 3: paddle1.set_speed(&paddle1, 0,-3); break;
20000f78:	2138      	movs	r1, #56	; 0x38
20000f7a:	187b      	adds	r3, r7, r1
20000f7c:	6a1c      	ldr	r4, [r3, #32]
20000f7e:	2303      	movs	r3, #3
20000f80:	425a      	negs	r2, r3
20000f82:	187b      	adds	r3, r7, r1
20000f84:	2100      	movs	r1, #0
20000f86:	0018      	movs	r0, r3
20000f88:	47a0      	blx	r4
20000f8a:	e02d      	b.n	20000fe8 <singleGame+0x12c>
			case 9: paddle1.set_speed(&paddle1,0,3);break;
20000f8c:	2238      	movs	r2, #56	; 0x38
20000f8e:	18bb      	adds	r3, r7, r2
20000f90:	6a1c      	ldr	r4, [r3, #32]
20000f92:	18bb      	adds	r3, r7, r2
20000f94:	2203      	movs	r2, #3
20000f96:	2100      	movs	r1, #0
20000f98:	0018      	movs	r0, r3
20000f9a:	47a0      	blx	r4
20000f9c:	e024      	b.n	20000fe8 <singleGame+0x12c>
			case 6: singleGame(paddle1, paddle2); break;
20000f9e:	2138      	movs	r1, #56	; 0x38
20000fa0:	187b      	adds	r3, r7, r1
20000fa2:	2224      	movs	r2, #36	; 0x24
20000fa4:	1852      	adds	r2, r2, r1
20000fa6:	19d1      	adds	r1, r2, r7
20000fa8:	2214      	movs	r2, #20
20000faa:	446a      	add	r2, sp
20000fac:	c931      	ldmia	r1!, {r0, r4, r5}
20000fae:	c231      	stmia	r2!, {r0, r4, r5}
20000fb0:	c931      	ldmia	r1!, {r0, r4, r5}
20000fb2:	c231      	stmia	r2!, {r0, r4, r5}
20000fb4:	c931      	ldmia	r1!, {r0, r4, r5}
20000fb6:	c231      	stmia	r2!, {r0, r4, r5}
20000fb8:	466a      	mov	r2, sp
20000fba:	0011      	movs	r1, r2
20000fbc:	001a      	movs	r2, r3
20000fbe:	3210      	adds	r2, #16
20000fc0:	ca31      	ldmia	r2!, {r0, r4, r5}
20000fc2:	c131      	stmia	r1!, {r0, r4, r5}
20000fc4:	ca11      	ldmia	r2!, {r0, r4}
20000fc6:	c111      	stmia	r1!, {r0, r4}
20000fc8:	6818      	ldr	r0, [r3, #0]
20000fca:	6859      	ldr	r1, [r3, #4]
20000fcc:	689a      	ldr	r2, [r3, #8]
20000fce:	68db      	ldr	r3, [r3, #12]
20000fd0:	f7ff ff74 	bl	20000ebc <singleGame>
20000fd4:	e008      	b.n	20000fe8 <singleGame+0x12c>
			case 0xff: paddle1.set_speed(&paddle1, 0,0);break;
20000fd6:	2238      	movs	r2, #56	; 0x38
20000fd8:	18bb      	adds	r3, r7, r2
20000fda:	6a1c      	ldr	r4, [r3, #32]
20000fdc:	18bb      	adds	r3, r7, r2
20000fde:	2200      	movs	r2, #0
20000fe0:	2100      	movs	r1, #0
20000fe2:	0018      	movs	r0, r3
20000fe4:	47a0      	blx	r4
20000fe6:	46c0      	nop			; (mov r8, r8)
		}




		if(collision(paddle1, ball)){
20000fe8:	2338      	movs	r3, #56	; 0x38
20000fea:	18fb      	adds	r3, r7, r3
20000fec:	0039      	movs	r1, r7
20000fee:	2214      	movs	r2, #20
20000ff0:	446a      	add	r2, sp
20000ff2:	c931      	ldmia	r1!, {r0, r4, r5}
20000ff4:	c231      	stmia	r2!, {r0, r4, r5}
20000ff6:	c931      	ldmia	r1!, {r0, r4, r5}
20000ff8:	c231      	stmia	r2!, {r0, r4, r5}
20000ffa:	c931      	ldmia	r1!, {r0, r4, r5}
20000ffc:	c231      	stmia	r2!, {r0, r4, r5}
20000ffe:	466a      	mov	r2, sp
20001000:	0011      	movs	r1, r2
20001002:	001a      	movs	r2, r3
20001004:	3210      	adds	r2, #16
20001006:	ca31      	ldmia	r2!, {r0, r4, r5}
20001008:	c131      	stmia	r1!, {r0, r4, r5}
2000100a:	ca11      	ldmia	r2!, {r0, r4}
2000100c:	c111      	stmia	r1!, {r0, r4}
2000100e:	6818      	ldr	r0, [r3, #0]
20001010:	6859      	ldr	r1, [r3, #4]
20001012:	689a      	ldr	r2, [r3, #8]
20001014:	68db      	ldr	r3, [r3, #12]
20001016:	f7ff fe85 	bl	20000d24 <collision>
2000101a:	1e03      	subs	r3, r0, #0
2000101c:	d004      	beq.n	20001028 <singleGame+0x16c>
				ball.dirx = -ball.dirx;
2000101e:	003b      	movs	r3, r7
20001020:	685b      	ldr	r3, [r3, #4]
20001022:	425a      	negs	r2, r3
20001024:	003b      	movs	r3, r7
20001026:	605a      	str	r2, [r3, #4]
			}
		if(collision(paddle2, ball)){
20001028:	2324      	movs	r3, #36	; 0x24
2000102a:	2238      	movs	r2, #56	; 0x38
2000102c:	189b      	adds	r3, r3, r2
2000102e:	19dc      	adds	r4, r3, r7
20001030:	003a      	movs	r2, r7
20001032:	2314      	movs	r3, #20
20001034:	446b      	add	r3, sp
20001036:	ca23      	ldmia	r2!, {r0, r1, r5}
20001038:	c323      	stmia	r3!, {r0, r1, r5}
2000103a:	ca23      	ldmia	r2!, {r0, r1, r5}
2000103c:	c323      	stmia	r3!, {r0, r1, r5}
2000103e:	ca23      	ldmia	r2!, {r0, r1, r5}
20001040:	c323      	stmia	r3!, {r0, r1, r5}
20001042:	466b      	mov	r3, sp
20001044:	001a      	movs	r2, r3
20001046:	0023      	movs	r3, r4
20001048:	3310      	adds	r3, #16
2000104a:	cb23      	ldmia	r3!, {r0, r1, r5}
2000104c:	c223      	stmia	r2!, {r0, r1, r5}
2000104e:	cb03      	ldmia	r3!, {r0, r1}
20001050:	c203      	stmia	r2!, {r0, r1}
20001052:	6820      	ldr	r0, [r4, #0]
20001054:	6861      	ldr	r1, [r4, #4]
20001056:	68a2      	ldr	r2, [r4, #8]
20001058:	68e3      	ldr	r3, [r4, #12]
2000105a:	f7ff fe63 	bl	20000d24 <collision>
2000105e:	1e03      	subs	r3, r0, #0
20001060:	d004      	beq.n	2000106c <singleGame+0x1b0>
				ball.dirx = -ball.dirx;
20001062:	003b      	movs	r3, r7
20001064:	685b      	ldr	r3, [r3, #4]
20001066:	425a      	negs	r2, r3
20001068:	003b      	movs	r3, r7
2000106a:	605a      	str	r2, [r3, #4]
			}
		if(ball.posx >= 128){
2000106c:	003b      	movs	r3, r7
2000106e:	68db      	ldr	r3, [r3, #12]
20001070:	2b7f      	cmp	r3, #127	; 0x7f
20001072:	dd22      	ble.n	200010ba <singleGame+0x1fe>
			points_player1++;
20001074:	4b3b      	ldr	r3, [pc, #236]	; (20001164 <singleGame+0x2a8>)
20001076:	781b      	ldrb	r3, [r3, #0]
20001078:	3301      	adds	r3, #1
2000107a:	b2da      	uxtb	r2, r3
2000107c:	4b39      	ldr	r3, [pc, #228]	; (20001164 <singleGame+0x2a8>)
2000107e:	701a      	strb	r2, [r3, #0]
			print_scores();
20001080:	f7ff feba 	bl	20000df8 <print_scores>
			singleGame(paddle1, paddle2);
20001084:	2138      	movs	r1, #56	; 0x38
20001086:	187b      	adds	r3, r7, r1
20001088:	2224      	movs	r2, #36	; 0x24
2000108a:	1852      	adds	r2, r2, r1
2000108c:	19d1      	adds	r1, r2, r7
2000108e:	2214      	movs	r2, #20
20001090:	446a      	add	r2, sp
20001092:	c931      	ldmia	r1!, {r0, r4, r5}
20001094:	c231      	stmia	r2!, {r0, r4, r5}
20001096:	c931      	ldmia	r1!, {r0, r4, r5}
20001098:	c231      	stmia	r2!, {r0, r4, r5}
2000109a:	c931      	ldmia	r1!, {r0, r4, r5}
2000109c:	c231      	stmia	r2!, {r0, r4, r5}
2000109e:	466a      	mov	r2, sp
200010a0:	0011      	movs	r1, r2
200010a2:	001a      	movs	r2, r3
200010a4:	3210      	adds	r2, #16
200010a6:	ca31      	ldmia	r2!, {r0, r4, r5}
200010a8:	c131      	stmia	r1!, {r0, r4, r5}
200010aa:	ca11      	ldmia	r2!, {r0, r4}
200010ac:	c111      	stmia	r1!, {r0, r4}
200010ae:	6818      	ldr	r0, [r3, #0]
200010b0:	6859      	ldr	r1, [r3, #4]
200010b2:	689a      	ldr	r2, [r3, #8]
200010b4:	68db      	ldr	r3, [r3, #12]
200010b6:	f7ff ff01 	bl	20000ebc <singleGame>
		}
		if(ball.posx <= 0){
200010ba:	003b      	movs	r3, r7
200010bc:	68db      	ldr	r3, [r3, #12]
200010be:	2b00      	cmp	r3, #0
200010c0:	dc22      	bgt.n	20001108 <singleGame+0x24c>
			points_player2++;
200010c2:	4b29      	ldr	r3, [pc, #164]	; (20001168 <singleGame+0x2ac>)
200010c4:	781b      	ldrb	r3, [r3, #0]
200010c6:	3301      	adds	r3, #1
200010c8:	b2da      	uxtb	r2, r3
200010ca:	4b27      	ldr	r3, [pc, #156]	; (20001168 <singleGame+0x2ac>)
200010cc:	701a      	strb	r2, [r3, #0]
			print_scores();
200010ce:	f7ff fe93 	bl	20000df8 <print_scores>
			singleGame(paddle1 ,paddle2);
200010d2:	2138      	movs	r1, #56	; 0x38
200010d4:	187b      	adds	r3, r7, r1
200010d6:	2224      	movs	r2, #36	; 0x24
200010d8:	1852      	adds	r2, r2, r1
200010da:	19d1      	adds	r1, r2, r7
200010dc:	2214      	movs	r2, #20
200010de:	446a      	add	r2, sp
200010e0:	c931      	ldmia	r1!, {r0, r4, r5}
200010e2:	c231      	stmia	r2!, {r0, r4, r5}
200010e4:	c931      	ldmia	r1!, {r0, r4, r5}
200010e6:	c231      	stmia	r2!, {r0, r4, r5}
200010e8:	c931      	ldmia	r1!, {r0, r4, r5}
200010ea:	c231      	stmia	r2!, {r0, r4, r5}
200010ec:	466a      	mov	r2, sp
200010ee:	0011      	movs	r1, r2
200010f0:	001a      	movs	r2, r3
200010f2:	3210      	adds	r2, #16
200010f4:	ca31      	ldmia	r2!, {r0, r4, r5}
200010f6:	c131      	stmia	r1!, {r0, r4, r5}
200010f8:	ca11      	ldmia	r2!, {r0, r4}
200010fa:	c111      	stmia	r1!, {r0, r4}
200010fc:	6818      	ldr	r0, [r3, #0]
200010fe:	6859      	ldr	r1, [r3, #4]
20001100:	689a      	ldr	r2, [r3, #8]
20001102:	68db      	ldr	r3, [r3, #12]
20001104:	f7ff feda 	bl	20000ebc <singleGame>
		}
		if(time.seconds+time.ten_seconds*10 >= 10){
20001108:	4b18      	ldr	r3, [pc, #96]	; (2000116c <singleGame+0x2b0>)
2000110a:	6819      	ldr	r1, [r3, #0]
2000110c:	4b17      	ldr	r3, [pc, #92]	; (2000116c <singleGame+0x2b0>)
2000110e:	685a      	ldr	r2, [r3, #4]
20001110:	0013      	movs	r3, r2
20001112:	009b      	lsls	r3, r3, #2
20001114:	189b      	adds	r3, r3, r2
20001116:	005b      	lsls	r3, r3, #1
20001118:	18cb      	adds	r3, r1, r3
2000111a:	2b09      	cmp	r3, #9
2000111c:	dc00      	bgt.n	20001120 <singleGame+0x264>
2000111e:	e6eb      	b.n	20000ef8 <singleGame+0x3c>
			if(points_player1 > points_player2){
20001120:	4b10      	ldr	r3, [pc, #64]	; (20001164 <singleGame+0x2a8>)
20001122:	781a      	ldrb	r2, [r3, #0]
20001124:	4b10      	ldr	r3, [pc, #64]	; (20001168 <singleGame+0x2ac>)
20001126:	781b      	ldrb	r3, [r3, #0]
20001128:	429a      	cmp	r2, r3
2000112a:	d905      	bls.n	20001138 <singleGame+0x27c>
				winner_name = "Player 1";
2000112c:	4b10      	ldr	r3, [pc, #64]	; (20001170 <singleGame+0x2b4>)
2000112e:	4a11      	ldr	r2, [pc, #68]	; (20001174 <singleGame+0x2b8>)
20001130:	601a      	str	r2, [r3, #0]
				winning_routine();
20001132:	f7ff fe28 	bl	20000d86 <winning_routine>
				break;
20001136:	e00b      	b.n	20001150 <singleGame+0x294>
			}else if(points_player2 > points_player1){
20001138:	4b0b      	ldr	r3, [pc, #44]	; (20001168 <singleGame+0x2ac>)
2000113a:	781a      	ldrb	r2, [r3, #0]
2000113c:	4b09      	ldr	r3, [pc, #36]	; (20001164 <singleGame+0x2a8>)
2000113e:	781b      	ldrb	r3, [r3, #0]
20001140:	429a      	cmp	r2, r3
20001142:	d800      	bhi.n	20001146 <singleGame+0x28a>
20001144:	e6d8      	b.n	20000ef8 <singleGame+0x3c>
				winner_name = "Player 2";
20001146:	4b0a      	ldr	r3, [pc, #40]	; (20001170 <singleGame+0x2b4>)
20001148:	4a0b      	ldr	r2, [pc, #44]	; (20001178 <singleGame+0x2bc>)
2000114a:	601a      	str	r2, [r3, #0]
				winning_routine();
2000114c:	f7ff fe1b 	bl	20000d86 <winning_routine>
		// else if(get_timer_flag() == 1){
		// 	break;
		// }
		
	}		
}		
20001150:	46c0      	nop			; (mov r8, r8)
20001152:	46bd      	mov	sp, r7
20001154:	b00a      	add	sp, #40	; 0x28
20001156:	bcb0      	pop	{r4, r5, r7}
20001158:	bc08      	pop	{r3}
2000115a:	b004      	add	sp, #16
2000115c:	4718      	bx	r3
2000115e:	46c0      	nop			; (mov r8, r8)
20001160:	2000134c 	andcs	r1, r0, ip, asr #6
20001164:	20001250 	andcs	r1, r0, r0, asr r2
20001168:	20001251 	andcs	r1, r0, r1, asr r2
2000116c:	20001244 	andcs	r1, r0, r4, asr #4
20001170:	20001254 	andcs	r1, r0, r4, asr r2
20001174:	20001334 	andcs	r1, r0, r4, lsr r3
20001178:	20001340 	andcs	r1, r0, r0, asr #6

2000117c <main>:




//main for singlepong
void main(void) {
2000117c:	b5b0      	push	{r4, r5, r7, lr}
2000117e:	b0aa      	sub	sp, #168	; 0xa8
20001180:	af0e      	add	r7, sp, #56	; 0x38

	app_init();
20001182:	f7ff fe7d 	bl	20000e80 <app_init>
	unsigned char c = 0xff;
20001186:	236f      	movs	r3, #111	; 0x6f
20001188:	18fb      	adds	r3, r7, r3
2000118a:	22ff      	movs	r2, #255	; 0xff
2000118c:	701a      	strb	r2, [r3, #0]
	POBJECT ball = create_ballobject(1,1);
2000118e:	2448      	movs	r4, #72	; 0x48
20001190:	193b      	adds	r3, r7, r4
20001192:	2201      	movs	r2, #1
20001194:	2101      	movs	r1, #1
20001196:	0018      	movs	r0, r3
20001198:	f7ff f9a5 	bl	200004e6 <create_ballobject>
	ball.set_speed(&ball, 4,1);
2000119c:	0022      	movs	r2, r4
2000119e:	18bb      	adds	r3, r7, r2
200011a0:	6a1b      	ldr	r3, [r3, #32]
200011a2:	18b8      	adds	r0, r7, r2
200011a4:	2201      	movs	r2, #1
200011a6:	2104      	movs	r1, #4
200011a8:	4798      	blx	r3
	POBJECT paddle1 = create_paddleobject(100, 32);
200011aa:	2424      	movs	r4, #36	; 0x24
200011ac:	193b      	adds	r3, r7, r4
200011ae:	2220      	movs	r2, #32
200011b0:	2164      	movs	r1, #100	; 0x64
200011b2:	0018      	movs	r0, r3
200011b4:	f7ff f9d0 	bl	20000558 <create_paddleobject>
	POBJECT paddle2 = create_paddleobject(28, 32);
200011b8:	003b      	movs	r3, r7
200011ba:	2220      	movs	r2, #32
200011bc:	211c      	movs	r1, #28
200011be:	0018      	movs	r0, r3
200011c0:	f7ff f9ca 	bl	20000558 <create_paddleobject>
	singleGame(paddle1, paddle2);	
200011c4:	193c      	adds	r4, r7, r4
200011c6:	003a      	movs	r2, r7
200011c8:	2314      	movs	r3, #20
200011ca:	446b      	add	r3, sp
200011cc:	ca23      	ldmia	r2!, {r0, r1, r5}
200011ce:	c323      	stmia	r3!, {r0, r1, r5}
200011d0:	ca23      	ldmia	r2!, {r0, r1, r5}
200011d2:	c323      	stmia	r3!, {r0, r1, r5}
200011d4:	ca23      	ldmia	r2!, {r0, r1, r5}
200011d6:	c323      	stmia	r3!, {r0, r1, r5}
200011d8:	466b      	mov	r3, sp
200011da:	001a      	movs	r2, r3
200011dc:	0023      	movs	r3, r4
200011de:	3310      	adds	r3, #16
200011e0:	cb23      	ldmia	r3!, {r0, r1, r5}
200011e2:	c223      	stmia	r2!, {r0, r1, r5}
200011e4:	cb03      	ldmia	r3!, {r0, r1}
200011e6:	c203      	stmia	r2!, {r0, r1}
200011e8:	6820      	ldr	r0, [r4, #0]
200011ea:	6861      	ldr	r1, [r4, #4]
200011ec:	68a2      	ldr	r2, [r4, #8]
200011ee:	68e3      	ldr	r3, [r4, #12]
200011f0:	f7ff fe64 	bl	20000ebc <singleGame>
200011f4:	46c0      	nop			; (mov r8, r8)
200011f6:	46bd      	mov	sp, r7
200011f8:	b01c      	add	sp, #112	; 0x70
200011fa:	bdb0      	pop	{r4, r5, r7, pc}

200011fc <abs>:
#include "math.h"



int abs(int num){
200011fc:	b580      	push	{r7, lr}
200011fe:	b082      	sub	sp, #8
20001200:	af00      	add	r7, sp, #0
20001202:	6078      	str	r0, [r7, #4]
    if(num < 0  ){
20001204:	687b      	ldr	r3, [r7, #4]
20001206:	2b00      	cmp	r3, #0
20001208:	da02      	bge.n	20001210 <abs+0x14>
        return -num;
2000120a:	687b      	ldr	r3, [r7, #4]
2000120c:	425b      	negs	r3, r3
2000120e:	e000      	b.n	20001212 <abs+0x16>
    }
    return num;
20001210:	687b      	ldr	r3, [r7, #4]
}
20001212:	0018      	movs	r0, r3
20001214:	46bd      	mov	sp, r7
20001216:	b002      	add	sp, #8
20001218:	bd80      	pop	{r7, pc}

2000121a <graphic_initialize>:





__attribute__((naked)) void graphic_initialize(){
2000121a:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm__ volatile(".HWORD  0xDFF0\n");
	__asm__ volatile("BX LR\n");
}
2000121e:	46c0      	nop			; (mov r8, r8)

20001220 <graphic_clear_screen>:


__attribute__((naked)) void graphic_clear_screen(){
20001220:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm__ volatile(".HWORD  0xDFF1\n");
	__asm__ volatile("BX LR\n");
}
20001224:	46c0      	nop			; (mov r8, r8)

20001226 <graphic_pixel_set>:

__attribute__((naked)) void graphic_pixel_set(int x, int y){	
20001226:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm__ volatile(".HWORD  0xDFF2\n");
	__asm__ volatile("BX LR\n");
}
2000122a:	46c0      	nop			; (mov r8, r8)

2000122c <graphic_pixel_clear>:


__attribute__((naked)) void graphic_pixel_clear(int x, int y){
2000122c:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm__ volatile(".HWORD  0xDFF3\n");
	__asm__ volatile("BX LR\n");
20001230:	46c0      	nop			; (mov r8, r8)
	...

20001234 <time>:
	...

20001240 <seconds>:
	...

20001241 <ten_seconds>:
	...

20001242 <minutes>:
	...

20001244 <time>:
	...

20001250 <points_player1>:
	...

20001251 <points_player2>:
20001251:	 	andeq	r0, r0, r0

20001254 <winner_name>:
20001254:	00000000 	andeq	r0, r0, r0

20001258 <ball_geometry>:
20001258:	0000000c 	andeq	r0, r0, ip
2000125c:	00000004 	andeq	r0, r0, r4
20001260:	00000004 	andeq	r0, r0, r4
20001264:	02000100 	andeq	r0, r0, #0, 2
20001268:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
2000126c:	00020301 	andeq	r0, r2, r1, lsl #6
20001270:	02020102 	andeq	r0, r2, #-2147483648	; 0x80000000
20001274:	01030302 	tsteq	r3, r2, lsl #6
20001278:	00000203 	andeq	r0, r0, r3, lsl #4
	...

200012a0 <paddle_geometry>:
200012a0:	0000001b 	andeq	r0, r0, fp, lsl r0
200012a4:	00000005 	andeq	r0, r0, r5
200012a8:	00000009 	andeq	r0, r0, r9
200012ac:	00010000 	andeq	r0, r1, r0
200012b0:	00030002 	andeq	r0, r3, r2
200012b4:	01000004 	tsteq	r0, r4
200012b8:	03000200 	movweq	r0, #512	; 0x200
200012bc:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
200012c0:	07000600 	streq	r0, [r0, -r0, lsl #12]
200012c4:	08010800 	stmdaeq	r1, {fp}
200012c8:	08030802 	stmdaeq	r3, {r1, fp}
200012cc:	07040804 	streq	r0, [r4, -r4, lsl #16]
200012d0:	05040604 	streq	r0, [r4, #-1540]	; 0xfffff9fc
200012d4:	03040404 	movweq	r0, #17412	; 0x4404
200012d8:	01040204 	tsteq	r4, r4, lsl #4
200012dc:	04020302 	streq	r0, [r2], #-770	; 0xfffffcfe
200012e0:	00000502 	andeq	r0, r0, r2, lsl #10
200012e4:	00000000 	andeq	r0, r0, r0

200012e8 <winning_score>:
200012e8:	00000005 	andeq	r0, r0, r5
200012ec:	0a030201 	beq	200c1af8 <winning_score+0xc0810>
200012f0:	0b060504 	bleq	20182708 <winning_score+0x181420>
200012f4:	0c090807 	stceq	8, cr0, [r9], {7}
200012f8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200012c8 <paddle_geometry+0x28>
200012fc:	4f5b063f 	svcmi	0x005b063f
20001300:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001304:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001308:	217e5e39 	cmncs	lr, r9, lsr lr
2000130c:	20656854 	rsbcs	r6, r5, r4, asr r8
20001310:	63697065 	cmnvs	r9, #101	; 0x65
20001314:	6e697720 	cdpvs	7, 6, cr7, cr9, cr0, {1}
20001318:	2072656e 	rsbscs	r6, r2, lr, ror #10
2000131c:	203a7369 	eorscs	r7, sl, r9, ror #6
20001320:	00000000 	andeq	r0, r0, r0
20001324:	203a3150 	eorscs	r3, sl, r0, asr r1
20001328:	00000000 	andeq	r0, r0, r0
2000132c:	203a3250 	eorscs	r3, sl, r0, asr r2
20001330:	00000000 	andeq	r0, r0, r0
20001334:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001338:	31207265 			; <UNDEFINED> instruction: 0x31207265
2000133c:	00000000 	andeq	r0, r0, r0
20001340:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001344:	32207265 	eorcc	r7, r0, #1342177286	; 0x50000006
20001348:	00000000 	andeq	r0, r0, r0
2000134c:	20000fe8 	andcs	r0, r0, r8, ror #31
20001350:	20000f4a 	andcs	r0, r0, sl, asr #30
20001354:	20000fe8 	andcs	r0, r0, r8, ror #31
20001358:	20000f78 	andcs	r0, r0, r8, ror pc
2000135c:	20000fe8 	andcs	r0, r0, r8, ror #31
20001360:	20000fe8 	andcs	r0, r0, r8, ror #31
20001364:	20000f9e 	mulcs	r0, lr, pc	; <UNPREDICTABLE>
20001368:	20000f62 	andcs	r0, r0, r2, ror #30
2000136c:	20000fe8 	andcs	r0, r0, r8, ror #31
20001370:	20000f8c 	andcs	r0, r0, ip, lsl #31

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	0001e90c 	andeq	lr, r1, ip, lsl #18
      14:	00018c00 	andeq	r8, r1, r0, lsl #24
      18:	00001000 	andeq	r1, r0, r0
      1c:	00031c20 	andeq	r1, r3, r0, lsr #24
      20:	00000000 	andeq	r0, r0, r0
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	000000db 	ldrdeq	r0, [r0], -fp
      2c:	d5070202 	strle	r0, [r7, #-514]	; 0xfffffdfe
      30:	02000000 	andeq	r0, r0, #0
      34:	00b50801 	adcseq	r0, r5, r1, lsl #16
      38:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	02ae0676 	adceq	r0, lr, #123731968	; 0x7600000
      44:	007e2000 	rsbseq	r2, lr, r0
      48:	9c010000 	stcls	0, cr0, [r1], {-0}
      4c:	000000a7 	andeq	r0, r0, r7, lsr #1
      50:	6d756e04 	ldclvs	14, cr6, [r5, #-16]!
      54:	1f760100 	svcne	0x00760100
      58:	000000a7 	andeq	r0, r0, r7, lsr #1
      5c:	045f9102 	ldrbeq	r9, [pc], #-258	; 64 <startup-0x1fffff9c>
      60:	76010078 			; <UNDEFINED> instruction: 0x76010078
      64:	0000ae28 	andeq	sl, r0, r8, lsr #28
      68:	58910200 	ldmpl	r1, {r9}
      6c:	01007904 	tsteq	r0, r4, lsl #18
      70:	00ae2f76 	adceq	r2, lr, r6, ror pc
      74:	91020000 	mrsls	r0, (UNDEF: 2)
      78:	011e0554 	tsteq	lr, r4, asr r5
      7c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
      80:	0000ae06 	andeq	sl, r0, r6, lsl #28
      84:	6c910200 	lfmvs	f0, 4, [r1], {0}
      88:	00016205 	andeq	r6, r1, r5, lsl #4
      8c:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
      90:	000000ae 	andeq	r0, r0, lr, lsr #1
      94:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
      98:	00000111 	andeq	r0, r0, r1, lsl r1
      9c:	ae067a01 	vmlage.f32	s14, s12, s2
      a0:	02000000 	andeq	r0, r0, #0
      a4:	02006491 	andeq	r6, r0, #-1862270976	; 0x91000000
      a8:	00be0801 	adcseq	r0, lr, r1, lsl #16
      ac:	04060000 	streq	r0, [r6], #-0
      b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      b4:	00980300 	addseq	r0, r8, r0, lsl #6
      b8:	6d010000 	stcvs	0, cr0, [r1, #-0]
      bc:	00027606 	andeq	r7, r2, r6, lsl #12
      c0:	00003820 	andeq	r3, r0, r0, lsr #16
      c4:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
      c8:	04000000 	streq	r0, [r0], #-0
      cc:	6d010078 	stcvs	0, cr0, [r1, #-480]	; 0xfffffe20
      d0:	0000ae17 	andeq	sl, r0, r7, lsl lr
      d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
      d8:	01007904 	tsteq	r0, r4, lsl #18
      dc:	00ae1e6d 	adceq	r1, lr, sp, ror #28
      e0:	91020000 	mrsls	r0, (UNDEF: 2)
      e4:	00720568 	rsbseq	r0, r2, r8, ror #10
      e8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
      ec:	0000ae06 	andeq	sl, r0, r6, lsl #28
      f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      f4:	014f0700 	cmpeq	pc, r0, lsl #14
      f8:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
      fc:	00026606 	andeq	r6, r2, r6, lsl #12
     100:	00001020 	andeq	r1, r0, r0, lsr #32
     104:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     108:	0000008d 	andeq	r0, r0, sp, lsl #1
     10c:	44065e01 	strmi	r5, [r6], #-3585	; 0xfffff1ff
     110:	22200002 	eorcs	r0, r0, #2
     114:	01000000 	mrseq	r0, (UNDEF: 0)
     118:	01d8039c 			; <UNDEFINED> instruction: 0x01d8039c
     11c:	57010000 	strpl	r0, [r1, -r0]
     120:	00020e06 	andeq	r0, r2, r6, lsl #28
     124:	00003620 	andeq	r3, r0, r0, lsr #12
     128:	3f9c0100 	svccc	0x009c0100
     12c:	08000001 	stmdaeq	r0, {r0}
     130:	00000184 	andeq	r0, r0, r4, lsl #3
     134:	a71c5701 	ldrge	r5, [ip, -r1, lsl #14]
     138:	02000000 	andeq	r0, r0, #0
     13c:	03007791 	movweq	r7, #1937	; 0x791
     140:	0000017e 	andeq	r0, r0, lr, ror r1
     144:	d8065001 	stmdale	r6, {r0, ip, lr}
     148:	36200001 	strtcc	r0, [r0], -r1
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	0001659c 	muleq	r1, ip, r5
     154:	01840800 	orreq	r0, r4, r0, lsl #16
     158:	50010000 	andpl	r0, r1, r0
     15c:	0000a719 	andeq	sl, r0, r9, lsl r7
     160:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     164:	01290300 			; <UNDEFINED> instruction: 0x01290300
     168:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     16c:	0001ae06 	andeq	sl, r1, r6, lsl #28
     170:	00002a20 	andeq	r2, r0, r0, lsr #20
     174:	8b9c0100 	blhi	fe70057c <winning_score+0xde6ff294>
     178:	08000001 	stmdaeq	r0, {r0}
     17c:	00000184 	andeq	r0, r0, r4, lsl #3
     180:	a71c4901 	ldrge	r4, [ip, -r1, lsl #18]
     184:	02000000 	andeq	r0, r0, #0
     188:	03007791 	movweq	r7, #1937	; 0x791
     18c:	000000a5 	andeq	r0, r0, r5, lsr #1
     190:	84064401 	strhi	r4, [r6], #-1025	; 0xfffffbff
     194:	2a200001 	bcs	8001a0 <startup-0x1f7ffe60>
     198:	01000000 	mrseq	r0, (UNDEF: 0)
     19c:	0001b19c 	muleq	r1, ip, r1
     1a0:	01840800 	orreq	r0, r4, r0, lsl #16
     1a4:	44010000 	strmi	r0, [r1], #-0
     1a8:	0000a71b 	andeq	sl, r0, fp, lsl r7
     1ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     1b0:	01c10300 	biceq	r0, r1, r0, lsl #6
     1b4:	3a010000 	bcc	401bc <startup-0x1ffbfe44>
     1b8:	0001500a 	andeq	r5, r1, sl
     1bc:	00003420 	andeq	r3, r0, r0, lsr #8
     1c0:	e19c0100 	orrs	r0, ip, r0, lsl #2
     1c4:	08000001 	stmdaeq	r0, {r0}
     1c8:	00000184 	andeq	r0, r0, r4, lsl #3
     1cc:	a7263a01 	strge	r3, [r6, -r1, lsl #20]!
     1d0:	02000000 	andeq	r0, r0, #0
     1d4:	63097791 	movwvs	r7, #38801	; 0x9791
     1d8:	0e3b0100 	rsfeqe	f0, f3, f0
     1dc:	000000a7 	andeq	r0, r0, r7, lsr #1
     1e0:	016e0a00 	cmneq	lr, r0, lsl #20
     1e4:	30010000 	andcc	r0, r1, r0
     1e8:	0000a706 	andeq	sl, r0, r6, lsl #14
     1ec:	00010400 	andeq	r0, r1, r0, lsl #8
     1f0:	00004c20 	andeq	r4, r0, r0, lsr #24
     1f4:	099c0100 	ldmibeq	ip, {r8}
     1f8:	0b000002 	bleq	208 <startup-0x1ffffdf8>
     1fc:	31010063 	tstcc	r1, r3, rrx
     200:	0000a707 	andeq	sl, r0, r7, lsl #14
     204:	6f910200 	svcvs	0x00910200
     208:	00c30a00 	sbceq	r0, r3, r0, lsl #20
     20c:	22010000 	andcs	r0, r1, #0
     210:	0000a707 	andeq	sl, r0, r7, lsl #14
     214:	0000c400 	andeq	ip, r0, r0, lsl #8
     218:	00004020 	andeq	r4, r0, r0, lsr #32
     21c:	319c0100 	orrscc	r0, ip, r0, lsl #2
     220:	0b000002 	bleq	230 <startup-0x1ffffdd0>
     224:	24010063 	strcs	r0, [r1], #-99	; 0xffffff9d
     228:	0000a70e 	andeq	sl, r0, lr, lsl #14
     22c:	6f910200 	svcvs	0x00910200
     230:	00e80a00 	rsceq	r0, r8, r0, lsl #20
     234:	13010000 	movwne	r0, #4096	; 0x1000
     238:	0000a707 	andeq	sl, r0, r7, lsl #14
     23c:	00009000 	andeq	r9, r0, r0
     240:	00003420 	andeq	r3, r0, r0, lsr #8
     244:	599c0100 	ldmibpl	ip, {r8}
     248:	0b000002 	bleq	258 <startup-0x1ffffda8>
     24c:	15010063 	strne	r0, [r1, #-99]	; 0xffffff9d
     250:	0000a70e 	andeq	sl, r0, lr, lsl #14
     254:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     258:	013a0c00 	teqeq	sl, r0, lsl #24
     25c:	0b010000 	bleq	40264 <startup-0x1ffbfd9c>
     260:	00004806 	andeq	r4, r0, r6, lsl #16
     264:	00004820 	andeq	r4, r0, r0, lsr #16
     268:	8a9c0100 	bhi	fe700670 <winning_score+0xde6ff388>
     26c:	04000002 	streq	r0, [r0], #-2
     270:	0b010078 	bleq	40458 <startup-0x1ffbfba8>
     274:	0000a720 	andeq	sl, r0, r0, lsr #14
     278:	6f910200 	svcvs	0x00910200
     27c:	0100630b 	tsteq	r0, fp, lsl #6
     280:	00a7070c 	adceq	r0, r7, ip, lsl #14
     284:	91020000 	mrsls	r0, (UNDEF: 2)
     288:	fe0d0077 	mcr2	0, 0, r0, cr13, cr7, {3}
     28c:	01000000 	mrseq	r0, (UNDEF: 0)
     290:	00100605 	andseq	r0, r0, r5, lsl #12
     294:	00382000 	eorseq	r2, r8, r0
     298:	9c010000 	stcls	0, cr0, [r1], {-0}
     29c:	01007804 	tsteq	r0, r4, lsl #16
     2a0:	00a71e05 	adceq	r1, r7, r5, lsl #28
     2a4:	91020000 	mrsls	r0, (UNDEF: 2)
     2a8:	00630b6f 	rsbeq	r0, r3, pc, ror #22
     2ac:	a70e0601 	strge	r0, [lr, -r1, lsl #12]
     2b0:	02000000 	andeq	r0, r0, #0
     2b4:	00007791 	muleq	r0, r1, r7
     2b8:	0000035f 	andeq	r0, r0, pc, asr r3
     2bc:	01030004 	tsteq	r3, r4
     2c0:	01040000 	mrseq	r0, (UNDEF: 4)
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	0002d80c 	andeq	sp, r2, ip, lsl #16
     2cc:	00018c00 	andeq	r8, r1, r0, lsl #24
     2d0:	00032c00 	andeq	r2, r3, r0, lsl #24
     2d4:	00029c20 	andeq	r9, r2, r0, lsr #24
     2d8:	00019600 	andeq	r9, r1, r0, lsl #12
     2dc:	02020200 	andeq	r0, r2, #0, 4
     2e0:	00450901 	subeq	r0, r5, r1, lsl #18
     2e4:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     2e8:	0a020200 	beq	80af0 <startup-0x1ff7f510>
     2ec:	00000045 	andeq	r0, r0, r5, asr #32
     2f0:	00790300 	rsbseq	r0, r9, r0, lsl #6
     2f4:	450c0202 	strmi	r0, [ip, #-514]	; 0xfffffdfe
     2f8:	01000000 	mrseq	r0, (UNDEF: 0)
     2fc:	08010400 	stmdaeq	r1, {sl}
     300:	000000be 	strheq	r0, [r0], -lr
     304:	0003d405 	andeq	sp, r3, r5, lsl #8
     308:	02030200 	andeq	r0, r3, #0, 4
     30c:	00000025 	andeq	r0, r0, r5, lsr #32
     310:	17024802 	strne	r4, [r2, -r2, lsl #16]
     314:	00009509 	andeq	r9, r0, r9, lsl #10
     318:	02b70600 	adcseq	r0, r7, #0, 12
     31c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     320:	00009509 	andeq	r9, r0, r9, lsl #10
     324:	7b060000 	blvc	18032c <startup-0x1fe7fcd4>
     328:	02000002 	andeq	r0, r0, #2
     32c:	00950919 	addseq	r0, r5, r9, lsl r9
     330:	06040000 	streq	r0, [r4], -r0
     334:	00000281 	andeq	r0, r0, r1, lsl #5
     338:	95091a02 	strls	r1, [r9, #-2562]	; 0xfffff5fe
     33c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     340:	00787003 	rsbseq	r7, r8, r3
     344:	9c0b1b02 			; <UNDEFINED> instruction: 0x9c0b1b02
     348:	0c000000 	stceq	0, cr0, [r0], {-0}
     34c:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     350:	00746e69 	rsbseq	r6, r4, r9, ror #28
     354:	00004c08 	andeq	r4, r0, r8, lsl #24
     358:	0000ac00 	andeq	sl, r0, r0, lsl #24
     35c:	00ac0900 	adceq	r0, ip, r0, lsl #18
     360:	001d0000 	andseq	r0, sp, r0
     364:	db070404 	blle	1c137c <startup-0x1fe3ec84>
     368:	05000000 	streq	r0, [r0, #-0]
     36c:	000001f2 	strdeq	r0, [r0], -r2
     370:	58021c02 	stmdapl	r2, {r1, sl, fp, ip}
     374:	05000000 	streq	r0, [r0, #-0]
     378:	000001f1 	strdeq	r0, [r0], -r1
     37c:	cb0e1c02 	blgt	38738c <startup-0x1fc78c74>
     380:	0a000000 	beq	388 <startup-0x1ffffc78>
     384:	00005804 	andeq	r5, r0, r4, lsl #16
     388:	02b20b00 	adcseq	r0, r2, #0, 22
     38c:	02240000 	eoreq	r0, r4, #0
     390:	0154101e 	cmpeq	r4, lr, lsl r0
     394:	67030000 	strvs	r0, [r3, -r0]
     398:	02006f65 	andeq	r6, r0, #404	; 0x194
     39c:	00bf0f1f 	adcseq	r0, pc, pc, lsl pc	; <UNPREDICTABLE>
     3a0:	06000000 	streq	r0, [r0], -r0
     3a4:	00000212 	andeq	r0, r0, r2, lsl r2
     3a8:	95092002 	strls	r2, [r9, #-2]
     3ac:	04000000 	streq	r0, [r0], #-0
     3b0:	00021706 	andeq	r1, r2, r6, lsl #14
     3b4:	0e200200 	cdpeq	2, 2, cr0, cr0, cr0, {0}
     3b8:	00000095 	muleq	r0, r5, r0
     3bc:	023b0608 	eorseq	r0, fp, #8, 12	; 0x800000
     3c0:	21020000 	mrscs	r0, (UNDEF: 2)
     3c4:	00009509 	andeq	r9, r0, r9, lsl #10
     3c8:	40060c00 	andmi	r0, r6, r0, lsl #24
     3cc:	02000002 	andeq	r0, r0, #2
     3d0:	00950e21 	addseq	r0, r5, r1, lsr #28
     3d4:	06100000 	ldreq	r0, [r0], -r0
     3d8:	0000029b 	muleq	r0, fp, r2
     3dc:	650d2202 	strvs	r2, [sp, #-514]	; 0xfffffdfe
     3e0:	14000001 	strne	r0, [r0], #-1
     3e4:	00059d06 	andeq	r9, r5, r6, lsl #26
     3e8:	0d230200 	sfmeq	f0, 4, [r3, #-0]
     3ec:	00000165 	andeq	r0, r0, r5, ror #2
     3f0:	020d0618 	andeq	r0, sp, #24, 12	; 0x1800000
     3f4:	24020000 	strcs	r0, [r2], #-0
     3f8:	0001650c 	andeq	r6, r1, ip, lsl #10
     3fc:	31061c00 	tstcc	r6, r0, lsl #24
     400:	02000002 	andeq	r0, r0, #2
     404:	01800d25 	orreq	r0, r0, r5, lsr #26
     408:	00200000 	eoreq	r0, r0, r0
     40c:	00015f0c 	andeq	r5, r1, ip, lsl #30
     410:	015f0d00 	cmpeq	pc, r0, lsl #26
     414:	0a000000 	beq	41c <startup-0x1ffffbe4>
     418:	0000d104 	andeq	sp, r0, r4, lsl #2
     41c:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
     420:	0c000001 	stceq	0, cr0, [r0], {1}
     424:	00000180 	andeq	r0, r0, r0, lsl #3
     428:	00015f0d 	andeq	r5, r1, sp, lsl #30
     42c:	00950d00 	addseq	r0, r5, r0, lsl #26
     430:	950d0000 	strls	r0, [sp, #-0]
     434:	00000000 	andeq	r0, r0, r0
     438:	016b040a 	cmneq	fp, sl, lsl #8
     43c:	74050000 	strvc	r0, [r5], #-0
     440:	02000005 	andeq	r0, r0, #5
     444:	00d10226 	sbcseq	r0, r1, r6, lsr #4
     448:	02040000 	andeq	r0, r4, #0
     44c:	0000d507 	andeq	sp, r0, r7, lsl #10
     450:	08010400 	stmdaeq	r1, {sl}
     454:	000000b5 	strheq	r0, [r0], -r5
     458:	0002450e 	andeq	r4, r2, lr, lsl #10
     45c:	0a040100 	beq	100864 <startup-0x1feff79c>
     460:	000000b3 	strheq	r0, [r0], -r3
     464:	12580305 	subsne	r0, r8, #335544320	; 0x14000000
     468:	530e2000 	movwpl	r2, #57344	; 0xe000
     46c:	01000002 	tsteq	r0, r2
     470:	00b30a0c 	adcseq	r0, r3, ip, lsl #20
     474:	03050000 	movweq	r0, #20480	; 0x5000
     478:	200012a0 	andcs	r1, r0, r0, lsr #5
     47c:	0002870f 	andeq	r8, r2, pc, lsl #14
     480:	08580100 	ldmdaeq	r8, {r8}^
     484:	00000186 	andeq	r0, r0, r6, lsl #3
     488:	20000558 	andcs	r0, r0, r8, asr r5
     48c:	00000070 	andeq	r0, r0, r0, ror r0
     490:	020d9c01 	andeq	r9, sp, #256	; 0x100
     494:	3b100000 	blcc	40049c <startup-0x1fbffb64>
     498:	01000002 	tsteq	r0, r2
     49c:	00952058 	addseq	r2, r5, r8, asr r0
     4a0:	91020000 	mrsls	r0, (UNDEF: 2)
     4a4:	02401040 	subeq	r1, r0, #64	; 0x40
     4a8:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     4ac:	0000952a 	andeq	r9, r0, sl, lsr #10
     4b0:	bc910300 	ldclt	3, cr0, [r1], {0}
     4b4:	028e117f 	addeq	r1, lr, #-1073741793	; 0xc000001f
     4b8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     4bc:	0001860c 	andeq	r8, r1, ip, lsl #12
     4c0:	4c910200 	lfmmi	f0, 4, [r1], {0}
     4c4:	02a00f00 	adceq	r0, r0, #0, 30
     4c8:	4b010000 	blmi	404d0 <startup-0x1ffbfb30>
     4cc:	00018608 	andeq	r8, r1, r8, lsl #12
     4d0:	0004e600 	andeq	lr, r4, r0, lsl #12
     4d4:	00007220 	andeq	r7, r0, r0, lsr #4
     4d8:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
     4dc:	10000002 	andne	r0, r0, r2
     4e0:	0000023b 	andeq	r0, r0, fp, lsr r2
     4e4:	951e4b01 	ldrls	r4, [lr, #-2817]	; 0xfffff4ff
     4e8:	02000000 	andeq	r0, r0, #0
     4ec:	40104091 	mulsmi	r0, r1, r0
     4f0:	01000002 	tsteq	r0, r2
     4f4:	0095284b 	addseq	r2, r5, fp, asr #16
     4f8:	91030000 	mrsls	r0, (UNDEF: 3)
     4fc:	a7117fbc 			; <UNDEFINED> instruction: 0xa7117fbc
     500:	01000002 	tsteq	r0, r2
     504:	01860c4c 	orreq	r0, r6, ip, asr #24
     508:	91020000 	mrsls	r0, (UNDEF: 2)
     50c:	1c12004c 	ldcne	0, cr0, [r2], {76}	; 0x4c
     510:	01000002 	tsteq	r0, r2
     514:	04c60646 	strbeq	r0, [r6], #1606	; 0x646
     518:	00202000 	eoreq	r2, r0, r0
     51c:	9c010000 	stcls	0, cr0, [r1], {-0}
     520:	0000029a 	muleq	r0, sl, r2
     524:	00029410 	andeq	r9, r2, r0, lsl r4
     528:	23460100 	movtcs	r0, #24832	; 0x6100
     52c:	0000029a 	muleq	r0, sl, r2
     530:	10749102 	rsbsne	r9, r4, r2, lsl #2
     534:	000002d1 	ldrdeq	r0, [r0], -r1
     538:	952f4601 	strls	r4, [pc, #-1537]!	; ffffff3f <winning_score+0xdfffec57>
     53c:	02000000 	andeq	r0, r0, #0
     540:	74107091 	ldrvc	r7, [r0], #-145	; 0xffffff6f
     544:	01000002 	tsteq	r0, r2
     548:	00953b46 	addseq	r3, r5, r6, asr #22
     54c:	91020000 	mrsls	r0, (UNDEF: 2)
     550:	040a006c 	streq	r0, [sl], #-108	; 0xffffff94
     554:	00000186 	andeq	r0, r0, r6, lsl #3
     558:	0001fb13 	andeq	pc, r1, r3, lsl fp	; <UNPREDICTABLE>
     55c:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
     560:	20000470 	andcs	r0, r0, r0, ror r4
     564:	00000056 	andeq	r0, r0, r6, asr r0
     568:	02c69c01 	sbceq	r9, r6, #256	; 0x100
     56c:	94100000 	ldrls	r0, [r0], #-0
     570:	01000002 	tsteq	r0, r2
     574:	029a2036 	addseq	r2, sl, #54	; 0x36
     578:	91020000 	mrsls	r0, (UNDEF: 2)
     57c:	c1130074 	tstgt	r3, r4, ror r0
     580:	01000002 	tsteq	r0, r2
     584:	03ec0622 	mvneq	r0, #35651584	; 0x2200000
     588:	00842000 	addeq	r2, r4, r0
     58c:	9c010000 	stcls	0, cr0, [r1], {-0}
     590:	000002ec 	andeq	r0, r0, ip, ror #5
     594:	00029410 	andeq	r9, r2, r0, lsl r4
     598:	1e220100 	sufnes	f0, f2, f0
     59c:	0000029a 	muleq	r0, sl, r2
     5a0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     5a4:	00026313 	andeq	r6, r2, r3, lsl r3
     5a8:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
     5ac:	2000038c 	andcs	r0, r0, ip, lsl #7
     5b0:	00000060 	andeq	r0, r0, r0, rrx
     5b4:	03299c01 			; <UNDEFINED> instruction: 0x03299c01
     5b8:	94100000 	ldrls	r0, [r0], #-0
     5bc:	01000002 	tsteq	r0, r2
     5c0:	029a1f1d 	addseq	r1, sl, #29, 30	; 0x74
     5c4:	91020000 	mrsls	r0, (UNDEF: 2)
     5c8:	0394146c 	orrseq	r1, r4, #108, 8	; 0x6c000000
     5cc:	004e2000 	subeq	r2, lr, r0
     5d0:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
     5d4:	0f1e0100 	svceq	0x001e0100
     5d8:	00000095 	muleq	r0, r5, r0
     5dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     5e0:	02e81600 	rsceq	r1, r8, #0, 12
     5e4:	17010000 	strne	r0, [r1, -r0]
     5e8:	00032c06 	andeq	r2, r3, r6, lsl #24
     5ec:	00006020 	andeq	r6, r0, r0, lsr #32
     5f0:	109c0100 	addsne	r0, ip, r0, lsl #2
     5f4:	00000294 	muleq	r0, r4, r2
     5f8:	9a1e1701 	bls	786204 <startup-0x1f879dfc>
     5fc:	02000002 	andeq	r0, r0, #2
     600:	34146c91 	ldrcc	r6, [r4], #-3217	; 0xfffff36f
     604:	4e200003 	cdpmi	0, 2, cr0, cr0, cr3, {0}
     608:	15000000 	strne	r0, [r0, #-0]
     60c:	18010069 	stmdane	r1, {r0, r3, r5, r6}
     610:	0000950d 	andeq	r9, r0, sp, lsl #10
     614:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     618:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     61c:	04000001 	streq	r0, [r0], #-1
     620:	00026800 	andeq	r6, r2, r0, lsl #16
     624:	00010400 	andeq	r0, r1, r0, lsl #8
     628:	0c000000 	stceq	0, cr0, [r0], {-0}
     62c:	00000338 	andeq	r0, r0, r8, lsr r3
     630:	0000018c 	andeq	r0, r0, ip, lsl #3
     634:	200005c8 	andcs	r0, r0, r8, asr #11
     638:	000000e8 	andeq	r0, r0, r8, ror #1
     63c:	0000034b 	andeq	r0, r0, fp, asr #6
     640:	db070402 	blle	1c1650 <startup-0x1fe3e9b0>
     644:	02000000 	andeq	r0, r0, #0
     648:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     64c:	01020000 	mrseq	r0, (UNDEF: 2)
     650:	0000b508 	andeq	fp, r0, r8, lsl #10
     654:	020c0300 	andeq	r0, ip, #0, 6
     658:	006b1201 	rsbeq	r1, fp, r1, lsl #4
     65c:	10040000 	andne	r0, r4, r0
     660:	02000003 	andeq	r0, r0, #3
     664:	00700602 	rsbseq	r0, r0, r2, lsl #12
     668:	04000000 	streq	r0, [r0], #-0
     66c:	0000030c 	andeq	r0, r0, ip, lsl #6
     670:	70060302 	andvc	r0, r6, r2, lsl #6
     674:	04000000 	streq	r0, [r0], #-0
     678:	00030404 	andeq	r0, r3, r4, lsl #8
     67c:	06040200 	streq	r0, [r4], -r0, lsl #4
     680:	00000070 	andeq	r0, r0, r0, ror r0
     684:	3a050008 	bcc	1406ac <startup-0x1febf954>
     688:	06000000 	streq	r0, [r0], -r0
     68c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     690:	18070074 	stmdane	r7, {r2, r4, r5, r6}
     694:	02000003 	andeq	r0, r0, #3
     698:	006b0305 	rsbeq	r0, fp, r5, lsl #6
     69c:	33080000 	movwcc	r0, #32768	; 0x8000
     6a0:	02000003 	andeq	r0, r0, #3
     6a4:	00770d06 	rsbseq	r0, r7, r6, lsl #26
     6a8:	03050000 	movweq	r0, #20480	; 0x5000
     6ac:	20001234 	andcs	r1, r0, r4, lsr r2
     6b0:	00031009 	andeq	r1, r3, r9
     6b4:	0f050100 	svceq	0x00050100
     6b8:	000000ae 	andeq	r0, r0, lr, lsr #1
     6bc:	12400305 	subne	r0, r0, #335544320	; 0x14000000
     6c0:	01022000 	mrseq	r2, (UNDEF: 2)
     6c4:	0000be08 	andeq	fp, r0, r8, lsl #28
     6c8:	00a70500 	adceq	r0, r7, r0, lsl #10
     6cc:	0c090000 	stceq	0, cr0, [r9], {-0}
     6d0:	01000003 	tsteq	r0, r3
     6d4:	00ae0f06 	adceq	r0, lr, r6, lsl #30
     6d8:	03050000 	movweq	r0, #20480	; 0x5000
     6dc:	20001241 	andcs	r1, r0, r1, asr #4
     6e0:	00030409 	andeq	r0, r3, r9, lsl #8
     6e4:	0f070100 	svceq	0x00070100
     6e8:	000000ae 	andeq	r0, r0, lr, lsr #1
     6ec:	12420305 	subne	r0, r2, #335544320	; 0x14000000
     6f0:	1d0a2000 	stcne	0, cr2, [sl, #-0]
     6f4:	01000003 	tsteq	r0, r3
     6f8:	0674061d 			; <UNDEFINED> instruction: 0x0674061d
     6fc:	003c2000 	eorseq	r2, ip, r0
     700:	9c010000 	stcls	0, cr0, [r1], {-0}
     704:	0003270b 	andeq	r2, r3, fp, lsl #14
     708:	05190100 	ldreq	r0, [r9, #-256]	; 0xffffff00
     70c:	00000070 	andeq	r0, r0, r0, ror r0
     710:	20000644 	andcs	r0, r0, r4, asr #12
     714:	00000030 	andeq	r0, r0, r0, lsr r0
     718:	f80a9c01 			; <UNDEFINED> instruction: 0xf80a9c01
     71c:	01000002 	tsteq	r0, r2
     720:	05c8060d 	strbeq	r0, [r8, #1549]	; 0x60d
     724:	007c2000 	rsbseq	r2, ip, r0
     728:	9c010000 	stcls	0, cr0, [r1], {-0}
     72c:	00013c00 	andeq	r3, r1, r0, lsl #24
     730:	1e000400 	cfcpysne	mvf0, mvf0
     734:	04000003 	streq	r0, [r0], #-3
     738:	00000001 	andeq	r0, r0, r1
     73c:	034f0c00 	movteq	r0, #64512	; 0xfc00
     740:	018c0000 	orreq	r0, ip, r0
     744:	06b00000 	ldrteq	r0, [r0], r0
     748:	006a2000 	rsbeq	r2, sl, r0
     74c:	03ec0000 	mvneq	r0, #0
     750:	1a020000 	bne	80758 <startup-0x1ff7f8a8>
     754:	d6090501 	strle	r0, [r9], -r1, lsl #10
     758:	03000000 	movweq	r0, #0
     75c:	01007273 	tsteq	r0, r3, ror r2
     760:	00dd1a06 	sbcseq	r1, sp, r6, lsl #20
     764:	04000000 	streq	r0, [r0], #-0
     768:	00000346 	andeq	r0, r0, r6, asr #6
     76c:	dd1a0701 	ldcle	7, cr0, [sl, #-4]
     770:	02000000 	andeq	r0, r0, #0
     774:	00726403 	rsbseq	r6, r2, r3, lsl #8
     778:	dd1a0801 	ldcle	8, cr0, [sl, #-4]
     77c:	04000000 	streq	r0, [r0], #-0
     780:	00035704 	andeq	r5, r3, r4, lsl #14
     784:	1a090100 	bne	240b8c <startup-0x1fdbf474>
     788:	000000dd 	ldrdeq	r0, [r0], -sp
     78c:	72620306 	rsbvc	r0, r2, #402653184	; 0x18000000
     790:	0a010072 	beq	40960 <startup-0x1ffbf6a0>
     794:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     798:	60040800 	andvs	r0, r4, r0, lsl #16
     79c:	01000003 	tsteq	r0, r3
     7a0:	00dd1a0b 	sbcseq	r1, sp, fp, lsl #20
     7a4:	030a0000 	movweq	r0, #40960	; 0xa000
     7a8:	00317263 	eorseq	r7, r1, r3, ror #4
     7ac:	dd1a0c01 	ldcle	12, cr0, [sl, #-4]
     7b0:	0c000000 	stceq	0, cr0, [r0], {-0}
     7b4:	00036904 	andeq	r6, r3, r4, lsl #18
     7b8:	1a0d0100 	bne	340bc0 <startup-0x1fcbf440>
     7bc:	000000dd 	ldrdeq	r0, [r0], -sp
     7c0:	7263030e 	rsbvc	r0, r3, #939524096	; 0x38000000
     7c4:	0e010032 	mcreq	0, 0, r0, cr1, cr2, {1}
     7c8:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     7cc:	72041000 	andvc	r1, r4, #0
     7d0:	01000003 	tsteq	r0, r3
     7d4:	00dd1a0f 	sbcseq	r1, sp, pc, lsl #20
     7d8:	03120000 	tsteq	r2, #0
     7dc:	00337263 	eorseq	r7, r3, r3, ror #4
     7e0:	dd1a1001 	ldcle	0, cr1, [sl, #-4]
     7e4:	14000000 	strne	r0, [r0], #-0
     7e8:	00037b04 	andeq	r7, r3, r4, lsl #22
     7ec:	1a110100 	bne	440bf4 <startup-0x1fbbf40c>
     7f0:	000000dd 	ldrdeq	r0, [r0], -sp
     7f4:	03840416 	orreq	r0, r4, #369098752	; 0x16000000
     7f8:	12010000 	andne	r0, r1, #0
     7fc:	0000dd1a 	andeq	sp, r0, sl, lsl sp
     800:	05001800 	streq	r1, [r0, #-2048]	; 0xfffff800
     804:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     808:	d6060000 	strle	r0, [r6], -r0
     80c:	07000000 	streq	r0, [r0, -r0]
     810:	00000340 	andeq	r0, r0, r0, asr #6
     814:	25031301 	strcs	r1, [r3, #-769]	; 0xfffffcff
     818:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     81c:	00000389 	andeq	r0, r0, r9, lsl #7
     820:	f0062101 			; <UNDEFINED> instruction: 0xf0062101
     824:	2a200006 	bcs	800844 <startup-0x1f7ff7bc>
     828:	01000000 	mrseq	r0, (UNDEF: 0)
     82c:	0001129c 	muleq	r1, ip, r2
     830:	00730900 	rsbseq	r0, r3, r0, lsl #18
     834:	12122101 	andsne	r2, r2, #1073741824	; 0x40000000
     838:	02000001 	andeq	r0, r0, #1
     83c:	0a007491 	beq	1da88 <startup-0x1ffe2578>
     840:	00011804 	andeq	r1, r1, r4, lsl #16
     844:	08010500 	stmdaeq	r1, {r8, sl}
     848:	000000be 	strheq	r0, [r0], -lr
     84c:	00038f0b 	andeq	r8, r3, fp, lsl #30
     850:	0d170100 	ldfeqs	f0, [r7, #-0]
     854:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     858:	00000040 	andeq	r0, r0, r0, asr #32
     85c:	63099c01 	movwvs	r9, #39937	; 0x9c01
     860:	1d170100 	ldfnes	f0, [r7, #-0]
     864:	00000118 	andeq	r0, r0, r8, lsl r1
     868:	00779102 	rsbseq	r9, r7, r2, lsl #2
     86c:	00009000 	andeq	r9, r0, r0
     870:	d2000400 	andle	r0, r0, #0, 8
     874:	04000003 	streq	r0, [r0], #-3
     878:	00000001 	andeq	r0, r0, r1
     87c:	03b10c00 			; <UNDEFINED> instruction: 0x03b10c00
     880:	018c0000 	orreq	r0, ip, r0
     884:	071c0000 	ldreq	r0, [ip, -r0]
     888:	008c2000 	addeq	r2, ip, r0
     88c:	04620000 	strbteq	r0, [r2], #-0
     890:	a5020000 	strge	r0, [r2, #-0]
     894:	01000003 	tsteq	r0, r3
     898:	07640612 			; <UNDEFINED> instruction: 0x07640612
     89c:	00442000 	subeq	r2, r4, r0
     8a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     8a4:	0003b903 	andeq	fp, r3, r3, lsl #18
     8a8:	060d0100 	streq	r0, [sp], -r0, lsl #2
     8ac:	20000752 	andcs	r0, r0, r2, asr r7
     8b0:	00000012 	andeq	r0, r0, r2, lsl r0
     8b4:	9a049c01 	bls	1278c0 <startup-0x1fed8740>
     8b8:	01000003 	tsteq	r0, r3
     8bc:	071c0603 	ldreq	r0, [ip, -r3, lsl #12]
     8c0:	00362000 	eorseq	r2, r6, r0
     8c4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8c8:	00000085 	andeq	r0, r0, r5, lsl #1
     8cc:	00736d05 	rsbseq	r6, r3, r5, lsl #26
     8d0:	851e0301 	ldrhi	r0, [lr, #-769]	; 0xfffffcff
     8d4:	02000000 	andeq	r0, r0, #0
     8d8:	24066c91 	strcs	r6, [r6], #-3217	; 0xfffff36f
     8dc:	24200007 	strtcs	r0, [r0], #-7
     8e0:	07000000 	streq	r0, [r0, -r0]
     8e4:	04010069 	streq	r0, [r1], #-105	; 0xffffff97
     8e8:	00008c0e 	andeq	r8, r0, lr, lsl #24
     8ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8f0:	04080000 	streq	r0, [r8], #-0
     8f4:	0000db07 	andeq	sp, r0, r7, lsl #22
     8f8:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
     8fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     900:	00033200 	andeq	r3, r3, r0, lsl #4
     904:	73000400 	movwvc	r0, #1024	; 0x400
     908:	04000004 	streq	r0, [r0], #-4
     90c:	00000001 	andeq	r0, r0, r1
     910:	04590c00 	ldrbeq	r0, [r9], #-3072	; 0xfffff400
     914:	018c0000 	orreq	r0, ip, r0
     918:	07a80000 	streq	r0, [r8, r0]!
     91c:	03122000 	tsteq	r2, #0
     920:	05150000 	ldreq	r0, [r5, #-0]
     924:	02020000 	andeq	r0, r2, #0
     928:	45090102 	strmi	r0, [r9, #-258]	; 0xfffffefe
     92c:	03000000 	movweq	r0, #0
     930:	02020078 	andeq	r0, r2, #120	; 0x78
     934:	0000450a 	andeq	r4, r0, sl, lsl #10
     938:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     93c:	0c020200 	sfmeq	f0, 4, [r2], {-0}
     940:	00000045 	andeq	r0, r0, r5, asr #32
     944:	01040001 	tsteq	r4, r1
     948:	0000be08 	andeq	fp, r0, r8, lsl #28
     94c:	03d40500 	bicseq	r0, r4, #0, 10
     950:	03020000 	movweq	r0, #8192	; 0x2000
     954:	00002502 	andeq	r2, r0, r2, lsl #10
     958:	02040200 	andeq	r0, r4, #0, 4
     95c:	007a0905 	rsbseq	r0, sl, r5, lsl #18
     960:	70030000 	andvc	r0, r3, r0
     964:	06020031 			; <UNDEFINED> instruction: 0x06020031
     968:	00004c0b 	andeq	r4, r0, fp, lsl #24
     96c:	70030000 	andvc	r0, r3, r0
     970:	07020032 	smladxeq	r2, r2, r0, r0
     974:	00004c0b 	andeq	r4, r0, fp, lsl #24
     978:	05000200 	streq	r0, [r0, #-512]	; 0xfffffe00
     97c:	0000042b 	andeq	r0, r0, fp, lsr #8
     980:	58020802 	stmdapl	r2, {r1, fp}
     984:	02000000 	andeq	r0, r0, #0
     988:	090a0204 	stmdbeq	sl, {r2, r9}
     98c:	000000b1 	strheq	r0, [r0], -r1
     990:	02007003 	andeq	r7, r0, #3
     994:	004c0b0b 	subeq	r0, ip, fp, lsl #22
     998:	03000000 	movweq	r0, #0
     99c:	0c020078 	stceq	0, cr0, [r2], {120}	; 0x78
     9a0:	0000450a 	andeq	r4, r0, sl, lsl #10
     9a4:	79030200 	stmdbvc	r3, {r9}
     9a8:	0c0c0200 	sfmeq	f0, 4, [ip], {-0}
     9ac:	00000045 	andeq	r0, r0, r5, asr #32
     9b0:	47050003 	strmi	r0, [r5, -r3]
     9b4:	02000004 	andeq	r0, r0, #4
     9b8:	0086020d 	addeq	r0, r6, sp, lsl #4
     9bc:	4c060000 	stcmi	0, cr0, [r6], {-0}
     9c0:	08000004 	stmdaeq	r0, {r2}
     9c4:	ee100f02 	cdp	15, 1, cr0, cr0, cr2, {0}
     9c8:	03000000 	movweq	r0, #0
     9cc:	10020078 	andne	r0, r2, r8, ror r0
     9d0:	0000450a 	andeq	r4, r0, sl, lsl #10
     9d4:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     9d8:	0c100200 	lfmeq	f0, 4, [r0], {-0}
     9dc:	00000045 	andeq	r0, r0, r5, asr #32
     9e0:	03c50701 	biceq	r0, r5, #262144	; 0x40000
     9e4:	11020000 	mrsne	r0, (UNDEF: 2)
     9e8:	0000ee1a 	andeq	lr, r0, sl, lsl lr
     9ec:	08000400 	stmdaeq	r0, {sl}
     9f0:	0000bd04 	andeq	fp, r0, r4, lsl #26
     9f4:	03d00500 	bicseq	r0, r0, #0, 10
     9f8:	13020000 	movwne	r0, #8192	; 0x2000
     9fc:	0000bd02 	andeq	fp, r0, r2, lsl #26
     a00:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
     a04:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a08:	db070404 	blle	1c1a20 <startup-0x1fe3e5e0>
     a0c:	04000000 	streq	r0, [r0], #-0
     a10:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     a14:	01040000 	mrseq	r0, (UNDEF: 4)
     a18:	0000b508 	andeq	fp, r0, r8, lsl #10
     a1c:	03e00a00 	mvneq	r0, #0, 20
     a20:	4f010000 	svcmi	0x00010000
     a24:	00004506 	andeq	r4, r0, r6, lsl #10
     a28:	000a3a00 	andeq	r3, sl, r0, lsl #20
     a2c:	00008020 	andeq	r8, r0, r0, lsr #32
     a30:	8a9c0100 	bhi	fe700e38 <winning_score+0xde6ffb50>
     a34:	0b000001 	bleq	a40 <startup-0x1ffff5c0>
     a38:	00000422 	andeq	r0, r0, r2, lsr #8
     a3c:	f41d4f01 			; <UNDEFINED> instruction: 0xf41d4f01
     a40:	02000000 	andeq	r0, r0, #0
     a44:	700c5091 	mulvc	ip, r1, r0
     a48:	50010030 	andpl	r0, r1, r0, lsr r0
     a4c:	00004c0b 	andeq	r4, r0, fp, lsl #24
     a50:	60910200 	addsvs	r0, r1, r0, lsl #4
     a54:	0031700c 	eorseq	r7, r1, ip
     a58:	4c0b5101 	stfmis	f5, [fp], {1}
     a5c:	02000000 	andeq	r0, r0, #0
     a60:	700c5c91 	mulvc	ip, r1, ip
     a64:	01007274 	tsteq	r0, r4, ror r2
     a68:	00ee1a53 	rsceq	r1, lr, r3, asr sl
     a6c:	91020000 	mrsls	r0, (UNDEF: 2)
     a70:	0a600d64 	beq	1804008 <startup-0x1e7fbff8>
     a74:	004a2000 	subeq	r2, sl, r0
     a78:	f50e0000 			; <UNDEFINED> instruction: 0xf50e0000
     a7c:	01000003 	tsteq	r0, r3
     a80:	007a0e57 	rsbseq	r0, sl, r7, asr lr
     a84:	91020000 	mrsls	r0, (UNDEF: 2)
     a88:	0a000058 	beq	bf0 <startup-0x1ffff410>
     a8c:	00000436 	andeq	r0, r0, r6, lsr r4
     a90:	45064101 	strmi	r4, [r6, #-257]	; 0xfffffeff
     a94:	04000000 	streq	r0, [r0], #-0
     a98:	36200009 	strtcc	r0, [r0], -r9
     a9c:	01000001 	tsteq	r0, r1
     aa0:	00020a9c 	muleq	r2, ip, sl
     aa4:	043b0b00 	ldrteq	r0, [fp], #-2816	; 0xfffff500
     aa8:	41010000 	mrsmi	r0, (UNDEF: 1)
     aac:	0000b115 	andeq	fp, r0, r5, lsl r1
     ab0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     ab4:	0003da0e 	andeq	sp, r3, lr, lsl #20
     ab8:	0b420100 	bleq	1080ec0 <startup-0x1ef7f140>
     abc:	0000004c 	andeq	r0, r0, ip, asr #32
     ac0:	0c649102 	stfeqp	f1, [r4], #-8
     ac4:	00646e65 	rsbeq	r6, r4, r5, ror #28
     ac8:	4c0b4301 	stcmi	3, cr4, [fp], {1}
     acc:	02000000 	andeq	r0, r0, #0
     ad0:	530e6091 	movwpl	r6, #57489	; 0xe091
     ad4:	01000004 	tsteq	r0, r4
     ad8:	004c0b44 	subeq	r0, ip, r4, asr #22
     adc:	91020000 	mrsls	r0, (UNDEF: 2)
     ae0:	00780c5c 	rsbseq	r0, r8, ip, asr ip
     ae4:	450a4501 	strmi	r4, [sl, #-1281]	; 0xfffffaff
     ae8:	02000000 	andeq	r0, r0, #0
     aec:	790c6791 	stmdbvc	ip, {r0, r4, r7, r8, r9, sl, sp, lr}
     af0:	0a460100 	beq	1180ef8 <startup-0x1ee7f108>
     af4:	00000045 	andeq	r0, r0, r5, asr #32
     af8:	0e669102 	lgneqs	f1, f2
     afc:	000003f5 	strdeq	r0, [r0], -r5
     b00:	7a0a4701 	bvc	29270c <startup-0x1fd6d8f4>
     b04:	02000000 	andeq	r0, r0, #0
     b08:	0a005891 	beq	16d54 <startup-0x1ffe92ac>
     b0c:	000003ed 	andeq	r0, r0, sp, ror #7
     b10:	45063301 	strmi	r3, [r6, #-769]	; 0xfffffcff
     b14:	bc000000 	stclt	0, cr0, [r0], {-0}
     b18:	48200008 	stmdami	r0!, {r3}
     b1c:	01000000 	mrseq	r0, (UNDEF: 0)
     b20:	00026c9c 	muleq	r2, ip, ip
     b24:	03f50b00 	mvnseq	r0, #0, 22
     b28:	33010000 	movwcc	r0, #4096	; 0x1000
     b2c:	00007a18 	andeq	r7, r0, r8, lsl sl
     b30:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     b34:	0030780c 	eorseq	r7, r0, ip, lsl #16
     b38:	000d3401 	andeq	r3, sp, r1, lsl #8
     b3c:	02000001 	andeq	r0, r0, #1
     b40:	780c7491 	stmdavc	ip, {r0, r4, r7, sl, ip, sp, lr}
     b44:	35010031 	strcc	r0, [r1, #-49]	; 0xffffffcf
     b48:	0001000d 	andeq	r0, r1, sp
     b4c:	70910200 	addsvc	r0, r1, r0, lsl #4
     b50:	0030790c 	eorseq	r7, r0, ip, lsl #18
     b54:	000d3701 	andeq	r3, sp, r1, lsl #14
     b58:	02000001 	andeq	r0, r0, #1
     b5c:	790c6c91 	stmdbvc	ip, {r0, r4, r7, sl, fp, sp, lr}
     b60:	38010031 	stmdacc	r1, {r0, r4, r5}
     b64:	0001000d 	andeq	r0, r1, sp
     b68:	68910200 	ldmvs	r1, {r9}
     b6c:	040c0f00 	streq	r0, [ip], #-3840	; 0xfffff100
     b70:	07010000 	streq	r0, [r1, -r0]
     b74:	0007a806 	andeq	sl, r7, r6, lsl #16
     b78:	00011420 	andeq	r1, r1, r0, lsr #8
     b7c:	109c0100 	addsne	r0, ip, r0, lsl #2
     b80:	01003078 	tsteq	r0, r8, ror r0
     b84:	01002007 	tsteq	r0, r7
     b88:	91020000 	mrsls	r0, (UNDEF: 2)
     b8c:	31781054 	cmncc	r8, r4, asr r0
     b90:	27070100 	strcs	r0, [r7, -r0, lsl #2]
     b94:	00000100 	andeq	r0, r0, r0, lsl #2
     b98:	10509102 	subsne	r9, r0, r2, lsl #2
     b9c:	01003079 	tsteq	r0, r9, ror r0
     ba0:	01002e07 	tsteq	r0, r7, lsl #28
     ba4:	91020000 	mrsls	r0, (UNDEF: 2)
     ba8:	3179104c 	cmncc	r9, ip, asr #32
     bac:	35070100 	strcc	r0, [r7, #-256]	; 0xffffff00
     bb0:	00000100 	andeq	r0, r0, r0, lsl #2
     bb4:	0e489102 	sqteqe	f1, f2
     bb8:	00000430 	andeq	r0, r0, r0, lsr r4
     bbc:	450a0801 	strmi	r0, [sl, #-2049]	; 0xfffff7ff
     bc0:	02000000 	andeq	r0, r0, #0
     bc4:	fa0e7791 	blx	39ea10 <startup-0x1fc615f0>
     bc8:	01000003 	tsteq	r0, r3
     bcc:	01000909 	tsteq	r0, r9, lsl #18
     bd0:	91020000 	mrsls	r0, (UNDEF: 2)
     bd4:	04400e60 	strbeq	r0, [r0], #-3680	; 0xfffff1a0
     bd8:	1a010000 	bne	40be0 <startup-0x1ffbf420>
     bdc:	00010009 	andeq	r0, r1, r9
     be0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     be4:	0004050e 	andeq	r0, r4, lr, lsl #10
     be8:	091b0100 	ldmdbeq	fp, {r8}
     bec:	00000100 	andeq	r0, r0, r0, lsl #2
     bf0:	0e589102 	logeqe	f1, f2
     bf4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     bf8:	00091c01 	andeq	r1, r9, r1, lsl #24
     bfc:	02000001 	andeq	r0, r0, #1
     c00:	790c7091 	stmdbvc	ip, {r0, r4, r7, ip, sp, lr}
     c04:	091d0100 	ldmdbeq	sp, {r8}
     c08:	00000100 	andeq	r0, r0, r0, lsl #2
     c0c:	0e6c9102 	lgneqe	f1, f2
     c10:	000003ca 	andeq	r0, r0, sl, asr #7
     c14:	00091e01 	andeq	r1, r9, r1, lsl #28
     c18:	02000001 	andeq	r0, r0, #1
     c1c:	580d6891 	stmdapl	sp, {r0, r4, r7, fp, sp, lr}
     c20:	5a200008 	bpl	800c48 <startup-0x1f7ff3b8>
     c24:	0c000000 	stceq	0, cr0, [r0], {-0}
     c28:	24010078 	strcs	r0, [r1], #-120	; 0xffffff88
     c2c:	0001000d 	andeq	r0, r1, sp
     c30:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     c34:	45000000 	strmi	r0, [r0, #-0]
     c38:	04000001 	streq	r0, [r0], #-1
     c3c:	00057c00 	andeq	r7, r5, r0, lsl #24
     c40:	00010400 	andeq	r0, r1, r0, lsl #8
     c44:	0c000000 	stceq	0, cr0, [r0], {-0}
     c48:	00000492 	muleq	r0, r2, r4
     c4c:	0000018c 	andeq	r0, r0, ip, lsl #3
     c50:	20000abc 			; <UNDEFINED> instruction: 0x20000abc
     c54:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c58:	000006c1 	andeq	r0, r0, r1, asr #13
     c5c:	db070402 	blle	1c1c6c <startup-0x1fe3e394>
     c60:	02000000 	andeq	r0, r0, #0
     c64:	00d50702 	sbcseq	r0, r5, r2, lsl #14
     c68:	01020000 	mrseq	r0, (UNDEF: 2)
     c6c:	0000b508 	andeq	fp, r0, r8, lsl #10
     c70:	04a90300 	strteq	r0, [r9], #768	; 0x300
     c74:	52010000 	andpl	r0, r1, #0
     c78:	000c4406 	andeq	r4, ip, r6, lsl #8
     c7c:	00004820 	andeq	r4, r0, r0, lsr #16
     c80:	6d9c0100 	ldfvss	f0, [ip]
     c84:	04000000 	streq	r0, [r0], #-0
     c88:	52010063 	andpl	r0, r1, #99	; 0x63
     c8c:	0000331d 	andeq	r3, r0, sp, lsl r3
     c90:	5f910200 	svcpl	0x00910200
     c94:	0004b105 	andeq	fp, r4, r5, lsl #2
     c98:	0a540100 	beq	15010a0 <startup-0x1eafef60>
     c9c:	0000006d 	andeq	r0, r0, sp, rrx
     ca0:	00609102 	rsbeq	r9, r0, r2, lsl #2
     ca4:	00007d06 	andeq	r7, r0, r6, lsl #26
     ca8:	00007d00 	andeq	r7, r0, r0, lsl #26
     cac:	00250700 	eoreq	r0, r5, r0, lsl #14
     cb0:	000f0000 	andeq	r0, pc, r0
     cb4:	be080102 	adflte	f0, f0, f2
     cb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     cbc:	00000474 	andeq	r0, r0, r4, ror r4
     cc0:	330f3901 	movwcc	r3, #63745	; 0xf901
     cc4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     cc8:	7c20000b 	stcvc	0, cr0, [r0], #-44	; 0xffffffd4
     ccc:	01000000 	mrseq	r0, (UNDEF: 0)
     cd0:	0000e59c 	muleq	r0, ip, r5
     cd4:	03fa0500 	mvnseq	r0, #0, 10
     cd8:	3c010000 	stccc	0, cr0, [r1], {-0}
     cdc:	0000e509 	andeq	lr, r0, r9, lsl #10
     ce0:	68910200 	ldmvs	r1, {r9}
     ce4:	79656b09 	stmdbvc	r5!, {r0, r3, r8, r9, fp, sp, lr}^
     ce8:	0a3f0100 	beq	fc10f0 <startup-0x1f03ef10>
     cec:	0000006d 	andeq	r0, r0, sp, rrx
     cf0:	05549102 	ldrbeq	r9, [r4, #-258]	; 0xfffffefe
     cf4:	00000499 	muleq	r0, r9, r4
     cf8:	e5094101 	str	r4, [r9, #-257]	; 0xfffffeff
     cfc:	02000000 	andeq	r0, r0, #0
     d00:	e40a6491 	str	r6, [sl], #-1169	; 0xfffffb6f
     d04:	4220000b 	eormi	r0, r0, #11
     d08:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     d0c:	00776f72 	rsbseq	r6, r7, r2, ror pc
     d10:	e50e4201 	str	r4, [lr, #-513]	; 0xfffffdff
     d14:	02000000 	andeq	r0, r0, #0
     d18:	00006c91 	muleq	r0, r1, ip
     d1c:	6905040b 	stmdbvs	r5, {r0, r1, r3, sl}
     d20:	0c00746e 	cfstrseq	mvf7, [r0], {110}	; 0x6e
     d24:	000004a0 	andeq	r0, r0, r0, lsr #9
     d28:	84062a01 	strhi	r2, [r6], #-2561	; 0xfffff5ff
     d2c:	4420000b 	strtmi	r0, [r0], #-11
     d30:	01000000 	mrseq	r0, (UNDEF: 0)
     d34:	04870d9c 	streq	r0, [r7], #3484	; 0xd9c
     d38:	17010000 	strne	r0, [r1, -r0]
     d3c:	0000e506 	andeq	lr, r0, r6, lsl #10
     d40:	000b2000 	andeq	r2, fp, r0
     d44:	00006420 	andeq	r6, r0, r0, lsr #8
     d48:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
     d4c:	09000001 	stmdbeq	r0, {r0}
     d50:	1a010063 	bne	40ee4 <startup-0x1ffbf11c>
     d54:	00007d0a 	andeq	r7, r0, sl, lsl #26
     d58:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d5c:	04680e00 	strbteq	r0, [r8], #-3584	; 0xfffff200
     d60:	0b010000 	bleq	40d68 <startup-0x1ffbf298>
     d64:	000abc06 	andeq	fp, sl, r6, lsl #24
     d68:	00006420 	andeq	r6, r0, r0, lsr #8
     d6c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     d70:	00776f72 	rsbseq	r6, r7, r2, ror pc
     d74:	e5160b01 	ldr	r0, [r6, #-2817]	; 0xfffff4ff
     d78:	02000000 	andeq	r0, r0, #0
     d7c:	00007491 	muleq	r0, r1, r4
     d80:	000003ac 	andeq	r0, r0, ip, lsr #7
     d84:	06800004 	streq	r0, [r0], r4
     d88:	01040000 	mrseq	r0, (UNDEF: 4)
     d8c:	00000000 	andeq	r0, r0, r0
     d90:	00053d0c 	andeq	r3, r5, ip, lsl #26
     d94:	00018c00 	andeq	r8, r1, r0, lsl #24
     d98:	000c8c00 	andeq	r8, ip, r0, lsl #24
     d9c:	00057020 	andeq	r7, r5, r0, lsr #32
     da0:	0007f700 	andeq	pc, r7, r0, lsl #14
     da4:	02020200 	andeq	r0, r2, #0, 4
     da8:	00450901 	subeq	r0, r5, r1, lsl #18
     dac:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
     db0:	0a020200 	beq	815b8 <startup-0x1ff7ea48>
     db4:	00000045 	andeq	r0, r0, r5, asr #32
     db8:	00790300 	rsbseq	r0, r9, r0, lsl #6
     dbc:	450c0202 	strmi	r0, [ip, #-514]	; 0xfffffdfe
     dc0:	01000000 	mrseq	r0, (UNDEF: 0)
     dc4:	08010400 	stmdaeq	r1, {sl}
     dc8:	000000be 	strheq	r0, [r0], -lr
     dcc:	0003d405 	andeq	sp, r3, r5, lsl #8
     dd0:	02030200 	andeq	r0, r3, #0, 4
     dd4:	00000025 	andeq	r0, r0, r5, lsr #32
     dd8:	17024802 	strne	r4, [r2, -r2, lsl #16]
     ddc:	00009509 	andeq	r9, r0, r9, lsl #10
     de0:	02b70600 	adcseq	r0, r7, #0, 12
     de4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     de8:	00009509 	andeq	r9, r0, r9, lsl #10
     dec:	7b060000 	blvc	180df4 <startup-0x1fe7f20c>
     df0:	02000002 	andeq	r0, r0, #2
     df4:	00950919 	addseq	r0, r5, r9, lsl r9
     df8:	06040000 	streq	r0, [r4], -r0
     dfc:	00000281 	andeq	r0, r0, r1, lsl #5
     e00:	95091a02 	strls	r1, [r9, #-2562]	; 0xfffff5fe
     e04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e08:	00787003 	rsbseq	r7, r8, r3
     e0c:	9c0b1b02 			; <UNDEFINED> instruction: 0x9c0b1b02
     e10:	0c000000 	stceq	0, cr0, [r0], {-0}
     e14:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     e18:	00746e69 	rsbseq	r6, r4, r9, ror #28
     e1c:	00004c08 	andeq	r4, r0, r8, lsl #24
     e20:	0000ac00 	andeq	sl, r0, r0, lsl #24
     e24:	00ac0900 	adceq	r0, ip, r0, lsl #18
     e28:	001d0000 	andseq	r0, sp, r0
     e2c:	db070404 	blle	1c1e44 <startup-0x1fe3e1bc>
     e30:	05000000 	streq	r0, [r0, #-0]
     e34:	000001f1 	strdeq	r0, [r0], -r1
     e38:	bf0e1c02 	svclt	0x000e1c02
     e3c:	0a000000 	beq	e44 <startup-0x1ffff1bc>
     e40:	00005804 	andeq	r5, r0, r4, lsl #16
     e44:	02b20b00 	adcseq	r0, r2, #0, 22
     e48:	02240000 	eoreq	r0, r4, #0
     e4c:	0148101e 	cmpeq	r8, lr, lsl r0
     e50:	67030000 	strvs	r0, [r3, -r0]
     e54:	02006f65 	andeq	r6, r0, #404	; 0x194
     e58:	00b30f1f 	adcseq	r0, r3, pc, lsl pc
     e5c:	06000000 	streq	r0, [r0], -r0
     e60:	00000212 	andeq	r0, r0, r2, lsl r2
     e64:	95092002 	strls	r2, [r9, #-2]
     e68:	04000000 	streq	r0, [r0], #-0
     e6c:	00021706 	andeq	r1, r2, r6, lsl #14
     e70:	0e200200 	cdpeq	2, 2, cr0, cr0, cr0, {0}
     e74:	00000095 	muleq	r0, r5, r0
     e78:	023b0608 	eorseq	r0, fp, #8, 12	; 0x800000
     e7c:	21020000 	mrscs	r0, (UNDEF: 2)
     e80:	00009509 	andeq	r9, r0, r9, lsl #10
     e84:	40060c00 	andmi	r0, r6, r0, lsl #24
     e88:	02000002 	andeq	r0, r0, #2
     e8c:	00950e21 	addseq	r0, r5, r1, lsr #28
     e90:	06100000 	ldreq	r0, [r0], -r0
     e94:	0000029b 	muleq	r0, fp, r2
     e98:	590d2202 	stmdbpl	sp, {r1, r9, sp}
     e9c:	14000001 	strne	r0, [r0], #-1
     ea0:	00059d06 	andeq	r9, r5, r6, lsl #26
     ea4:	0d230200 	sfmeq	f0, 4, [r3, #-0]
     ea8:	00000159 	andeq	r0, r0, r9, asr r1
     eac:	020d0618 	andeq	r0, sp, #24, 12	; 0x1800000
     eb0:	24020000 	strcs	r0, [r2], #-0
     eb4:	0001590c 	andeq	r5, r1, ip, lsl #18
     eb8:	31061c00 	tstcc	r6, r0, lsl #24
     ebc:	02000002 	andeq	r0, r0, #2
     ec0:	01740d25 	cmneq	r4, r5, lsr #26
     ec4:	00200000 	eoreq	r0, r0, r0
     ec8:	0001530c 	andeq	r5, r1, ip, lsl #6
     ecc:	01530d00 	cmpeq	r3, r0, lsl #26
     ed0:	0a000000 	beq	ed8 <startup-0x1ffff128>
     ed4:	0000c504 	andeq	ip, r0, r4, lsl #10
     ed8:	48040a00 	stmdami	r4, {r9, fp}
     edc:	0c000001 	stceq	0, cr0, [r0], {1}
     ee0:	00000174 	andeq	r0, r0, r4, ror r1
     ee4:	0001530d 	andeq	r5, r1, sp, lsl #6
     ee8:	00950d00 	addseq	r0, r5, r0, lsl #26
     eec:	950d0000 	strls	r0, [sp, #-0]
     ef0:	00000000 	andeq	r0, r0, r0
     ef4:	015f040a 	cmpeq	pc, sl, lsl #8
     ef8:	73050000 	movwvc	r0, #20480	; 0x5000
     efc:	02000005 	andeq	r0, r0, #5
     f00:	00c50a26 	sbceq	r0, r5, r6, lsr #20
     f04:	02040000 	andeq	r0, r4, #0
     f08:	0000d507 	andeq	sp, r0, r7, lsl #10
     f0c:	08010400 	stmdaeq	r1, {sl}
     f10:	000000b5 	strheq	r0, [r0], -r5
     f14:	01030c02 	tsteq	r3, r2, lsl #24
     f18:	0001c512 	andeq	ip, r1, r2, lsl r5
     f1c:	03100600 	tsteq	r0, #0, 12
     f20:	02030000 	andeq	r0, r3, #0
     f24:	00009506 	andeq	r9, r0, r6, lsl #10
     f28:	0c060000 	stceq	0, cr0, [r6], {-0}
     f2c:	03000003 	movweq	r0, #3
     f30:	00950603 	addseq	r0, r5, r3, lsl #12
     f34:	06040000 	streq	r0, [r4], -r0
     f38:	00000304 	andeq	r0, r0, r4, lsl #6
     f3c:	95060403 	strls	r0, [r6, #-1027]	; 0xfffffbfd
     f40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f44:	01940e00 	orrseq	r0, r4, r0, lsl #28
     f48:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     f4c:	03000003 	movweq	r0, #3
     f50:	01c50305 	biceq	r0, r5, r5, lsl #6
     f54:	330f0000 	movwcc	r0, #61440	; 0xf000
     f58:	03000003 	movweq	r0, #3
     f5c:	01ca0d06 	biceq	r0, sl, r6, lsl #26
     f60:	03050000 	movweq	r0, #20480	; 0x5000
     f64:	20001244 	andcs	r1, r0, r4, asr #4
     f68:	00054b10 	andeq	r4, r5, r0, lsl fp
     f6c:	06240100 	strteq	r0, [r4], -r0, lsl #2
     f70:	00000045 	andeq	r0, r0, r5, asr #32
     f74:	12500305 	subsne	r0, r0, #335544320	; 0x14000000
     f78:	c4102000 	ldrgt	r2, [r0], #-0
     f7c:	01000004 	tsteq	r0, r4
     f80:	00450625 	subeq	r0, r5, r5, lsr #12
     f84:	03050000 	movweq	r0, #20480	; 0x5000
     f88:	20001251 	andcs	r1, r0, r1, asr r2
     f8c:	00052510 	andeq	r2, r5, r0, lsl r5
     f90:	06260100 	strteq	r0, [r6], -r0, lsl #2
     f94:	00000045 	andeq	r0, r0, r5, asr #32
     f98:	12e80305 	rscne	r0, r8, #335544320	; 0x14000000
     f9c:	e8102000 	ldmda	r0, {sp}
     fa0:	01000004 	tsteq	r0, r4
     fa4:	02300727 	eorseq	r0, r0, #10223616	; 0x9c0000
     fa8:	03050000 	movweq	r0, #20480	; 0x5000
     fac:	20001254 	andcs	r1, r0, r4, asr r2
     fb0:	0045040a 	subeq	r0, r5, sl, lsl #8
     fb4:	0d110000 	ldceq	0, cr0, [r1, #-0]
     fb8:	01000005 	tsteq	r0, r5
     fbc:	117c06ac 	cmnne	ip, ip, lsr #13
     fc0:	00802000 	addeq	r2, r0, r0
     fc4:	9c010000 	stcls	0, cr0, [r1], {-0}
     fc8:	00000289 	andeq	r0, r0, r9, lsl #5
     fcc:	01006312 	tsteq	r0, r2, lsl r3
     fd0:	018d10af 	orreq	r1, sp, pc, lsr #1
     fd4:	91020000 	mrsls	r0, (UNDEF: 2)
     fd8:	04e30f6f 	strbteq	r0, [r3], #3951	; 0xf6f
     fdc:	b0010000 	andlt	r0, r1, r0
     fe0:	00017a0a 	andeq	r7, r1, sl, lsl #20
     fe4:	48910200 	ldmmi	r1, {r9}
     fe8:	00056b0f 	andeq	r6, r5, pc, lsl #22
     fec:	0ab20100 	beq	fec813f4 <winning_score+0xdec8010c>
     ff0:	0000017a 	andeq	r0, r0, sl, ror r1
     ff4:	7fa49103 	svcvc	0x00a49103
     ff8:	0005120f 	andeq	r1, r5, pc, lsl #4
     ffc:	0ab30100 	beq	fecc1404 <winning_score+0xdecc011c>
    1000:	0000017a 	andeq	r0, r0, sl, ror r1
    1004:	7f809103 	svcvc	0x00809103
    1008:	051a1100 	ldreq	r1, [sl, #-256]	; 0xffffff00
    100c:	62010000 	andvs	r0, r1, #0
    1010:	000ebc06 	andeq	fp, lr, r6, lsl #24
    1014:	0002c020 	andeq	ip, r2, r0, lsr #32
    1018:	db9c0100 	blle	fe701420 <winning_score+0xde700138>
    101c:	13000002 	movwne	r0, #2
    1020:	0000056b 	andeq	r0, r0, fp, ror #10
    1024:	7a196201 	bvc	659830 <startup-0x1f9a67d0>
    1028:	02000001 	andeq	r0, r0, #1
    102c:	12137091 	andsne	r7, r3, #145	; 0x91
    1030:	01000005 	tsteq	r0, r5
    1034:	017a2a62 	cmneq	sl, r2, ror #20
    1038:	91020000 	mrsls	r0, (UNDEF: 2)
    103c:	00631214 	rsbeq	r1, r3, r4, lsl r2
    1040:	8d106301 	ldchi	3, cr6, [r0, #-4]
    1044:	02000001 	andeq	r0, r0, #1
    1048:	e30f5f91 	movw	r5, #65425	; 0xff91
    104c:	01000004 	tsteq	r0, r4
    1050:	017a0a64 	cmneq	sl, r4, ror #20
    1054:	91030000 	mrsls	r0, (UNDEF: 3)
    1058:	14007fb8 	strne	r7, [r0], #-4024	; 0xfffff048
    105c:	000004f4 	strdeq	r0, [r0], -r4
    1060:	80065901 	andhi	r5, r6, r1, lsl #18
    1064:	3c20000e 	stccc	0, cr0, [r0], #-56	; 0xffffffc8
    1068:	01000000 	mrseq	r0, (UNDEF: 0)
    106c:	057b159c 	ldrbeq	r1, [fp, #-1436]!	; 0xfffffa64
    1070:	43010000 	movwmi	r0, #4096	; 0x1000
    1074:	000df806 	andeq	pc, sp, r6, lsl #16
    1078:	00008820 	andeq	r8, r0, r0, lsr #16
    107c:	229c0100 	addscs	r0, ip, #0, 2
    1080:	0f000003 	svceq	0x00000003
    1084:	00000544 	andeq	r0, r0, r4, asr #10
    1088:	30094401 	andcc	r4, r9, r1, lsl #8
    108c:	02000002 	andeq	r0, r0, #2
    1090:	bd0f7491 	cfstrslt	mvf7, [pc, #-580]	; e54 <startup-0x1ffff1ac>
    1094:	01000004 	tsteq	r0, r4
    1098:	02300945 	eorseq	r0, r0, #1130496	; 0x114000
    109c:	91020000 	mrsls	r0, (UNDEF: 2)
    10a0:	fd150070 	ldc2	0, cr0, [r5, #-448]	; 0xfffffe40
    10a4:	01000004 	tsteq	r0, r4
    10a8:	0d860633 	stceq	6, cr0, [r6, #204]	; 0xcc
    10ac:	00722000 	rsbseq	r2, r2, r0
    10b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    10b4:	00000346 	andeq	r0, r0, r6, asr #6
    10b8:	01007312 	tsteq	r0, r2, lsl r3
    10bc:	02300834 	eorseq	r0, r0, #52, 16	; 0x340000
    10c0:	91020000 	mrsls	r0, (UNDEF: 2)
    10c4:	33160074 	tstcc	r6, #116	; 0x74
    10c8:	01000005 	tsteq	r0, r5
    10cc:	0045062a 	subeq	r0, r5, sl, lsr #12
    10d0:	0d240000 	stceq	0, cr0, [r4, #-0]
    10d4:	00622000 	rsbeq	r2, r2, r0
    10d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10dc:	0000039d 	muleq	r0, sp, r3
    10e0:	0004d313 	andeq	sp, r4, r3, lsl r3
    10e4:	182a0100 	stmdane	sl!, {r8}
    10e8:	0000017a 	andeq	r0, r0, sl, ror r1
    10ec:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    10f0:	000004db 	ldrdeq	r0, [r0], -fp
    10f4:	7a292a01 	bvc	a4b900 <startup-0x1f5b4700>
    10f8:	02000001 	andeq	r0, r0, #1
    10fc:	400f1491 	mulmi	pc, r1, r4	; <UNPREDICTABLE>
    1100:	01000004 	tsteq	r0, r4
    1104:	0095062b 	addseq	r0, r5, fp, lsr #12
    1108:	91020000 	mrsls	r0, (UNDEF: 2)
    110c:	04050f5c 	streq	r0, [r5], #-3932	; 0xfffff0a4
    1110:	2c010000 	stccs	0, cr0, [r1], {-0}
    1114:	00009506 	andeq	r9, r0, r6, lsl #10
    1118:	58910200 	ldmpl	r1, {r9}
    111c:	055a1400 	ldrbeq	r1, [sl, #-1024]	; 0xfffffc00
    1120:	10010000 	andne	r0, r1, r0
    1124:	000c8c06 	andeq	r8, ip, r6, lsl #24
    1128:	00009820 	andeq	r9, r0, r0, lsr #16
    112c:	009c0100 	addseq	r0, ip, r0, lsl #2
    1130:	00000053 	andeq	r0, r0, r3, asr r0
    1134:	07df0004 	ldrbeq	r0, [pc, r4]
    1138:	01040000 	mrseq	r0, (UNDEF: 4)
    113c:	00000000 	andeq	r0, r0, r0
    1140:	0005880c 	andeq	r8, r5, ip, lsl #16
    1144:	00018c00 	andeq	r8, r1, r0, lsl #24
    1148:	0011fc00 	andseq	pc, r1, r0, lsl #24
    114c:	00001e20 	andeq	r1, r0, r0, lsr #28
    1150:	000a1a00 	andeq	r1, sl, r0, lsl #20
    1154:	62610200 	rsbvs	r0, r1, #0, 4
    1158:	05010073 	streq	r0, [r1, #-115]	; 0xffffff8d
    115c:	00004f05 	andeq	r4, r0, r5, lsl #30
    1160:	0011fc00 	andseq	pc, r1, r0, lsl #24
    1164:	00001e20 	andeq	r1, r0, r0, lsr #28
    1168:	4f9c0100 	svcmi	0x009c0100
    116c:	03000000 	movweq	r0, #0
    1170:	006d756e 	rsbeq	r7, sp, lr, ror #10
    1174:	4f0d0501 	svcmi	0x000d0501
    1178:	02000000 	andeq	r0, r0, #0
    117c:	04007491 	streq	r7, [r0], #-1169	; 0xfffffb6f
    1180:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1184:	d2000074 	andle	r0, r0, #116	; 0x74
    1188:	04000000 	streq	r0, [r0], #-0
    118c:	00082d00 	andeq	r2, r8, r0, lsl #26
    1190:	00010400 	andeq	r0, r1, r0, lsl #8
    1194:	0c000000 	stceq	0, cr0, [r0], {-0}
    1198:	000005d3 	ldrdeq	r0, [r0], -r3
    119c:	0000018c 	andeq	r0, r0, ip, lsl #3
	...
    11a8:	00000a5c 	andeq	r0, r0, ip, asr sl
    11ac:	db070402 	blle	1c21bc <startup-0x1fe3de44>
    11b0:	02000000 	andeq	r0, r0, #0
    11b4:	00d50702 	sbcseq	r0, r5, r2, lsl #14
    11b8:	01020000 	mrseq	r0, (UNDEF: 2)
    11bc:	0000b508 	andeq	fp, r0, r8, lsl #10
    11c0:	058f0300 	streq	r0, [pc, #768]	; 14c8 <startup-0x1fffeb38>
    11c4:	22010000 	andcs	r0, r1, #0
    11c8:	00122c1d 	andseq	r2, r2, sp, lsl ip
    11cc:	00000620 	andeq	r0, r0, r0, lsr #12
    11d0:	699c0100 	ldmibvs	ip, {r8}
    11d4:	04000000 	streq	r0, [r0], #-0
    11d8:	22010078 	andcs	r0, r1, #120	; 0x78
    11dc:	00006935 	andeq	r6, r0, r5, lsr r9
    11e0:	04500100 	ldrbeq	r0, [r0], #-256	; 0xffffff00
    11e4:	22010079 	andcs	r0, r1, #121	; 0x79
    11e8:	0000693c 	andeq	r6, r0, ip, lsr r9
    11ec:	00510100 	subseq	r0, r1, r0, lsl #2
    11f0:	69050405 	stmdbvs	r5, {r0, r2, sl}
    11f4:	0300746e 	movweq	r7, #1134	; 0x46e
    11f8:	000005dd 	ldrdeq	r0, [r0], -sp
    11fc:	261d1c01 	ldrcs	r1, [sp], -r1, lsl #24
    1200:	06200012 			; <UNDEFINED> instruction: 0x06200012
    1204:	01000000 	mrseq	r0, (UNDEF: 0)
    1208:	00009f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    120c:	00780400 	rsbseq	r0, r8, r0, lsl #8
    1210:	69331c01 	ldmdbvs	r3!, {r0, sl, fp, ip}
    1214:	01000000 	mrseq	r0, (UNDEF: 0)
    1218:	00790450 	rsbseq	r0, r9, r0, asr r4
    121c:	693a1c01 	ldmdbvs	sl!, {r0, sl, fp, ip}
    1220:	01000000 	mrseq	r0, (UNDEF: 0)
    1224:	a3060051 	movwge	r0, #24657	; 0x6051
    1228:	01000005 	tsteq	r0, r5
    122c:	12201d17 	eorne	r1, r0, #1472	; 0x5c0
    1230:	00062000 	andeq	r2, r6, r0
    1234:	9c010000 	stcls	0, cr0, [r1], {-0}
    1238:	0005b806 	andeq	fp, r5, r6, lsl #16
    123c:	1d110100 	ldfnes	f0, [r1, #-0]
    1240:	2000121a 	andcs	r1, r0, sl, lsl r2
    1244:	00000006 	andeq	r0, r0, r6
    1248:	cb079c01 	blgt	1e8254 <startup-0x1fe17dac>
    124c:	01000005 	tsteq	r0, r5
    1250:	00000106 	andeq	r0, r0, r6, lsl #2
    1254:	000c2000 	andeq	r2, ip, r0
    1258:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
  20:	03193f01 	tsteq	r9, #1, 30
  24:	3b0b3a0e 	blcc	2ce864 <startup-0x1fd3179c>
  28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  2c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  30:	96184006 	ldrls	r4, [r8], -r6
  34:	13011942 	movwne	r1, #6466	; 0x1942
  38:	05040000 	streq	r0, [r4, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  48:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  50:	0b3b0b3a 	bleq	ec2d40 <startup-0x1f13d2c0>
  54:	13490b39 	movtne	r0, #39737	; 0x9b39
  58:	00001802 	andeq	r1, r0, r2, lsl #16
  5c:	0b002406 	bleq	907c <startup-0x1fff6f84>
  60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  64:	07000008 	streq	r0, [r0, -r8]
  68:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  6c:	0b3a0e03 	bleq	e83880 <startup-0x1f17c780>
  70:	0b390b3b 	bleq	e42d64 <startup-0x1f1bd29c>
  74:	06120111 			; <UNDEFINED> instruction: 0x06120111
  78:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  7c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  80:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  84:	0b3b0b3a 	bleq	ec2d74 <startup-0x1f13d28c>
  88:	13490b39 	movtne	r0, #39737	; 0x9b39
  8c:	00001802 	andeq	r1, r0, r2, lsl #16
  90:	03003409 	movweq	r3, #1033	; 0x409
  94:	3b0b3a08 	blcc	2ce8bc <startup-0x1fd31744>
  98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  9c:	0a000013 	beq	f0 <startup-0x1fffff10>
  a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  a4:	0b3a0e03 	bleq	e838b8 <startup-0x1f17c748>
  a8:	0b390b3b 	bleq	e42d9c <startup-0x1f1bd264>
  ac:	01111349 	tsteq	r1, r9, asr #6
  b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b8:	0b000013 	bleq	10c <startup-0x1ffffef4>
  bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	13490b39 	movtne	r0, #39737	; 0x9b39
  c8:	00001802 	andeq	r1, r0, r2, lsl #16
  cc:	3f012e0c 	svccc	0x00012e0c
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	1119270b 	tstne	r9, fp, lsl #14
  dc:	40061201 	andmi	r1, r6, r1, lsl #4
  e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	3f012e0d 	svccc	0x00012e0d
  ec:	3a0e0319 	bcc	380d58 <startup-0x1fc7f2a8>
  f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	1119270b 	tstne	r9, fp, lsl #14
  f8:	40061201 	andmi	r1, r6, r1, lsl #4
  fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 100:	01000000 	mrseq	r0, (UNDEF: 0)
 104:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 108:	0e030b13 	vmoveq.32	d3[0], r0
 10c:	01110e1b 	tsteq	r1, fp, lsl lr
 110:	17100612 			; <UNDEFINED> instruction: 0x17100612
 114:	13020000 	movwne	r0, #8192	; 0x2000
 118:	3a0b0b01 	bcc	2c2d24 <startup-0x1fd3d2dc>
 11c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 120:	0013010b 	andseq	r0, r3, fp, lsl #2
 124:	000d0300 	andeq	r0, sp, r0, lsl #6
 128:	0b3a0803 	bleq	e8213c <startup-0x1f17dec4>
 12c:	0b390b3b 	bleq	e42e20 <startup-0x1f1bd1e0>
 130:	0b381349 	bleq	e04e5c <startup-0x1f1fb1a4>
 134:	24040000 	strcs	r0, [r4], #-0
 138:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 13c:	000e030b 	andeq	r0, lr, fp, lsl #6
 140:	00160500 	andseq	r0, r6, r0, lsl #10
 144:	0b3a0e03 	bleq	e83958 <startup-0x1f17c6a8>
 148:	0b390b3b 	bleq	e42e3c <startup-0x1f1bd1c4>
 14c:	00001349 	andeq	r1, r0, r9, asr #6
 150:	03000d06 	movweq	r0, #3334	; 0xd06
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 15c:	000b3813 	andeq	r3, fp, r3, lsl r8
 160:	00240700 	eoreq	r0, r4, r0, lsl #14
 164:	0b3e0b0b 	bleq	f82d98 <startup-0x1f07d268>
 168:	00000803 	andeq	r0, r0, r3, lsl #16
 16c:	49010108 	stmdbmi	r1, {r3, r8}
 170:	00130113 	andseq	r0, r3, r3, lsl r1
 174:	00210900 	eoreq	r0, r1, r0, lsl #18
 178:	0b2f1349 	bleq	bc4ea4 <startup-0x1f43b15c>
 17c:	0f0a0000 	svceq	0x000a0000
 180:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 184:	0b000013 	bleq	1d8 <startup-0x1ffffe28>
 188:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 18c:	0b3a0b0b 	bleq	e82dc0 <startup-0x1f17d240>
 190:	0b390b3b 	bleq	e42e84 <startup-0x1f1bd17c>
 194:	00001301 	andeq	r1, r0, r1, lsl #6
 198:	2701150c 	strcs	r1, [r1, -ip, lsl #10]
 19c:	00130119 	andseq	r0, r3, r9, lsl r1
 1a0:	00050d00 	andeq	r0, r5, r0, lsl #26
 1a4:	00001349 	andeq	r1, r0, r9, asr #6
 1a8:	0300340e 	movweq	r3, #1038	; 0x40e
 1ac:	3b0b3a0e 	blcc	2ce9ec <startup-0x1fd31614>
 1b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1b4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 1b8:	0f000018 	svceq	0x00000018
 1bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c0:	0b3a0e03 	bleq	e839d4 <startup-0x1f17c62c>
 1c4:	0b390b3b 	bleq	e42eb8 <startup-0x1f1bd148>
 1c8:	13491927 	movtne	r1, #39207	; 0x9927
 1cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1d4:	00130119 	andseq	r0, r3, r9, lsl r1
 1d8:	00051000 	andeq	r1, r5, r0
 1dc:	0b3a0e03 	bleq	e839f0 <startup-0x1f17c610>
 1e0:	0b390b3b 	bleq	e42ed4 <startup-0x1f1bd12c>
 1e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1e8:	34110000 	ldrcc	r0, [r1], #-0
 1ec:	3a0e0300 	bcc	380df4 <startup-0x1fc7f20c>
 1f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1f8:	12000018 	andne	r0, r0, #24
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	0b390b3b 	bleq	e42ef8 <startup-0x1f1bd108>
 208:	01111927 	tsteq	r1, r7, lsr #18
 20c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 210:	01194297 			; <UNDEFINED> instruction: 0x01194297
 214:	13000013 	movwne	r0, #19
 218:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 21c:	0b3a0e03 	bleq	e83a30 <startup-0x1f17c5d0>
 220:	0b390b3b 	bleq	e42f14 <startup-0x1f1bd0ec>
 224:	01111927 	tsteq	r1, r7, lsr #18
 228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 22c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 230:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 234:	0111010b 	tsteq	r1, fp, lsl #2
 238:	00000612 	andeq	r0, r0, r2, lsl r6
 23c:	03003415 	movweq	r3, #1045	; 0x415
 240:	3b0b3a08 	blcc	2cea68 <startup-0x1fd31598>
 244:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 248:	00180213 	andseq	r0, r8, r3, lsl r2
 24c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 250:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 25c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 260:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 264:	00000019 	andeq	r0, r0, r9, lsl r0
 268:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 26c:	030b130e 	movweq	r1, #45838	; 0xb30e
 270:	110e1b0e 	tstne	lr, lr, lsl #22
 274:	10061201 	andne	r1, r6, r1, lsl #4
 278:	02000017 	andeq	r0, r0, #23
 27c:	0b0b0024 	bleq	2c0314 <startup-0x1fd3fcec>
 280:	0e030b3e 	vmoveq.16	d3[0], r0
 284:	13030000 	movwne	r0, #12288	; 0x3000
 288:	3a0b0b01 	bcc	2c2e94 <startup-0x1fd3d16c>
 28c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 290:	0013010b 	andseq	r0, r3, fp, lsl #2
 294:	000d0400 	andeq	r0, sp, r0, lsl #8
 298:	0b3a0e03 	bleq	e83aac <startup-0x1f17c554>
 29c:	0b390b3b 	bleq	e42f90 <startup-0x1f1bd070>
 2a0:	0b381349 	bleq	e04fcc <startup-0x1f1fb034>
 2a4:	35050000 	strcc	r0, [r5, #-0]
 2a8:	00134900 	andseq	r4, r3, r0, lsl #18
 2ac:	00240600 	eoreq	r0, r4, r0, lsl #12
 2b0:	0b3e0b0b 	bleq	f82ee4 <startup-0x1f07d11c>
 2b4:	00000803 	andeq	r0, r0, r3, lsl #16
 2b8:	03001607 	movweq	r1, #1543	; 0x607
 2bc:	3b0b3a0e 	blcc	2ceafc <startup-0x1fd31504>
 2c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2c4:	08000013 	stmdaeq	r0, {r0, r1, r4}
 2c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2cc:	0b3b0b3a 	bleq	ec2fbc <startup-0x1f13d044>
 2d0:	13490b39 	movtne	r0, #39737	; 0x9b39
 2d4:	00001802 	andeq	r1, r0, r2, lsl #16
 2d8:	03003409 	movweq	r3, #1033	; 0x409
 2dc:	3b0b3a0e 	blcc	2ceb1c <startup-0x1fd314e4>
 2e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2e4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e8:	0a000018 	beq	350 <startup-0x1ffffcb0>
 2ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	0b390b3b 	bleq	e42fe8 <startup-0x1f1bd018>
 2f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 300:	0b000019 	bleq	36c <startup-0x1ffffc94>
 304:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 308:	0b3a0e03 	bleq	e83b1c <startup-0x1f17c4e4>
 30c:	0b390b3b 	bleq	e43000 <startup-0x1f1bd000>
 310:	01111349 	tsteq	r1, r9, asr #6
 314:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 318:	00194297 	mulseq	r9, r7, r2
 31c:	11010000 	mrsne	r0, (UNDEF: 1)
 320:	130e2501 	movwne	r2, #58625	; 0xe501
 324:	1b0e030b 	blne	380f58 <startup-0x1fc7f0a8>
 328:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 32c:	00171006 	andseq	r1, r7, r6
 330:	01130200 	tsteq	r3, r0, lsl #4
 334:	0b3a0b0b 	bleq	e82f68 <startup-0x1f17d098>
 338:	0b390b3b 	bleq	e4302c <startup-0x1f1bcfd4>
 33c:	00001301 	andeq	r1, r0, r1, lsl #6
 340:	03000d03 	movweq	r0, #3331	; 0xd03
 344:	3b0b3a08 	blcc	2ceb6c <startup-0x1fd31494>
 348:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 34c:	000b3813 	andeq	r3, fp, r3, lsl r8
 350:	000d0400 	andeq	r0, sp, r0, lsl #8
 354:	0b3a0e03 	bleq	e83b68 <startup-0x1f17c498>
 358:	0b390b3b 	bleq	e4304c <startup-0x1f1bcfb4>
 35c:	0b381349 	bleq	e05088 <startup-0x1f1faf78>
 360:	24050000 	strcs	r0, [r5], #-0
 364:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 368:	000e030b 	andeq	r0, lr, fp, lsl #6
 36c:	00350600 	eorseq	r0, r5, r0, lsl #12
 370:	00001349 	andeq	r1, r0, r9, asr #6
 374:	03001607 	movweq	r1, #1543	; 0x607
 378:	3b0b3a0e 	blcc	2cebb8 <startup-0x1fd31448>
 37c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 380:	08000013 	stmdaeq	r0, {r0, r1, r4}
 384:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 388:	0b3a0e03 	bleq	e83b9c <startup-0x1f17c464>
 38c:	0b390b3b 	bleq	e43080 <startup-0x1f1bcf80>
 390:	01111927 	tsteq	r1, r7, lsr #18
 394:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 398:	01194296 			; <UNDEFINED> instruction: 0x01194296
 39c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 3a0:	08030005 	stmdaeq	r3, {r0, r2}
 3a4:	0b3b0b3a 	bleq	ec3094 <startup-0x1f13cf6c>
 3a8:	13490b39 	movtne	r0, #39737	; 0x9b39
 3ac:	00001802 	andeq	r1, r0, r2, lsl #16
 3b0:	0b000f0a 	bleq	3fe0 <startup-0x1fffc020>
 3b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 3b8:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 3bc:	0b3a0e03 	bleq	e83bd0 <startup-0x1f17c430>
 3c0:	0b390b3b 	bleq	e430b4 <startup-0x1f1bcf4c>
 3c4:	01111927 	tsteq	r1, r7, lsr #18
 3c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3cc:	00194296 	mulseq	r9, r6, r2
 3d0:	11010000 	mrsne	r0, (UNDEF: 1)
 3d4:	130e2501 	movwne	r2, #58625	; 0xe501
 3d8:	1b0e030b 	blne	38100c <startup-0x1fc7eff4>
 3dc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3e0:	00171006 	andseq	r1, r7, r6
 3e4:	002e0200 	eoreq	r0, lr, r0, lsl #4
 3e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3ec:	0b3b0b3a 	bleq	ec30dc <startup-0x1f13cf24>
 3f0:	01110b39 	tsteq	r1, r9, lsr fp
 3f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3f8:	00194297 	mulseq	r9, r7, r2
 3fc:	002e0300 	eoreq	r0, lr, r0, lsl #6
 400:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 404:	0b3b0b3a 	bleq	ec30f4 <startup-0x1f13cf0c>
 408:	01110b39 	tsteq	r1, r9, lsr fp
 40c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 410:	00194296 	mulseq	r9, r6, r2
 414:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
 418:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 41c:	0b3b0b3a 	bleq	ec310c <startup-0x1f13cef4>
 420:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 424:	06120111 			; <UNDEFINED> instruction: 0x06120111
 428:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 42c:	00130119 	andseq	r0, r3, r9, lsl r1
 430:	00050500 	andeq	r0, r5, r0, lsl #10
 434:	0b3a0803 	bleq	e82448 <startup-0x1f17dbb8>
 438:	0b390b3b 	bleq	e4312c <startup-0x1f1bced4>
 43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 440:	0b060000 	bleq	180448 <startup-0x1fe7fbb8>
 444:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 448:	07000006 	streq	r0, [r0, -r6]
 44c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 450:	0b3b0b3a 	bleq	ec3140 <startup-0x1f13cec0>
 454:	13490b39 	movtne	r0, #39737	; 0x9b39
 458:	00001802 	andeq	r1, r0, r2, lsl #16
 45c:	0b002408 	bleq	9484 <startup-0x1fff6b7c>
 460:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 464:	0900000e 	stmdbeq	r0, {r1, r2, r3}
 468:	0b0b0024 	bleq	2c0500 <startup-0x1fd3fb00>
 46c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 470:	01000000 	mrseq	r0, (UNDEF: 0)
 474:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 478:	0e030b13 	vmoveq.32	d3[0], r0
 47c:	01110e1b 	tsteq	r1, fp, lsl lr
 480:	17100612 			; <UNDEFINED> instruction: 0x17100612
 484:	13020000 	movwne	r0, #8192	; 0x2000
 488:	3a0b0b01 	bcc	2c3094 <startup-0x1fd3cf6c>
 48c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 490:	0013010b 	andseq	r0, r3, fp, lsl #2
 494:	000d0300 	andeq	r0, sp, r0, lsl #6
 498:	0b3a0803 	bleq	e824ac <startup-0x1f17db54>
 49c:	0b390b3b 	bleq	e43190 <startup-0x1f1bce70>
 4a0:	0b381349 	bleq	e051cc <startup-0x1f1fae34>
 4a4:	24040000 	strcs	r0, [r4], #-0
 4a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4ac:	000e030b 	andeq	r0, lr, fp, lsl #6
 4b0:	00160500 	andseq	r0, r6, r0, lsl #10
 4b4:	0b3a0e03 	bleq	e83cc8 <startup-0x1f17c338>
 4b8:	0b390b3b 	bleq	e431ac <startup-0x1f1bce54>
 4bc:	00001349 	andeq	r1, r0, r9, asr #6
 4c0:	03011306 	movweq	r1, #4870	; 0x1306
 4c4:	3a0b0b0e 	bcc	2c3104 <startup-0x1fd3cefc>
 4c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4cc:	0013010b 	andseq	r0, r3, fp, lsl #2
 4d0:	000d0700 	andeq	r0, sp, r0, lsl #14
 4d4:	0b3a0e03 	bleq	e83ce8 <startup-0x1f17c318>
 4d8:	0b390b3b 	bleq	e431cc <startup-0x1f1bce34>
 4dc:	0b381349 	bleq	e05208 <startup-0x1f1fadf8>
 4e0:	0f080000 	svceq	0x00080000
 4e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 4e8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4ec:	0b0b0024 	bleq	2c0584 <startup-0x1fd3fa7c>
 4f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4f4:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 4f8:	03193f01 	tsteq	r9, #1, 30
 4fc:	3b0b3a0e 	blcc	2ced3c <startup-0x1fd312c4>
 500:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 504:	11134919 	tstne	r3, r9, lsl r9
 508:	40061201 	andmi	r1, r6, r1, lsl #4
 50c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 510:	00001301 	andeq	r1, r0, r1, lsl #6
 514:	0300050b 	movweq	r0, #1291	; 0x50b
 518:	3b0b3a0e 	blcc	2ced58 <startup-0x1fd312a8>
 51c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 520:	00180213 	andseq	r0, r8, r3, lsl r2
 524:	00340c00 	eorseq	r0, r4, r0, lsl #24
 528:	0b3a0803 	bleq	e8253c <startup-0x1f17dac4>
 52c:	0b390b3b 	bleq	e43220 <startup-0x1f1bcde0>
 530:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 534:	0b0d0000 	bleq	34053c <startup-0x1fcbfac4>
 538:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 53c:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
 540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 544:	0b3b0b3a 	bleq	ec3234 <startup-0x1f13cdcc>
 548:	13490b39 	movtne	r0, #39737	; 0x9b39
 54c:	00001802 	andeq	r1, r0, r2, lsl #16
 550:	3f012e0f 	svccc	0x00012e0f
 554:	3a0e0319 	bcc	3811c0 <startup-0x1fc7ee40>
 558:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 55c:	1119270b 	tstne	r9, fp, lsl #14
 560:	40061201 	andmi	r1, r6, r1, lsl #4
 564:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 568:	05100000 	ldreq	r0, [r0, #-0]
 56c:	3a080300 	bcc	201174 <startup-0x1fdfee8c>
 570:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 574:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 578:	00000018 	andeq	r0, r0, r8, lsl r0
 57c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 580:	030b130e 	movweq	r1, #45838	; 0xb30e
 584:	110e1b0e 	tstne	lr, lr, lsl #22
 588:	10061201 	andne	r1, r6, r1, lsl #4
 58c:	02000017 	andeq	r0, r0, #23
 590:	0b0b0024 	bleq	2c0628 <startup-0x1fd3f9d8>
 594:	0e030b3e 	vmoveq.16	d3[0], r0
 598:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 59c:	03193f01 	tsteq	r9, #1, 30
 5a0:	3b0b3a0e 	blcc	2cede0 <startup-0x1fd31220>
 5a4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5ac:	97184006 	ldrls	r4, [r8, -r6]
 5b0:	13011942 	movwne	r1, #6466	; 0x1942
 5b4:	05040000 	streq	r0, [r4, #-0]
 5b8:	3a080300 	bcc	2011c0 <startup-0x1fdfee40>
 5bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5c4:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 5c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5cc:	0b3b0b3a 	bleq	ec32bc <startup-0x1f13cd44>
 5d0:	13490b39 	movtne	r0, #39737	; 0x9b39
 5d4:	00001802 	andeq	r1, r0, r2, lsl #16
 5d8:	49010106 	stmdbmi	r1, {r1, r2, r8}
 5dc:	00130113 	andseq	r0, r3, r3, lsl r1
 5e0:	00210700 	eoreq	r0, r1, r0, lsl #14
 5e4:	0b2f1349 	bleq	bc5310 <startup-0x1f43acf0>
 5e8:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 5ec:	03193f01 	tsteq	r9, #1, 30
 5f0:	3b0b3a0e 	blcc	2cee30 <startup-0x1fd311d0>
 5f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5f8:	11134919 	tstne	r3, r9, lsl r9
 5fc:	40061201 	andmi	r1, r6, r1, lsl #4
 600:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 604:	00001301 	andeq	r1, r0, r1, lsl #6
 608:	03003409 	movweq	r3, #1033	; 0x409
 60c:	3b0b3a08 	blcc	2cee34 <startup-0x1fd311cc>
 610:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 614:	00180213 	andseq	r0, r8, r3, lsl r2
 618:	010b0a00 	tsteq	fp, r0, lsl #20
 61c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 620:	240b0000 	strcs	r0, [fp], #-0
 624:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 628:	0008030b 	andeq	r0, r8, fp, lsl #6
 62c:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 630:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 634:	0b3b0b3a 	bleq	ec3324 <startup-0x1f13ccdc>
 638:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 63c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 640:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 644:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
 648:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 64c:	0b3a0e03 	bleq	e83e60 <startup-0x1f17c1a0>
 650:	0b390b3b 	bleq	e43344 <startup-0x1f1bccbc>
 654:	13491927 	movtne	r1, #39207	; 0x9927
 658:	06120111 			; <UNDEFINED> instruction: 0x06120111
 65c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 660:	00130119 	andseq	r0, r3, r9, lsl r1
 664:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 668:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 66c:	0b3b0b3a 	bleq	ec335c <startup-0x1f13cca4>
 670:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 674:	06120111 			; <UNDEFINED> instruction: 0x06120111
 678:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 67c:	00000019 	andeq	r0, r0, r9, lsl r0
 680:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 684:	030b130e 	movweq	r1, #45838	; 0xb30e
 688:	110e1b0e 	tstne	lr, lr, lsl #22
 68c:	10061201 	andne	r1, r6, r1, lsl #4
 690:	02000017 	andeq	r0, r0, #23
 694:	0b0b0113 	bleq	2c0ae8 <startup-0x1fd3f518>
 698:	0b3b0b3a 	bleq	ec3388 <startup-0x1f13cc78>
 69c:	13010b39 	movwne	r0, #6969	; 0x1b39
 6a0:	0d030000 	stceq	0, cr0, [r3, #-0]
 6a4:	3a080300 	bcc	2012ac <startup-0x1fdfed54>
 6a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6ac:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6b0:	0400000b 	streq	r0, [r0], #-11
 6b4:	0b0b0024 	bleq	2c074c <startup-0x1fd3f8b4>
 6b8:	0e030b3e 	vmoveq.16	d3[0], r0
 6bc:	16050000 	strne	r0, [r5], -r0
 6c0:	3a0e0300 	bcc	3812c8 <startup-0x1fc7ed38>
 6c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6c8:	0013490b 	andseq	r4, r3, fp, lsl #18
 6cc:	000d0600 	andeq	r0, sp, r0, lsl #12
 6d0:	0b3a0e03 	bleq	e83ee4 <startup-0x1f17c11c>
 6d4:	0b390b3b 	bleq	e433c8 <startup-0x1f1bcc38>
 6d8:	0b381349 	bleq	e05404 <startup-0x1f1fabfc>
 6dc:	24070000 	strcs	r0, [r7], #-0
 6e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 6e4:	0008030b 	andeq	r0, r8, fp, lsl #6
 6e8:	01010800 	tsteq	r1, r0, lsl #16
 6ec:	13011349 	movwne	r1, #4937	; 0x1349
 6f0:	21090000 	mrscs	r0, (UNDEF: 9)
 6f4:	2f134900 	svccs	0x00134900
 6f8:	0a00000b 	beq	72c <startup-0x1ffff8d4>
 6fc:	0b0b000f 	bleq	2c0740 <startup-0x1fd3f8c0>
 700:	00001349 	andeq	r1, r0, r9, asr #6
 704:	0301130b 	movweq	r1, #4875	; 0x130b
 708:	3a0b0b0e 	bcc	2c3348 <startup-0x1fd3ccb8>
 70c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 710:	0013010b 	andseq	r0, r3, fp, lsl #2
 714:	01150c00 	tsteq	r5, r0, lsl #24
 718:	13011927 	movwne	r1, #6439	; 0x1927
 71c:	050d0000 	streq	r0, [sp, #-0]
 720:	00134900 	andseq	r4, r3, r0, lsl #18
 724:	00350e00 	eorseq	r0, r5, r0, lsl #28
 728:	00001349 	andeq	r1, r0, r9, asr #6
 72c:	0300340f 	movweq	r3, #1039	; 0x40f
 730:	3b0b3a0e 	blcc	2cef70 <startup-0x1fd31090>
 734:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 738:	00180213 	andseq	r0, r8, r3, lsl r2
 73c:	00341000 	eorseq	r1, r4, r0
 740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
 744:	0b390b3b 	bleq	e43438 <startup-0x1f1bcbc8>
 748:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 74c:	00001802 	andeq	r1, r0, r2, lsl #16
 750:	3f012e11 	svccc	0x00012e11
 754:	3a0e0319 	bcc	3813c0 <startup-0x1fc7ec40>
 758:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 75c:	1119270b 	tstne	r9, fp, lsl #14
 760:	40061201 	andmi	r1, r6, r1, lsl #4
 764:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 768:	00001301 	andeq	r1, r0, r1, lsl #6
 76c:	03003412 	movweq	r3, #1042	; 0x412
 770:	3b0b3a08 	blcc	2cef98 <startup-0x1fd31068>
 774:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 778:	00180213 	andseq	r0, r8, r3, lsl r2
 77c:	00051300 	andeq	r1, r5, r0, lsl #6
 780:	0b3a0e03 	bleq	e83f94 <startup-0x1f17c06c>
 784:	0b390b3b 	bleq	e43478 <startup-0x1f1bcb88>
 788:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 78c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 790:	03193f00 	tsteq	r9, #0, 30
 794:	3b0b3a0e 	blcc	2cefd4 <startup-0x1fd3102c>
 798:	110b390b 	tstne	fp, fp, lsl #18
 79c:	40061201 	andmi	r1, r6, r1, lsl #4
 7a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7a4:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 7a8:	03193f01 	tsteq	r9, #1, 30
 7ac:	3b0b3a0e 	blcc	2cefec <startup-0x1fd31014>
 7b0:	110b390b 	tstne	fp, fp, lsl #18
 7b4:	40061201 	andmi	r1, r6, r1, lsl #4
 7b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7bc:	00001301 	andeq	r1, r0, r1, lsl #6
 7c0:	3f012e16 	svccc	0x00012e16
 7c4:	3a0e0319 	bcc	381430 <startup-0x1fc7ebd0>
 7c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7d4:	97184006 	ldrls	r4, [r8, -r6]
 7d8:	13011942 	movwne	r1, #6466	; 0x1942
 7dc:	01000000 	mrseq	r0, (UNDEF: 0)
 7e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 7e4:	0e030b13 	vmoveq.32	d3[0], r0
 7e8:	01110e1b 	tsteq	r1, fp, lsl lr
 7ec:	17100612 			; <UNDEFINED> instruction: 0x17100612
 7f0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 7f4:	03193f01 	tsteq	r9, #1, 30
 7f8:	3b0b3a08 	blcc	2cf020 <startup-0x1fd30fe0>
 7fc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 800:	11134919 	tstne	r3, r9, lsl r9
 804:	40061201 	andmi	r1, r6, r1, lsl #4
 808:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 80c:	00001301 	andeq	r1, r0, r1, lsl #6
 810:	03000503 	movweq	r0, #1283	; 0x503
 814:	3b0b3a08 	blcc	2cf03c <startup-0x1fd30fc4>
 818:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 81c:	00180213 	andseq	r0, r8, r3, lsl r2
 820:	00240400 	eoreq	r0, r4, r0, lsl #8
 824:	0b3e0b0b 	bleq	f83458 <startup-0x1f07cba8>
 828:	00000803 	andeq	r0, r0, r3, lsl #16
 82c:	01110100 	tsteq	r1, r0, lsl #2
 830:	0b130e25 	bleq	4c40cc <startup-0x1fb3bf34>
 834:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 838:	01111755 	tsteq	r1, r5, asr r7
 83c:	00001710 	andeq	r1, r0, r0, lsl r7
 840:	0b002402 	bleq	9850 <startup-0x1fff67b0>
 844:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 848:	0300000e 	movweq	r0, #14
 84c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 850:	0b3a0e03 	bleq	e84064 <startup-0x1f17bf9c>
 854:	0b390b3b 	bleq	e43548 <startup-0x1f1bcab8>
 858:	01111927 	tsteq	r1, r7, lsr #18
 85c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 860:	01194297 			; <UNDEFINED> instruction: 0x01194297
 864:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 868:	08030005 	stmdaeq	r3, {r0, r2}
 86c:	0b3b0b3a 	bleq	ec355c <startup-0x1f13caa4>
 870:	13490b39 	movtne	r0, #39737	; 0x9b39
 874:	00001802 	andeq	r1, r0, r2, lsl #16
 878:	0b002405 	bleq	9894 <startup-0x1fff676c>
 87c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 880:	06000008 	streq	r0, [r0], -r8
 884:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 888:	0b3a0e03 	bleq	e8409c <startup-0x1f17bf64>
 88c:	0b390b3b 	bleq	e43580 <startup-0x1f1bca80>
 890:	06120111 			; <UNDEFINED> instruction: 0x06120111
 894:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 898:	07000019 	smladeq	r0, r9, r0, r0
 89c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 8a0:	0b3a0e03 	bleq	e840b4 <startup-0x1f17bf4c>
 8a4:	0b390b3b 	bleq	e43598 <startup-0x1f1bca68>
 8a8:	01111927 	tsteq	r1, r7, lsr #18
 8ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8b0:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000031c 	andeq	r0, r0, ip, lsl r3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02b80002 	adcseq	r0, r8, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	2000032c 	andcs	r0, r0, ip, lsr #6
  34:	0000029c 	muleq	r0, ip, r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	061b0002 	ldreq	r0, [fp], -r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200005c8 	andcs	r0, r0, r8, asr #11
  54:	000000e8 	andeq	r0, r0, r8, ror #1
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	072d0002 	streq	r0, [sp, -r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
  74:	0000006a 	andeq	r0, r0, sl, rrx
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	086d0002 	stmdaeq	sp!, {r1}^
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	2000071c 	andcs	r0, r0, ip, lsl r7
  94:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	09010002 	stmdbeq	r1, {r1}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	200007a8 	andcs	r0, r0, r8, lsr #15
  b4:	00000312 	andeq	r0, r0, r2, lsl r3
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	0c370002 	ldceq	0, cr0, [r7], #-8
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000abc 			; <UNDEFINED> instruction: 0x20000abc
  d4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	0d800002 	stceq	0, cr0, [r0, #8]
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	20000c8c 	andcs	r0, r0, ip, lsl #25
  f4:	00000570 	andeq	r0, r0, r0, ror r5
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	11300002 	teqne	r0, r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	200011fc 	strdcs	r1, [r0], -ip
 114:	0000001e 	andeq	r0, r0, lr, lsl r0
	...
 120:	00000024 	andeq	r0, r0, r4, lsr #32
 124:	11870002 	orrne	r0, r7, r2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	2000121a 	andcs	r1, r0, sl, lsl r2
 134:	00000018 	andeq	r0, r0, r8, lsl r0
 138:	20000000 	andcs	r0, r0, r0
 13c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000192 	muleq	r0, r2, r1
   4:	001e0003 	andseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	00632e69 	rsbeq	r2, r3, r9, ror #28
  24:	00000000 	andeq	r0, r0, r0
  28:	05002005 	streq	r2, [r0, #-5]
  2c:	00001002 	andeq	r1, r0, r2
  30:	0d051620 	stceq	6, cr1, [r5, #-128]	; 0xffffff80
  34:	200b0568 	andcs	r0, fp, r8, ror #10
  38:	054b1905 	strbeq	r1, [fp, #-2309]	; 0xfffff6fb
  3c:	19056609 	stmdbne	r5, {r0, r3, r9, sl, sp, lr}
  40:	4b010520 	blmi	414c8 <startup-0x1ffbeb38>
  44:	05682205 	strbeq	r2, [r8, #-517]!	; 0xfffffdfb
  48:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
  4c:	4b080520 	blmi	2014d4 <startup-0x1fdfeb2c>
  50:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
  54:	12052f02 	andne	r2, r5, #2, 30
  58:	67010520 	strvs	r0, [r1, -r0, lsr #10]
  5c:	05691e05 	strbeq	r1, [r9, #-3589]!	; 0xfffff1fb
  60:	2f3e3f09 	svccs	0x003e3f09
  64:	05310d05 	ldreq	r0, [r1, #-3333]!	; 0xfffff2fb
  68:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
  6c:	3e10053e 	mrccc	5, 0, r0, cr0, cr14, {1}
  70:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb73 <winning_score+0xdfffe88b>
  74:	0205751a 	andeq	r7, r5, #109051904	; 0x6800000
  78:	2010053d 	andscs	r0, r0, sp, lsr r5
  7c:	05330905 	ldreq	r0, [r3, #-2309]!	; 0xfffff6fb
  80:	0d053d05 	stceq	13, cr3, [r5, #-20]	; 0xffffffec
  84:	5903053e 	stmdbpl	r3, {r1, r2, r3, r4, r5, r8, sl}
  88:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
  8c:	05052f10 	streq	r2, [r5, #-3856]	; 0xfffff0f0
  90:	a017052f 	andsge	r0, r7, pc, lsr #10
  94:	053e1205 	ldreq	r1, [lr, #-517]!	; 0xfffffdfb
  98:	20052e02 	andcs	r2, r5, r2, lsl #28
  9c:	2e100520 	cfmul64cs	mvdx0, mvdx0, mvdx0
  a0:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
  a4:	06053d05 	streq	r3, [r5], -r5, lsl #26
  a8:	5912053d 	ldmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
  ac:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
  b0:	10052020 	andne	r2, r5, r0, lsr #32
  b4:	2109052e 	tstcs	r9, lr, lsr #10
  b8:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
  bc:	09059f2e 	stmdbeq	r5, {r1, r2, r3, r5, r8, r9, sl, fp, ip, pc}
  c0:	1a053d68 	bne	14f668 <startup-0x1feb0998>
  c4:	3d090520 	cfstr32cc	mvfx0, [r9, #-128]	; 0xffffff80
  c8:	05053d2f 	streq	r3, [r5, #-3375]	; 0xfffff2d1
  cc:	67230531 			; <UNDEFINED> instruction: 0x67230531
  d0:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
  d4:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
  d8:	054b2405 	strbeq	r2, [fp, #-1029]	; 0xfffffbfb
  dc:	02056703 	andeq	r6, r5, #786432	; 0xc0000
  e0:	01053e3d 	tsteq	r5, sp, lsr lr
  e4:	4c210559 	cfstr32mi	mvfx0, [r1], #-356	; 0xfffffe9c
  e8:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
  ec:	04020009 	streq	r0, [r2], #-9
  f0:	1d052001 	stcne	0, cr2, [r5, #-4]
  f4:	01040200 	mrseq	r0, R12_usr
  f8:	0007053c 	andeq	r0, r7, ip, lsr r5
  fc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 100:	59300205 	ldmdbpl	r0!, {r0, r2, r9}
 104:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 108:	07054c24 	streq	r4, [r5, -r4, lsr #24]
 10c:	00090567 	andeq	r0, r9, r7, ror #10
 110:	20010402 	andcs	r0, r1, r2, lsl #8
 114:	02001d05 	andeq	r1, r0, #320	; 0x140
 118:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 11c:	04020007 	streq	r0, [r2], #-7
 120:	02053c01 	andeq	r3, r5, #256	; 0x100
 124:	01055930 	tsteq	r5, r0, lsr r9
 128:	4c12053d 	cfldr32mi	mvfx0, [r2], {61}	; 0x3d
 12c:	3e300205 	cdpcc	2, 3, cr0, cr0, cr5, {0}
 130:	01053e3e 	tsteq	r5, lr, lsr lr
 134:	3e1a053d 	mrccc	5, 0, r0, cr10, cr13, {1}
 138:	052f0505 	streq	r0, [pc, #-1285]!	; fffffc3b <winning_score+0xdfffe953>
 13c:	21053d01 	tstcs	r5, r1, lsl #26
 140:	5906053e 	stmdbpl	r6, {r1, r2, r3, r4, r5, r8, sl}
 144:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 148:	17053d0a 	strne	r3, [r5, -sl, lsl #26]
 14c:	6602053e 			; <UNDEFINED> instruction: 0x6602053e
 150:	054c0105 	strbeq	r0, [ip, #-261]	; 0xfffffefb
 154:	13054c31 	movwne	r4, #23601	; 0x5c31
 158:	2e060592 	mcrcs	5, 0, r0, cr6, cr2, {4}
 15c:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
 160:	15053c06 	strne	r3, [r5, #-3078]	; 0xfffff3fa
 164:	2e060521 	cfsh32cs	mvfx0, mvfx6, #17
 168:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 16c:	02052010 	andeq	r2, r5, #16
 170:	2011052f 	andscs	r0, r1, pc, lsr #10
 174:	052f0505 	streq	r0, [pc, #-1285]!	; fffffc77 <winning_score+0xdfffe98f>
 178:	02052015 	andeq	r2, r5, #21
 17c:	055a673d 	ldrbeq	r6, [sl, #-1853]	; 0xfffff8c3
 180:	02052010 	andeq	r2, r5, #16
 184:	2011052f 	andscs	r0, r1, pc, lsr #10
 188:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 18c:	01052012 	tsteq	r5, r2, lsl r0
 190:	000d022f 	andeq	r0, sp, pc, lsr #4
 194:	01b10101 			; <UNDEFINED> instruction: 0x01b10101
 198:	00030000 	andeq	r0, r3, r0
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1a4:	0101000d 	tsteq	r1, sp
 1a8:	00000101 	andeq	r0, r0, r1, lsl #2
 1ac:	00000100 	andeq	r0, r0, r0, lsl #2
 1b0:	61620001 	cmnvs	r2, r1
 1b4:	6e616c6c 	cdpvs	12, 6, cr6, cr1, cr12, {3}
 1b8:	64617064 	strbtvs	r7, [r1], #-100	; 0xffffff9c
 1bc:	2e656c64 	cdpcs	12, 6, cr6, cr5, cr4, {3}
 1c0:	00000063 	andeq	r0, r0, r3, rrx
 1c4:	73696400 	cmnvc	r9, #0, 8
 1c8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1cc:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
 1d0:	00682e73 	rsbeq	r2, r8, r3, ror lr
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
 1dc:	00032c02 	andeq	r2, r3, r2, lsl #24
 1e0:	01160320 	tsteq	r6, r0, lsr #6
 1e4:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
 1e8:	21052e05 	tstcs	r5, r5, lsl #28
 1ec:	03040200 	movweq	r0, #16896	; 0x4200
 1f0:	002d0521 	eoreq	r0, sp, r1, lsr #10
 1f4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 1f8:	02003605 	andeq	r3, r0, #5242880	; 0x500000
 1fc:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 200:	04020009 	streq	r0, [r2], #-9
 204:	44052e03 	strmi	r2, [r5], #-3587	; 0xfffff1fd
 208:	03040200 	movweq	r0, #16896	; 0x4200
 20c:	00500520 	subseq	r0, r0, r0, lsr #10
 210:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 214:	02005905 	andeq	r5, r0, #81920	; 0x14000
 218:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 21c:	04020009 	streq	r0, [r2], #-9
 220:	31052e03 	tstcc	r5, r3, lsl #28
 224:	03040200 	movweq	r0, #16896	; 0x4200
 228:	001e0549 	andseq	r0, lr, r9, asr #10
 22c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 230:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 234:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 238:	04020005 	streq	r0, [r2], #-5
 23c:	01052001 	tsteq	r5, r1
 240:	5a26053f 	bpl	981744 <startup-0x1f67e8bc>
 244:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 248:	23052e07 	movwcs	r2, #24071	; 0x5e07
 24c:	03040200 	movweq	r0, #16896	; 0x4200
 250:	002f0521 	eoreq	r0, pc, r1, lsr #10
 254:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 258:	02003805 	andeq	r3, r0, #327680	; 0x50000
 25c:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 260:	04020009 	streq	r0, [r2], #-9
 264:	46052e03 	strmi	r2, [r5], -r3, lsl #28
 268:	03040200 	movweq	r0, #16896	; 0x4200
 26c:	00520520 	subseq	r0, r2, r0, lsr #10
 270:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 274:	02005b05 	andeq	r5, r0, #5120	; 0x1400
 278:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 27c:	04020009 	streq	r0, [r2], #-9
 280:	33052e03 	movwcc	r2, #24067	; 0x5e03
 284:	03040200 	movweq	r0, #16896	; 0x4200
 288:	00200549 	eoreq	r0, r0, r9, asr #10
 28c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 290:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 294:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 298:	04020007 	streq	r0, [r2], #-7
 29c:	01052001 	tsteq	r5, r1
 2a0:	5925053f 	stmdbpl	r5!, {r0, r1, r2, r3, r4, r5, r8, sl}
 2a4:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 2a8:	1a054b11 	bne	152ef4 <startup-0x1fead10c>
 2ac:	2e11052e 	cfmul64cs	mvdx0, mvdx1, mvdx14
 2b0:	2e1a053d 	mrccs	5, 0, r0, cr10, cr13, {1}
 2b4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 2b8:	07053e0e 	streq	r3, [r5, -lr, lsl #28]
 2bc:	2f1f052e 	svccs	0x001f052e
 2c0:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 2c4:	0e052016 	mcreq	0, 0, r2, cr5, cr6, {0}
 2c8:	2e070530 	cfmv64hrcs	mvdx7, r0
 2cc:	052f1f05 	streq	r1, [pc, #-3845]!	; fffff3cf <winning_score+0xdfffe0e7>
 2d0:	16052e18 			; <UNDEFINED> instruction: 0x16052e18
 2d4:	300e0520 	andcc	r0, lr, r0, lsr #10
 2d8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 2dc:	18052f1f 	stmdane	r5, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
 2e0:	2016052e 	andscs	r0, r6, lr, lsr #10
 2e4:	05300e05 	ldreq	r0, [r0, #-3589]!	; 0xfffff1fb
 2e8:	1f052e07 	svcne	0x00052e07
 2ec:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 2f0:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 2f4:	01053005 	tsteq	r5, r5
 2f8:	4c27054b 	cfstr32mi	mvfx0, [r7], #-300	; 0xfffffed4
 2fc:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 300:	1a054b11 	bne	152f4c <startup-0x1fead0b4>
 304:	2e11052e 	cfmul64cs	mvdx0, mvdx1, mvdx14
 308:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 30c:	16052e07 	strne	r2, [r5], -r7, lsl #28
 310:	0e053d2f 	cdpeq	13, 0, cr3, cr5, cr15, {1}
 314:	2e07053e 	mcrcs	5, 0, r0, cr7, cr14, {1}
 318:	3d2f1605 	stccc	6, cr1, [pc, #-20]!	; 30c <startup-0x1ffffcf4>
 31c:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 320:	42054b01 	andmi	r4, r5, #1024	; 0x400
 324:	6712054d 	ldrvs	r0, [r2, -sp, asr #10]
 328:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 32c:	054c2d05 	strbeq	r2, [ip, #-3333]	; 0xfffff2fb
 330:	0903670c 	stmdbeq	r3, {r2, r3, r8, r9, sl, sp, lr}
 334:	0105ac08 	tsteq	r5, r8, lsl #24
 338:	e62f0583 	strt	r0, [pc], -r3, lsl #11
 33c:	03670c05 	cmneq	r7, #1280	; 0x500
 340:	05ac0809 	streq	r0, [ip, #2057]!	; 0x809
 344:	0e028301 	cdpeq	3, 0, cr8, cr2, cr1, {0}
 348:	9d010100 	stflss	f0, [r1, #-0]
 34c:	03000000 	movweq	r0, #0
 350:	00002800 	andeq	r2, r0, r0, lsl #16
 354:	fb010200 	blx	40b5e <startup-0x1ffbf4a2>
 358:	01000d0e 	tsteq	r0, lr, lsl #26
 35c:	00010101 	andeq	r0, r1, r1, lsl #2
 360:	00010000 	andeq	r0, r1, r0
 364:	63000100 	movwvs	r0, #256	; 0x100
 368:	6b636f6c 	blvs	18dc120 <startup-0x1e723ee0>
 36c:	0000632e 	andeq	r6, r0, lr, lsr #6
 370:	616d0000 	cmnvs	sp, r0
 374:	682e6e69 	stmdavs	lr!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}
 378:	00000000 	andeq	r0, r0, r0
 37c:	00130500 	andseq	r0, r3, r0, lsl #10
 380:	05c80205 	strbeq	r0, [r8, #517]	; 0x205
 384:	0c032000 	stceq	0, cr2, [r3], {-0}
 388:	2f0f0501 	svccs	0x000f0501
 38c:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 390:	0f056702 	svceq	0x00056702
 394:	2f120520 	svccs	0x00120520
 398:	05760205 	ldrbeq	r0, [r6, #-517]!	; 0xfffffdfb
 39c:	0205200c 	andeq	r2, r5, #12
 3a0:	200c052f 	andcs	r0, ip, pc, lsr #10
 3a4:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff6a7 <winning_score+0xdfffe3bf>
 3a8:	0105670c 	tsteq	r5, ip, lsl #14
 3ac:	08170567 	ldmdaeq	r7, {r0, r1, r2, r5, r6, r8, sl}
 3b0:	2f0d0568 	svccs	0x000d0568
 3b4:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
 3b8:	15052e27 	strne	r2, [r5, #-3623]	; 0xfffff1d9
 3bc:	2031054a 	eorscs	r0, r1, sl, asr #10
 3c0:	052e3905 	streq	r3, [lr, #-2309]!	; 0xfffff6fb
 3c4:	01054a2b 	tsteq	r5, fp, lsr #20
 3c8:	68110521 	ldmdavs	r1, {r0, r5, r8, sl}
 3cc:	052f0205 	streq	r0, [pc, #-517]!	; 1cf <startup-0x1ffffe31>
 3d0:	0205200c 	andeq	r2, r5, #12
 3d4:	2010052f 	andscs	r0, r0, pc, lsr #10
 3d8:	052f0205 	streq	r0, [pc, #-517]!	; 1db <startup-0x1ffffe25>
 3dc:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
 3e0:	2015052f 	andscs	r0, r5, pc, lsr #10
 3e4:	023d0105 	eorseq	r0, sp, #1073741825	; 0x40000001
 3e8:	0101000f 	tsteq	r1, pc
 3ec:	00000072 	andeq	r0, r0, r2, ror r0
 3f0:	001e0003 	andseq	r0, lr, r3
 3f4:	01020000 	mrseq	r0, (UNDEF: 2)
 3f8:	000d0efb 	strdeq	r0, [sp], -fp
 3fc:	01010101 	tsteq	r1, r1, lsl #2
 400:	01000000 	mrseq	r0, (UNDEF: 0)
 404:	00010000 	andeq	r0, r1, r0
 408:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
 40c:	00632e67 	rsbeq	r2, r3, r7, ror #28
 410:	00000000 	andeq	r0, r0, r0
 414:	05002005 	streq	r2, [r0, #-5]
 418:	0006b002 	andeq	fp, r6, r2
 41c:	01160320 	tsteq	r6, r0, lsr #6
 420:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
 424:	04020010 	streq	r0, [r2], #-16
 428:	15052001 	strne	r2, [r5, #-1]
 42c:	01040200 	mrseq	r0, R12_usr
 430:	0008053c 	andeq	r0, r8, ip, lsr r5
 434:	3c010402 	cfstrscc	mvf0, [r1], {2}
 438:	200f0522 	andcs	r0, pc, r2, lsr #10
 43c:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
 440:	03052105 	movweq	r2, #20741	; 0x5105
 444:	3e01054b 	cfsh32cc	mvfx0, mvfx1, #43
 448:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
 44c:	11054b08 	tstne	r5, r8, lsl #22
 450:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 454:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
 458:	01052e08 	tsteq	r5, r8, lsl #28
 45c:	00050231 	andeq	r0, r5, r1, lsr r2
 460:	00af0101 	adceq	r0, pc, r1, lsl #2
 464:	00030000 	andeq	r0, r3, r0
 468:	0000001e 	andeq	r0, r0, lr, lsl r0
 46c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 470:	0101000d 	tsteq	r1, sp
 474:	00000101 	andeq	r0, r0, r1, lsl #2
 478:	00000100 	andeq	r0, r0, r0, lsl #2
 47c:	65640001 	strbvs	r0, [r4, #-1]!
 480:	2e79616c 	rpwcsez	f6, f1, #4.0
 484:	00000063 	andeq	r0, r0, r3, rrx
 488:	21050000 	mrscs	r0, (UNDEF: 5)
 48c:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
 490:	14200007 	strtne	r0, [r0], #-7
 494:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 498:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 49c:	03040200 	movweq	r0, #16896	; 0x4200
 4a0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 4a4:	02002f03 	andeq	r2, r0, #3, 30
 4a8:	002f0304 	eoreq	r0, pc, r4, lsl #6
 4ac:	2f030402 	svccs	0x00030402
 4b0:	02001d05 	andeq	r1, r0, #320	; 0x140
 4b4:	052a0304 	streq	r0, [sl, #-772]!	; 0xfffffcfc
 4b8:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 4bc:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 4c0:	01040200 	mrseq	r0, R12_usr
 4c4:	42010520 	andmi	r0, r1, #32, 10	; 0x8000000
 4c8:	055b1305 	ldrbeq	r1, [fp, #-773]	; 0xfffffcfb
 4cc:	05052f02 	streq	r2, [r5, #-3842]	; 0xfffff0fe
 4d0:	2f01052f 	svccs	0x0001052f
 4d4:	053e1305 	ldreq	r1, [lr, #-773]!	; 0xfffffcfb
 4d8:	0f052f05 	svceq	0x00052f05
 4dc:	2f020520 	svccs	0x00020520
 4e0:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 4e4:	0b052f02 	bleq	14c0f4 <startup-0x1feb3f0c>
 4e8:	2f020520 	svccs	0x00020520
 4ec:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 4f0:	0a052f07 	beq	14c114 <startup-0x1feb3eec>
 4f4:	01040200 	mrseq	r0, R12_usr
 4f8:	00140520 	andseq	r0, r4, r0, lsr #10
 4fc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 500:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 504:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 508:	0c052102 	stfeqs	f2, [r5], {2}
 50c:	2f010520 	svccs	0x00010520
 510:	01000a02 	tsteq	r0, r2, lsl #20
 514:	0001a801 	andeq	sl, r1, r1, lsl #16
 518:	37000300 	strcc	r0, [r0, -r0, lsl #6]
 51c:	02000000 	andeq	r0, r0, #0
 520:	0d0efb01 	vstreq	d15, [lr, #-4]
 524:	01010100 	mrseq	r0, (UNDEF: 17)
 528:	00000001 	andeq	r0, r0, r1
 52c:	01000001 	tsteq	r0, r1
 530:	73696400 	cmnvc	r9, #0, 8
 534:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 538:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
 53c:	00632e73 	rsbeq	r2, r3, r3, ror lr
 540:	64000000 	strvs	r0, [r0], #-0
 544:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 548:	74497961 	strbvc	r7, [r9], #-2401	; 0xfffff69f
 54c:	2e736d65 	cdpcs	13, 7, cr6, cr3, cr5, {3}
 550:	00000068 	andeq	r0, r0, r8, rrx
 554:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
 558:	a8020500 	stmdage	r2, {r8, sl}
 55c:	18200007 	stmdane	r0!, {r0, r1, r2}
 560:	05770e05 	ldrbeq	r0, [r7, #-3589]!	; 0xfffff1fb
 564:	19053c08 	stmdbne	r5, {r3, sl, fp, ip, sp}
 568:	3c13053c 	cfldr32cc	mvfx0, [r3], {60}	; 0x3c
 56c:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 570:	055a2f0f 	ldrbeq	r2, [sl, #-3855]	; 0xfffff0f1
 574:	09054c07 	stmdbeq	r5, {r0, r1, r2, sl, fp, lr}
 578:	07056859 	smlsdeq	r5, r9, r8, r6
 57c:	4b090568 	blmi	241b24 <startup-0x1fdbe4dc>
 580:	18056968 	stmdane	r5, {r3, r5, r6, r8, fp, sp, lr}
 584:	3c09054b 	cfstr32cc	mvfx0, [r9], {75}	; 0x4b
 588:	07052f4b 	streq	r2, [r5, -fp, asr #30]
 58c:	4b0f0530 	blmi	3c1a54 <startup-0x1fc3e5ac>
 590:	3e0d053e 	mcrcc	5, 0, r0, cr13, cr14, {1}
 594:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 598:	0d05210b 	stfeqs	f2, [r5, #-44]	; 0xffffffd4
 59c:	0f057659 	svceq	0x00057659
 5a0:	4b110569 	blmi	441b4c <startup-0x1fbbe4b4>
 5a4:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 5a8:	13053d0f 	movwne	r3, #23823	; 0x5d0f
 5ac:	001e054b 	andseq	r0, lr, fp, asr #10
 5b0:	03020402 	movweq	r0, #9218	; 0x2402
 5b4:	05054a76 	streq	r4, [r5, #-2678]	; 0xfffff58a
 5b8:	01040200 	mrseq	r0, R12_usr
 5bc:	0301053c 	movweq	r0, #5436	; 0x153c
 5c0:	1d054a0d 	vstrne	s8, [r5, #-52]	; 0xffffffcc
 5c4:	5919055a 	ldmdbpl	r9, {r1, r3, r4, r6, r8, sl}
 5c8:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 5cc:	0d052119 	stfeqs	f2, [r5, #-100]	; 0xffffff9c
 5d0:	2219052e 	andscs	r0, r9, #192937984	; 0xb800000
 5d4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 5d8:	0d052119 	stfeqs	f2, [r5, #-100]	; 0xffffff9c
 5dc:	2107052e 	tstcs	r7, lr, lsr #10
 5e0:	02001005 	andeq	r1, r0, #5
 5e4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 5e8:	10053d09 	andne	r3, r5, r9, lsl #26
 5ec:	300c0567 	andcc	r0, ip, r7, ror #10
 5f0:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 5f4:	0b054d1a 	bleq	153a64 <startup-0x1feac59c>
 5f8:	590a055b 	stmdbpl	sl, {r0, r1, r3, r4, r6, r8, sl}
 5fc:	5b140559 	blpl	501b68 <startup-0x1fafe498>
 600:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
 604:	20053c27 	andcs	r3, r5, r7, lsr #24
 608:	2e38052e 	cdpcs	5, 3, cr0, cr8, cr14, {1}
 60c:	052e3b05 	streq	r3, [lr, #-2821]!	; 0xfffff4fb
 610:	4d054a31 	vstrmi	s8, [r5, #-196]	; 0xffffff3c
 614:	2e46053c 	mcrcs	5, 2, r0, cr6, cr12, {1}
 618:	052e5a05 	streq	r5, [lr, #-2565]!	; 0xfffff5fb
 61c:	7205666b 	andvc	r6, r5, #112197632	; 0x6b00000
 620:	4b140558 	blmi	501b88 <startup-0x1fafe478>
 624:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
 628:	2b05580d 	blcs	156664 <startup-0x1fea999c>
 62c:	2e24052e 	cfsh64cs	mvdx0, mvdx4, #30
 630:	052e3c05 	streq	r3, [lr, #-3077]!	; 0xfffff3fb
 634:	4d053c35 	stcmi	12, cr3, [r5, #-212]	; 0xffffff2c
 638:	2e50052e 	cdpcs	5, 5, cr0, cr0, cr14, {1}
 63c:	05584605 	ldrbeq	r4, [r8, #-1541]	; 0xfffff9fb
 640:	6e052e5d 	mcrvs	14, 0, r2, cr5, cr13, {2}
 644:	58750566 	ldmdapl	r5!, {r1, r2, r5, r6, r8, sl}^
 648:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 64c:	0d052e17 	stceq	14, cr2, [r5, #-92]	; 0xffffffa4
 650:	3c2b0558 	cfstr32cc	mvfx0, [fp], #-352	; 0xfffffea0
 654:	052e2d05 	streq	r2, [lr, #-3333]!	; 0xfffff2fb
 658:	3e055824 	cdpcc	8, 0, cr5, cr5, cr4, {1}
 65c:	2e37052e 	cdpcs	5, 3, cr0, cr7, cr14, {1}
 660:	052e4f05 	streq	r4, [lr, #-3845]!	; 0xfffff0fb
 664:	48052e52 	stmdami	r5, {r1, r4, r6, r9, sl, fp, sp}
 668:	2e5f054a 	cdpcs	5, 5, cr0, cr15, cr10, {2}
 66c:	05667005 	strbeq	r7, [r6, #-5]!
 670:	1b055877 	blne	156854 <startup-0x1fea97ac>
 674:	2e14054b 	cfmac32cs	mvfx0, mvfx4, mvfx11
 678:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 67c:	14054c26 	strne	r4, [r5], #-3110	; 0xfffff3da
 680:	2e0a0569 	cfsh32cs	mvfx0, mvfx10, #57
 684:	053c2705 	ldreq	r2, [ip, #-1797]!	; 0xfffff8fb
 688:	1a052e1d 	bne	14bf04 <startup-0x1feb40fc>
 68c:	3d0a052f 	cfstr32cc	mvfx0, [sl, #-188]	; 0xffffff44
 690:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
 694:	13052e0e 	movwne	r2, #24078	; 0x5e0e
 698:	2e0e053d 	mcrcs	5, 0, r0, cr14, cr13, {1}
 69c:	bb09052f 	bllt	241b60 <startup-0x1fdbe4a0>
 6a0:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 6a4:	12053c0e 	andne	r3, r5, #3584	; 0xe00
 6a8:	2e0e052f 	cfsh32cs	mvfx0, mvfx14, #31
 6ac:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff9af <winning_score+0xdfffe6c7>
 6b0:	3c79030a 	ldclcc	3, cr0, [r9], #-40	; 0xffffffd8
 6b4:	0a030c05 	beq	c36d0 <startup-0x1ff3c930>
 6b8:	2301053c 	movwcs	r0, #5436	; 0x153c
 6bc:	01000402 	tsteq	r0, r2, lsl #8
 6c0:	00013201 	andeq	r3, r1, r1, lsl #4
 6c4:	1d000300 	stcne	3, cr0, [r0, #-0]
 6c8:	02000000 	andeq	r0, r0, #0
 6cc:	0d0efb01 	vstreq	d15, [lr, #-4]
 6d0:	01010100 	mrseq	r0, (UNDEF: 17)
 6d4:	00000001 	andeq	r0, r0, r1
 6d8:	01000001 	tsteq	r0, r1
 6dc:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 6e0:	00632e62 	rsbeq	r2, r3, r2, ror #28
 6e4:	00000000 	andeq	r0, r0, r0
 6e8:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
 6ec:	000abc02 	andeq	fp, sl, r2, lsl #24
 6f0:	010a0320 	tsteq	sl, r0, lsr #6
 6f4:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
 6f8:	052f0811 	streq	r0, [pc, #-2065]!	; fffffeef <winning_score+0xdfffec07>
 6fc:	09052021 	stmdbeq	r5, {r0, r5, sp}
 700:	2111052e 	tstcs	r1, lr, lsr #10
 704:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
 708:	11052e09 	tstne	r5, r9, lsl #28
 70c:	20210521 	eorcs	r0, r1, r1, lsr #10
 710:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 714:	22052111 	andcs	r2, r5, #1073741828	; 0x40000004
 718:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 71c:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
 720:	09052023 	stmdbeq	r5, {r0, r1, r5, sp}
 724:	2301052e 	movwcs	r0, #5422	; 0x152e
 728:	05761605 	ldrbeq	r1, [r6, #-1541]!	; 0xfffff9fb
 72c:	10053e02 	andne	r3, r5, r2, lsl #28
 730:	2f0f0520 	svccs	0x000f0520
 734:	3d200a05 	vstmdbcc	r0!, {s0-s4}
 738:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 73c:	0a052110 	beq	148b84 <startup-0x1feb747c>
 740:	4a070530 	bmi	1c1c08 <startup-0x1fe3e3f8>
 744:	05211005 	streq	r1, [r1, #-5]!
 748:	0705300a 	streq	r3, [r5, -sl]
 74c:	2110054a 	tstcs	r0, sl, asr #10
 750:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
 754:	10054a07 	andne	r4, r5, r7, lsl #20
 758:	300c0521 	andcc	r0, ip, r1, lsr #10
 75c:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 760:	0905ae14 	stmdbeq	r5, {r2, r4, r9, sl, fp, sp, pc}
 764:	20170531 	andscs	r0, r7, r1, lsr r5
 768:	053f0905 	ldreq	r0, [pc, #-2309]!	; fffffe6b <winning_score+0xdfffeb83>
 76c:	09052018 	stmdbeq	r5, {r3, r4, sp}
 770:	20190530 	andscs	r0, r9, r0, lsr r5
 774:	053f0505 	ldreq	r0, [pc, #-1285]!	; 277 <startup-0x1ffffd89>
 778:	02052025 	andeq	r2, r5, #37	; 0x25
 77c:	20100530 	andscs	r0, r0, r0, lsr r5
 780:	e62f0105 	strt	r0, [pc], -r5, lsl #2
 784:	053e1005 	ldreq	r1, [lr, #-5]!
 788:	05052e09 	streq	r2, [r5, #-3593]	; 0xfffff1f7
 78c:	2f0a0522 	svccs	0x000a0522
 790:	05690e05 	strbeq	r0, [r9, #-3589]!	; 0xfffff1fb
 794:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 798:	4b120521 	blmi	481c24 <startup-0x1fb7e3dc>
 79c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 7a0:	1f053d0d 	svcne	0x00053d0d
 7a4:	2e1a054b 	cfmac32cs	mvfx0, mvfx10, mvfx11
 7a8:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
 7ac:	18052e22 	stmdane	r5, {r1, r5, r9, sl, fp, sp}
 7b0:	00250520 	eoreq	r0, r5, r0, lsr #10
 7b4:	37020402 	strcc	r0, [r2, -r2, lsl #8]
 7b8:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 7bc:	033c0104 	teqeq	ip, #4, 2
 7c0:	13053c09 	movwne	r3, #23561	; 0x5c09
 7c4:	2f0d0520 	svccs	0x000d0520
 7c8:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
 7cc:	05210104 	streq	r0, [r1, #-260]!	; 0xfffffefc
 7d0:	0a05b11f 	beq	16cc54 <startup-0x1fe933ac>
 7d4:	03040568 	movweq	r0, #17768	; 0x4568
 7d8:	22057411 	andcs	r7, r5, #285212672	; 0x11000000
 7dc:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 7e0:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
 7e4:	01052e15 	tsteq	r5, r5, lsl lr
 7e8:	1e050525 	cfsh32ne	mvfx0, mvfx5, #21
 7ec:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 7f0:	09023001 	stmdbeq	r2, {r0, ip, sp}
 7f4:	1f010100 	svcne	0x00010100
 7f8:	03000002 	movweq	r0, #2
 7fc:	00003900 	andeq	r3, r0, r0, lsl #18
 800:	fb010200 	blx	4100a <startup-0x1ffbeff6>
 804:	01000d0e 	tsteq	r0, lr, lsl #26
 808:	00010101 	andeq	r0, r1, r1, lsl #2
 80c:	00010000 	andeq	r0, r1, r0
 810:	6d000100 	stfvss	f0, [r0, #-0]
 814:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 818:	00000063 	andeq	r0, r0, r3, rrx
 81c:	73696400 	cmnvc	r9, #0, 8
 820:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 824:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
 828:	00682e73 	rsbeq	r2, r8, r3, ror lr
 82c:	6d000000 	stcvs	0, cr0, [r0, #-0]
 830:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 834:	00000068 	andeq	r0, r0, r8, rrx
 838:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
 83c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
 840:	0320000c 			; <UNDEFINED> instruction: 0x0320000c
 844:	0b05010f 	bleq	140c88 <startup-0x1febf378>
 848:	6706052f 	strvs	r0, [r6, -pc, lsr #10]
 84c:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
 850:	05053d0a 	streq	r3, [r5, #-3338]	; 0xfffff2f6
 854:	2f07052e 	svccs	0x0007052e
 858:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 85c:	0a053d10 	beq	14fca4 <startup-0x1feb035c>
 860:	2e05053e 	mcrcs	5, 0, r0, cr5, cr14, {1}
 864:	052f0705 	streq	r0, [pc, #-1797]!	; 167 <startup-0x1ffffe99>
 868:	02052e0f 	andeq	r2, r5, #15, 28	; 0xf0
 86c:	052f303e 	streq	r3, [pc, #-62]!	; 836 <startup-0x1ffff7ca>
 870:	02054b1c 	andeq	r4, r5, #28, 22	; 0x7000
 874:	1c05672e 	stcne	7, cr6, [r5], {46}	; 0x2e
 878:	2e02053d 	mcrcs	5, 0, r0, cr2, cr13, {1}
 87c:	05671c05 	strbeq	r1, [r7, #-3077]!	; 0xfffff3fb
 880:	01052e02 	tsteq	r5, r2, lsl #28
 884:	7c310567 	cfldr32vc	mvfx0, [r1], #-412	; 0xfffffe64
 888:	059f1a05 	ldreq	r1, [pc, #2565]	; 1295 <startup-0x1fffed6b>
 88c:	20053c29 	andcs	r3, r5, r9, lsr #24
 890:	2006054a 	andcs	r0, r6, sl, asr #10
 894:	054b1a05 	strbeq	r1, [fp, #-2565]	; 0xfffff5fb
 898:	20052e29 	andcs	r2, r5, r9, lsr #28
 89c:	2006054a 	andcs	r0, r6, sl, asr #10
 8a0:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 8a4:	0402000e 	streq	r0, [r2], #-14
 8a8:	0a053c01 	beq	14f8b4 <startup-0x1feb074c>
 8ac:	3009053d 	andcc	r0, r9, sp, lsr r5
 8b0:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 8b4:	08057617 	stmdaeq	r5, {r0, r1, r2, r4, r9, sl, ip, sp, lr}
 8b8:	2f02053d 	svccs	0x0002053d
 8bc:	07052f2f 	streq	r2, [r5, -pc, lsr #30]
 8c0:	2103054b 	tstcs	r3, fp, asr #10
 8c4:	05590405 	ldrbeq	r0, [r9, #-1029]	; 0xfffffbfb
 8c8:	07053a08 	streq	r3, [r5, -r8, lsl #20]
 8cc:	3202052e 	andcc	r0, r2, #192937984	; 0xb800000
 8d0:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 8d4:	0e052103 	adfeqs	f2, f5, f3
 8d8:	56080567 	strpl	r0, [r8], -r7, ror #10
 8dc:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
 8e0:	14053201 	strne	r3, [r5], #-513	; 0xfffffdff
 8e4:	3d0905a0 	cfstr32cc	mvfx0, [r9, #-640]	; 0xfffffd80
 8e8:	3002052f 	andcc	r0, r2, pc, lsr #10
 8ec:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 8f0:	18052103 	stmdane	r5, {r0, r1, r8, sp}
 8f4:	3a090559 	bcc	241e60 <startup-0x1fdbe1a0>
 8f8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 8fc:	05763202 	ldrbeq	r3, [r6, #-514]!	; 0xfffffdfe
 900:	03054b07 	movweq	r4, #23303	; 0x5b07
 904:	59180521 	ldmdbpl	r8, {r0, r5, r8, sl}
 908:	053a0805 	ldreq	r0, [sl, #-2053]!	; 0xfffff7fb
 90c:	02052e07 	andeq	r2, r5, #7, 28	; 0x70
 910:	78010532 	stmdavc	r1, {r1, r4, r5, r8, sl}
 914:	05ca1005 	strbeq	r1, [sl, #5]
 918:	052f2f02 	streq	r2, [pc, #-3842]!	; fffffa1e <winning_score+0xdfffe736>
 91c:	02052010 	andeq	r2, r5, #16
 920:	2011052f 	andscs	r0, r1, pc, lsr #10
 924:	052f0505 	streq	r0, [pc, #-1285]!	; 427 <startup-0x1ffffbd9>
 928:	02052015 	andeq	r2, r5, #21
 92c:	01052f3d 	tsteq	r5, sp, lsr pc
 930:	bc32052f 	cfldr32lt	mvfx0, [r2], #-188	; 0xffffff44
 934:	059f1005 	ldreq	r1, [pc, #5]	; 941 <startup-0x1ffff6bf>
 938:	06054b11 			; <UNDEFINED> instruction: 0x06054b11
 93c:	2e020567 	cfsh32cs	mvfx0, mvfx2, #55
 940:	0a052f4d 	beq	14c67c <startup-0x1feb3984>
 944:	3c030530 	cfstr32cc	mvfx0, [r3], {48}	; 0x30
 948:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 94c:	07054a03 	streq	r4, [r5, -r3, lsl #20]
 950:	2e03054b 	cfsh32cs	mvfx0, mvfx3, #43
 954:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
 958:	13056703 	movwne	r6, #22275	; 0x5703
 95c:	580c05f3 	stmdapl	ip, {r0, r1, r4, r5, r6, r7, r8, sl}
 960:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
 964:	0c052113 	stfeqs	f2, [r5], {19}
 968:	58040558 	stmdapl	r4, {r3, r4, r6, r8, sl}
 96c:	05211305 	streq	r1, [r1, #-773]!	; 0xfffffcfb
 970:	04053c0c 	streq	r3, [r5], #-3084	; 0xfffff3f4
 974:	21130566 	tstcs	r3, r6, ror #10
 978:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
 97c:	0c055804 	stceq	8, cr5, [r5], {4}
 980:	08040521 	stmdaeq	r4, {r0, r5, r8, sl}
 984:	2116059e 			; <UNDEFINED> instruction: 0x2116059e
 988:	053c0f05 	ldreq	r0, [ip, #-3845]!	; 0xfffff0fb
 98c:	06055804 	streq	r5, [r5], -r4, lsl #16
 990:	08050526 	stmdaeq	r5, {r1, r2, r5, r8, sl}
 994:	21160590 			; <UNDEFINED> instruction: 0x21160590
 998:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 99c:	0605200f 	streq	r2, [r5], -pc
 9a0:	08050530 	stmdaeq	r5, {r4, r5, r8, sl}
 9a4:	211605ac 	tstcs	r6, ip, lsr #11
 9a8:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
 9ac:	0a05200f 	beq	1489f0 <startup-0x1feb7610>
 9b0:	2e050530 	cfmv64hrcs	mvdx5, r0
 9b4:	052f1205 	streq	r1, [pc, #-517]!	; 7b7 <startup-0x1ffff849>
 9b8:	052f6704 	streq	r6, [pc, #-1796]!	; 2bc <startup-0x1ffffd44>
 9bc:	05a0080a 	streq	r0, [r0, #2058]!	; 0x80a
 9c0:	12052e05 	andne	r2, r5, #5, 28	; 0x50
 9c4:	6704052f 	strvs	r0, [r4, -pc, lsr #10]
 9c8:	080a052f 	stmdaeq	sl, {r0, r1, r2, r3, r5, r8, sl}
 9cc:	2e1705a0 	cfcvtd32cs	mvfx0, mvd7
 9d0:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
 9d4:	05054a12 	streq	r4, [r5, #-2578]	; 0xfffff5ee
 9d8:	3d160520 	cfldr32cc	mvfx0, [r6, #-128]	; 0xffffff80
 9dc:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
 9e0:	05052f11 	streq	r2, [r5, #-3857]	; 0xfffff0ef
 9e4:	1c052f3d 	stcne	15, cr2, [r5], {61}	; 0x3d
 9e8:	4a0c0521 	bmi	301e74 <startup-0x1fcfe18c>
 9ec:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
 9f0:	01053d05 	tsteq	r5, r5, lsl #26
 9f4:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
 9f8:	05600811 	strbeq	r0, [r0, #-2065]!	; 0xfffff7ef
 9fc:	10053e02 	andne	r3, r5, r2, lsl #28
 a00:	4b11052f 	blmi	441ec4 <startup-0x1fbbe13c>
 a04:	05750605 	ldrbeq	r0, [r5, #-1541]!	; 0xfffff9fb
 a08:	14053c02 	strne	r3, [r5], #-3074	; 0xfffff3fe
 a0c:	0205754b 	andeq	r7, r5, #314572800	; 0x12c00000
 a10:	08010567 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl}
 a14:	00040275 	andeq	r0, r4, r5, ror r2
 a18:	003e0101 	eorseq	r0, lr, r1, lsl #2
 a1c:	00030000 	andeq	r0, r3, r0
 a20:	0000001d 	andeq	r0, r0, sp, lsl r0
 a24:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a28:	0101000d 	tsteq	r1, sp
 a2c:	00000101 	andeq	r0, r0, r1, lsl #2
 a30:	00000100 	andeq	r0, r0, r0, lsl #2
 a34:	616d0001 	cmnvs	sp, r1
 a38:	632e6874 			; <UNDEFINED> instruction: 0x632e6874
 a3c:	00000000 	andeq	r0, r0, r0
 a40:	00110500 	andseq	r0, r1, r0, lsl #10
 a44:	11fc0205 	mvnsne	r0, r5, lsl #4
 a48:	05162000 	ldreq	r2, [r6, #-0]
 a4c:	10054b07 	andne	r4, r5, r7, lsl #22
 a50:	3e0c053d 	mcrcc	5, 0, r0, cr12, cr13, {1}
 a54:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 a58:	01010004 	tsteq	r1, r4
 a5c:	00000074 	andeq	r0, r0, r4, ror r0
 a60:	00200003 	eoreq	r0, r0, r3
 a64:	01020000 	mrseq	r0, (UNDEF: 2)
 a68:	000d0efb 	strdeq	r0, [sp], -fp
 a6c:	01010101 	tsteq	r1, r1, lsl #2
 a70:	01000000 	mrseq	r0, (UNDEF: 0)
 a74:	00010000 	andeq	r0, r1, r0
 a78:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 a7c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 a80:	00000063 	andeq	r0, r0, r3, rrx
 a84:	0f050000 	svceq	0x00050000
 a88:	00020500 	andeq	r0, r2, r0, lsl #10
 a8c:	17200000 	strne	r0, [r0, -r0]!
 a90:	21130205 	tstcs	r3, r5, lsl #4
 a94:	01052f21 	tsteq	r5, r1, lsr #30
 a98:	00030221 	andeq	r0, r3, r1, lsr #4
 a9c:	31050101 	tstcc	r5, r1, lsl #2
 aa0:	1a020500 	bne	81ea8 <startup-0x1ff7e158>
 aa4:	03200012 			; <UNDEFINED> instruction: 0x03200012
 aa8:	02050110 	andeq	r0, r5, #16, 2
 aac:	01051321 	tsteq	r5, r1, lsr #6
 ab0:	23330521 	teqcs	r3, #138412032	; 0x8400000
 ab4:	13210205 			; <UNDEFINED> instruction: 0x13210205
 ab8:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 abc:	0205223c 	andeq	r2, r5, #60, 4	; 0xc0000003
 ac0:	01051321 	tsteq	r5, r1, lsr #6
 ac4:	233e0521 	teqcs	lr, #138412032	; 0x8400000
 ac8:	13210205 			; <UNDEFINED> instruction: 0x13210205
 acc:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 ad0:	01010001 	tsteq	r1, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20373143 	eorscs	r3, r7, r3, asr #2
   8:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
   c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  10:	30313230 	eorscc	r3, r1, r0, lsr r2
  14:	20343238 	eorscs	r3, r4, r8, lsr r2
  18:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  1c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  20:	6d2d2029 	stcvs	0, cr2, [sp, #-164]!	; 0xffffff5c
  24:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  28:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  2c:	752d6f6e 	strvc	r6, [sp, #-3950]!	; 0xfffff092
  30:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
  34:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  38:	6363612d 	cmnvs	r3, #1073741835	; 0x4000000b
  3c:	20737365 	rsbscs	r7, r3, r5, ror #6
  40:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  44:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  48:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  4c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  64:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  68:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  6c:	31756e67 	cmncc	r5, r7, ror #28
  70:	64610037 	strbtvs	r0, [r1], #-55	; 0xffffffc9
  74:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
  78:	63736100 	cmnvs	r3, #0, 2
  7c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  80:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  84:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
  88:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
  8c:	63736100 	cmnvs	r3, #0, 2
  90:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
  94:	0074696e 	rsbseq	r6, r4, lr, ror #18
  98:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  9c:	6f675f69 	svcvs	0x00675f69
  a0:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  a4:	63736100 	cmnvs	r3, #0, 2
  a8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  ac:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  b0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
  b4:	736e7500 	cmnvc	lr, #0, 10
  b8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  bc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  c0:	61007261 	tstvs	r0, r1, ror #4
  c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  c8:	6165725f 	cmnvs	r5, pc, asr r2
  cc:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  d0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
  d4:	6f687300 	svcvs	0x00687300
  d8:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  dc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e0:	2064656e 	rsbcs	r6, r4, lr, ror #10
  e4:	00746e69 	rsbseq	r6, r4, r9, ror #28
  e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  ec:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  f0:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
  f4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  f8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  fc:	73610072 	cmnvc	r1, #114	; 0x72
 100:	5f696963 	svcpl	0x00696963
 104:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 108:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 10c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 110:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 114:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 118:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 11c:	6f6d0065 	svcvs	0x006d0065
 120:	5f726564 	svcpl	0x00726564
 124:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0xfffffe8d
 128:	63736100 	cmnvs	r3, #0, 2
 12c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 130:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 134:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 138:	73610061 	cmnvc	r1, #97	; 0x61
 13c:	5f696963 	svcpl	0x00696963
 140:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 144:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 148:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 14c:	61007261 	tstvs	r0, r1, ror #4
 150:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 154:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 158:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 15c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 160:	746f006e 	strbtvc	r0, [pc], #-110	; 168 <startup-0x1ffffe98>
 164:	72657079 	rsbvc	r7, r5, #121	; 0x79
 168:	7661735f 			; <UNDEFINED> instruction: 0x7661735f
 16c:	73610065 	cmnvc	r1, #101	; 0x65
 170:	5f696963 	svcpl	0x00696963
 174:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 178:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 17c:	73610061 	cmnvc	r1, #97	; 0x61
 180:	5f696963 	svcpl	0x00696963
 184:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 188:	00646e61 	rsbeq	r6, r4, r1, ror #28
 18c:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 190:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 194:	7361635c 	cmnvc	r1, #92, 6	; 0x70000001
 198:	445c6168 	ldrbmi	r6, [ip], #-360	; 0xfffffe98
 19c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1a0:	73746e65 	cmnvc	r4, #1616	; 0x650
 1a4:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
 1a8:	5c627548 	cfstr64pl	mvdx7, [r2], #-288	; 0xfffffee0
 1ac:	73696467 	cmnvc	r9, #1728053248	; 0x67000000
 1b0:	6f6f5070 	svcvs	0x006f5070
 1b4:	675c676e 	ldrbvs	r6, [ip, -lr, ror #14]
 1b8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 1bc:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 1c0:	63736100 	cmnvs	r3, #0, 2
 1c4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1cc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1d0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8 <startup-0x1ffffff8>
 1d4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1dc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1e0:	5f657469 	svcpl	0x00657469
 1e4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e8:	63736100 	cmnvs	r3, #0, 2
 1ec:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 1f0:	45475000 	strbmi	r5, [r7, #-0]
 1f4:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 1f8:	6d005952 	vstrvs.16	s10, [r0, #-164]	; 0xffffff5c	; <UNPREDICTABLE>
 1fc:	5f65766f 	svcpl	0x0065766f
 200:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 204:	626f656c 	rsbvs	r6, pc, #108, 10	; 0x1b000000
 208:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 20c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 210:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
 214:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
 218:	00797269 	rsbseq	r7, r9, r9, ror #4
 21c:	5f746573 	svcpl	0x00746573
 220:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 224:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 228:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 22c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 230:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 234:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 238:	70006465 	andvc	r6, r0, r5, ror #8
 23c:	0078736f 	rsbseq	r7, r8, pc, ror #6
 240:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 244:	6c616200 	sfmvs	f6, 2, [r1], #-0
 248:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 24c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 250:	70007972 	andvc	r7, r0, r2, ror r9
 254:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 258:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
 25c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 260:	63007972 	movwvs	r7, #2418	; 0x972
 264:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 268:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 26c:	6a626f6c 	bvs	189c024 <startup-0x1e763fdc>
 270:	00746365 	rsbseq	r6, r4, r5, ror #6
 274:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 278:	73007964 	movwvc	r7, #2404	; 0x964
 27c:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 280:	7a697300 	bvc	1a5ce88 <startup-0x1e5a3178>
 284:	63007965 	movwvs	r7, #2405	; 0x965
 288:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
 28c:	61705f65 	cmnvs	r0, r5, ror #30
 290:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 294:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 298:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 29c:	00776172 	rsbseq	r6, r7, r2, ror r1
 2a0:	61657263 	cmnvs	r5, r3, ror #4
 2a4:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
 2a8:	6f6c6c61 	svcvs	0x006c6c61
 2ac:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b0:	4f740074 	svcmi	0x00740074
 2b4:	6e006a62 	vmlsvs.f32	s12, s0, s5
 2b8:	6f706d75 	svcvs	0x00706d75
 2bc:	73746e69 	cmnvc	r4, #1680	; 0x690
 2c0:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 2c4:	61625f65 	cmnvs	r2, r5, ror #30
 2c8:	626f6c6c 	rsbvs	r6, pc, #108, 24	; 0x6c00
 2cc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2d0:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 2d4:	00786465 	rsbseq	r6, r8, r5, ror #8
 2d8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2dc:	70646e61 	rsbvc	r6, r4, r1, ror #28
 2e0:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 2e4:	00632e65 	rsbeq	r2, r3, r5, ror #28
 2e8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2ec:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 2f0:	6a626f6c 	bvs	189c0a8 <startup-0x1e763f58>
 2f4:	00746365 	rsbseq	r6, r4, r5, ror #6
 2f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 2fc:	695f3672 	ldmdbvs	pc, {r1, r4, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
 300:	0074696e 	rsbseq	r6, r4, lr, ror #18
 304:	756e696d 	strbvc	r6, [lr, #-2413]!	; 0xfffff693
 308:	00736574 	rsbseq	r6, r3, r4, ror r5
 30c:	5f6e6574 	svcpl	0x006e6574
 310:	6f636573 	svcvs	0x00636573
 314:	0073646e 	rsbseq	r6, r3, lr, ror #8
 318:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
 31c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 320:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
 324:	67007469 	strvs	r7, [r0, -r9, ror #8]
 328:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
 32c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 330:	745f746e 	ldrbvc	r7, [pc], #-1134	; 338 <startup-0x1ffffcc8>
 334:	00656d69 	rsbeq	r6, r5, r9, ror #26
 338:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 33c:	00632e6b 	rsbeq	r2, r3, fp, ror #28
 340:	72617355 	rsbvc	r7, r1, #1409286145	; 0x54000001
 344:	755f0074 	ldrbvc	r0, [pc, #-116]	; 2d8 <startup-0x1ffffd28>
 348:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 34c:	64003064 	strvs	r3, [r0], #-100	; 0xffffff9c
 350:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
 354:	5f00632e 	svcpl	0x0000632e
 358:	73756e75 	cmnvc	r5, #1872	; 0x750
 35c:	00316465 	eorseq	r6, r1, r5, ror #8
 360:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 364:	32646573 	rsbcc	r6, r4, #482344960	; 0x1cc00000
 368:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 36c:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 370:	755f0033 	ldrbvc	r0, [pc, #-51]	; 345 <startup-0x1ffffcbb>
 374:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 378:	5f003464 	svcpl	0x00003464
 37c:	73756e75 	cmnvc	r5, #1872	; 0x750
 380:	00356465 	eorseq	r6, r5, r5, ror #8
 384:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
 388:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 38c:	7000746e 	andvc	r7, r0, lr, ror #8
 390:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 394:	6168635f 	cmnvs	r8, pc, asr r3
 398:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 39c:	5f79616c 	svcpl	0x0079616c
 3a0:	696c696d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
 3a4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3a8:	315f7961 	cmpcc	pc, r1, ror #18
 3ac:	736e3532 	cmnvc	lr, #209715200	; 0xc800000
 3b0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3b4:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 3b8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3bc:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 3c0:	736e3035 	cmnvc	lr, #53	; 0x35
 3c4:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 3c8:	73790074 	cmnvc	r9, #116	; 0x74
 3cc:	00706574 	rsbseq	r6, r0, r4, ror r5
 3d0:	594c4f50 	stmdbpl	ip, {r4, r6, r8, r9, sl, fp, lr}^
 3d4:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 3d8:	74730054 	ldrbtvc	r0, [r3], #-84	; 0xffffffac
 3dc:	00747261 	rsbseq	r7, r4, r1, ror #4
 3e0:	746f6c70 	strbtvc	r6, [pc], #-3184	; 3e8 <startup-0x1ffffc18>
 3e4:	6c6f705f 	stclvs	0, cr7, [pc], #-380	; 270 <startup-0x1ffffd90>
 3e8:	6e6f6779 	mcrvs	7, 3, r6, cr15, cr9, {3}
 3ec:	73696400 	cmnvc	r9, #0, 8
 3f0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 3f4:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
 3f8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 3fc:	6500706d 	strvs	r7, [r0, #-109]	; 0xffffff93
 400:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 404:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 408:	00796174 	rsbseq	r6, r9, r4, ror r1
 40c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 410:	6e696c5f 	mcrvs	12, 3, r6, cr9, cr15, {2}
 414:	72665f65 	rsbvc	r5, r6, #404	; 0x194
 418:	705f6d6f 	subsvc	r6, pc, pc, ror #26
 41c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 420:	6f700073 	svcvs	0x00700073
 424:	6f67796c 	svcvs	0x0067796c
 428:	4c00316e 	stfmis	f3, [r0], {110}	; 0x6e
 42c:	00454e49 	subeq	r4, r5, r9, asr #28
 430:	65657473 	strbvs	r7, [r5, #-1139]!	; 0xfffffb8d
 434:	6c700070 	ldclvs	0, cr0, [r0], #-448	; 0xfffffe40
 438:	725f746f 	subsvc	r7, pc, #1862270976	; 0x6f000000
 43c:	00746365 	rsbseq	r6, r4, r5, ror #6
 440:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
 444:	52007861 	andpl	r7, r0, #6356992	; 0x610000
 448:	00544345 	subseq	r4, r4, r5, asr #6
 44c:	796c6f70 	stmdbvc	ip!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 450:	706e6f67 	rsbvc	r6, lr, r7, ror #30
 454:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 458:	73696400 	cmnvc	r9, #0, 8
 45c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 460:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
 464:	00632e73 	rsbeq	r2, r3, r3, ror lr
 468:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 46c:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 470:	00776f52 	rsbseq	r6, r7, r2, asr pc
 474:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 478:	705f6e72 	subsvc	r6, pc, r2, ror lr	; <UNPREDICTABLE>
 47c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 480:	6b5f6465 	blvs	17d961c <startup-0x1e8269e4>
 484:	72007965 	andvc	r7, r0, #1654784	; 0x194000
 488:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 48c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 490:	656b006e 	strbvs	r0, [fp, #-110]!	; 0xffffff92
 494:	632e6279 			; <UNDEFINED> instruction: 0x632e6279
 498:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 4a0 <startup-0x1ffffb60>
 49c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 4a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 4a4:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
 4a8:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 4ac:	67657337 			; <UNDEFINED> instruction: 0x67657337
 4b0:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 4b4:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
 4b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 4bc:	72747300 	rsbsvc	r7, r4, #0, 6
 4c0:	5f676e69 	svcpl	0x00676e69
 4c4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 4c8:	705f7374 	subsvc	r7, pc, r4, ror r3	; <UNPREDICTABLE>
 4cc:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 4d0:	6f003272 	svcvs	0x00003272
 4d4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4d8:	6f003174 	svcvs	0x00003174
 4dc:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4e0:	62003274 	andvs	r3, r0, #116, 4	; 0x40000007
 4e4:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 4e8:	6e6e6977 			; <UNDEFINED> instruction: 0x6e6e6977
 4ec:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
 4f0:	00656d61 	rsbeq	r6, r5, r1, ror #26
 4f4:	5f707061 	svcpl	0x00707061
 4f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 4fc:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 500:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
 504:	756f725f 	strbvc	r7, [pc, #-607]!	; 2ad <startup-0x1ffffd53>
 508:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
 50c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 510:	6170006e 	cmnvs	r0, lr, rrx
 514:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 518:	69730032 	ldmdbvs	r3!, {r1, r4, r5}^
 51c:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
 520:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 524:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 528:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
 52c:	6f63735f 	svcvs	0x0063735f
 530:	63006572 	movwvs	r6, #1394	; 0x572
 534:	696c6c6f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
 538:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 53c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 540:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 544:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 548:	705f676e 	subsvc	r6, pc, lr, ror #14
 54c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 550:	6c705f73 	ldclvs	15, cr5, [r0], #-460	; 0xfffffe34
 554:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 558:	69740031 	ldmdbvs	r4!, {r0, r4, r5}^
 55c:	3672656d 	ldrbtcc	r6, [r2], -sp, ror #10
 560:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 564:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 568:	70007470 	andvc	r7, r0, r0, ror r4
 56c:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 570:	50003165 	andpl	r3, r0, r5, ror #2
 574:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 578:	70005443 	andvc	r5, r0, r3, asr #8
 57c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 580:	6f63735f 	svcvs	0x0063735f
 584:	00736572 	rsbseq	r6, r3, r2, ror r5
 588:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 58c:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 590:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 594:	705f6369 	subsvc	r6, pc, r9, ror #6
 598:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 59c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 5a0:	67007261 	strvs	r7, [r0, -r1, ror #4]
 5a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5a8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 5ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 5b0:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 5b4:	006e6565 	rsbeq	r6, lr, r5, ror #10
 5b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 5bc:	5f636968 	svcpl	0x00636968
 5c0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 5c4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 5c8:	7300657a 	movwvc	r6, #1402	; 0x57a
 5cc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 5d0:	73007075 	movwvc	r7, #117	; 0x75
 5d4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 5d8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 5dc:	61726700 	cmnvs	r2, r0, lsl #14
 5e0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5e4:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 5e8:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 5ec:	Address 0x000005ec is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000038 	andeq	r0, r0, r8, lsr r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000048 	andcs	r0, r0, r8, asr #32
  3c:	00000048 	andeq	r0, r0, r8, asr #32
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000090 	mulcs	r0, r0, r0
  5c:	00000034 	andeq	r0, r0, r4, lsr r0
  60:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  64:	41018e02 	tstmi	r1, r2, lsl #28
  68:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  6c:	00000007 	andeq	r0, r0, r7
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000c4 	andcs	r0, r0, r4, asr #1
  7c:	00000040 	andeq	r0, r0, r0, asr #32
  80:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  84:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000104 	andcs	r0, r0, r4, lsl #2
  9c:	0000004c 	andeq	r0, r0, ip, asr #32
  a0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000150 	andcs	r0, r0, r0, asr r1
  bc:	00000034 	andeq	r0, r0, r4, lsr r0
  c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c4:	41018e02 	tstmi	r1, r2, lsl #28
  c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  cc:	00000007 	andeq	r0, r0, r7
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000184 	andcs	r0, r0, r4, lsl #3
  dc:	0000002a 	andeq	r0, r0, sl, lsr #32
  e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e4:	41018e02 	tstmi	r1, r2, lsl #28
  e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  ec:	00000007 	andeq	r0, r0, r7
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200001ae 	andcs	r0, r0, lr, lsr #3
  fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 100:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 104:	41018e02 	tstmi	r1, r2, lsl #28
 108:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 10c:	00000007 	andeq	r0, r0, r7
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200001d8 	ldrdcs	r0, [r0], -r8
 11c:	00000036 	andeq	r0, r0, r6, lsr r0
 120:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 124:	41018e02 	tstmi	r1, r2, lsl #28
 128:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 12c:	00000007 	andeq	r0, r0, r7
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	2000020e 	andcs	r0, r0, lr, lsl #4
 13c:	00000036 	andeq	r0, r0, r6, lsr r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	00000018 	andeq	r0, r0, r8, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000244 	andcs	r0, r0, r4, asr #4
 15c:	00000022 	andeq	r0, r0, r2, lsr #32
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0000070d 	andeq	r0, r0, sp, lsl #14
 16c:	00000018 	andeq	r0, r0, r8, lsl r0
 170:	00000000 	andeq	r0, r0, r0
 174:	20000266 	andcs	r0, r0, r6, ror #4
 178:	00000010 	andeq	r0, r0, r0, lsl r0
 17c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 180:	41018e02 	tstmi	r1, r2, lsl #28
 184:	0000070d 	andeq	r0, r0, sp, lsl #14
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	20000276 	andcs	r0, r0, r6, ror r2
 194:	00000038 	andeq	r0, r0, r8, lsr r0
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	200002ae 	andcs	r0, r0, lr, lsr #5
 1b4:	0000007e 	andeq	r0, r0, lr, ror r0
 1b8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1c0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	0000000c 	andeq	r0, r0, ip
 1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000001c8 	andeq	r0, r0, r8, asr #3
 1e0:	2000032c 	andcs	r0, r0, ip, lsr #6
 1e4:	00000060 	andeq	r0, r0, r0, rrx
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	000001c8 	andeq	r0, r0, r8, asr #3
 200:	2000038c 	andcs	r0, r0, ip, lsl #7
 204:	00000060 	andeq	r0, r0, r0, rrx
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	000001c8 	andeq	r0, r0, r8, asr #3
 220:	200003ec 	andcs	r0, r0, ip, ror #7
 224:	00000084 	andeq	r0, r0, r4, lsl #1
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	000001c8 	andeq	r0, r0, r8, asr #3
 240:	20000470 	andcs	r0, r0, r0, ror r4
 244:	00000056 	andeq	r0, r0, r6, asr r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	000001c8 	andeq	r0, r0, r8, asr #3
 260:	200004c6 	andcs	r0, r0, r6, asr #9
 264:	00000020 	andeq	r0, r0, r0, lsr #32
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	000001c8 	andeq	r0, r0, r8, asr #3
 280:	200004e6 	andcs	r0, r0, r6, ror #9
 284:	00000072 	andeq	r0, r0, r2, ror r0
 288:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 28c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 290:	480e4101 	stmdami	lr, {r0, r8, lr}
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	000001c8 	andeq	r0, r0, r8, asr #3
 2a0:	20000558 	andcs	r0, r0, r8, asr r5
 2a4:	00000070 	andeq	r0, r0, r0, ror r0
 2a8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2b0:	480e4101 	stmdami	lr, {r0, r8, lr}
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000000c 	andeq	r0, r0, ip
 2bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c8:	00000018 	andeq	r0, r0, r8, lsl r0
 2cc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2d0:	200005c8 	andcs	r0, r0, r8, asr #11
 2d4:	0000007c 	andeq	r0, r0, ip, ror r0
 2d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2dc:	41018e02 	tstmi	r1, r2, lsl #28
 2e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 2ec:	20000644 	andcs	r0, r0, r4, asr #12
 2f0:	00000030 	andeq	r0, r0, r0, lsr r0
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 300:	00000018 	andeq	r0, r0, r8, lsl r0
 304:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 308:	20000674 	andcs	r0, r0, r4, ror r6
 30c:	0000003c 	andeq	r0, r0, ip, lsr r0
 310:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 314:	41018e02 	tstmi	r1, r2, lsl #28
 318:	0000070d 	andeq	r0, r0, sp, lsl #14
 31c:	0000000c 	andeq	r0, r0, ip
 320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 324:	7c020001 	stcvc	0, cr0, [r2], {1}
 328:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	0000031c 	andeq	r0, r0, ip, lsl r3
 334:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
 338:	00000040 	andeq	r0, r0, r0, asr #32
 33c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 340:	41018e02 	tstmi	r1, r2, lsl #28
 344:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 348:	00000007 	andeq	r0, r0, r7
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	0000031c 	andeq	r0, r0, ip, lsl r3
 354:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	0000002a 	andeq	r0, r0, sl, lsr #32
 35c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 360:	41018e02 	tstmi	r1, r2, lsl #28
 364:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 368:	00000007 	andeq	r0, r0, r7
 36c:	0000000c 	andeq	r0, r0, ip
 370:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 374:	7c020001 	stcvc	0, cr0, [r2], {1}
 378:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	0000036c 	andeq	r0, r0, ip, ror #6
 384:	2000071c 	andcs	r0, r0, ip, lsl r7
 388:	00000036 	andeq	r0, r0, r6, lsr r0
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 398:	00000007 	andeq	r0, r0, r7
 39c:	00000018 	andeq	r0, r0, r8, lsl r0
 3a0:	0000036c 	andeq	r0, r0, ip, ror #6
 3a4:	20000752 	andcs	r0, r0, r2, asr r7
 3a8:	00000012 	andeq	r0, r0, r2, lsl r0
 3ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b0:	41018e02 	tstmi	r1, r2, lsl #28
 3b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 3b8:	00000018 	andeq	r0, r0, r8, lsl r0
 3bc:	0000036c 	andeq	r0, r0, ip, ror #6
 3c0:	20000764 	andcs	r0, r0, r4, ror #14
 3c4:	00000044 	andeq	r0, r0, r4, asr #32
 3c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3cc:	41018e02 	tstmi	r1, r2, lsl #28
 3d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3d4:	0000000c 	andeq	r0, r0, ip
 3d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 3e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	000003d4 	ldrdeq	r0, [r0], -r4
 3ec:	200007a8 	andcs	r0, r0, r8, lsr #15
 3f0:	00000114 	andeq	r0, r0, r4, lsl r1
 3f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f8:	41018e02 	tstmi	r1, r2, lsl #28
 3fc:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 400:	00000007 	andeq	r0, r0, r7
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000003d4 	ldrdeq	r0, [r0], -r4
 40c:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 410:	00000048 	andeq	r0, r0, r8, asr #32
 414:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 418:	41018e02 	tstmi	r1, r2, lsl #28
 41c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 420:	00000007 	andeq	r0, r0, r7
 424:	00000020 	andeq	r0, r0, r0, lsr #32
 428:	000003d4 	ldrdeq	r0, [r0], -r4
 42c:	20000904 	andcs	r0, r0, r4, lsl #18
 430:	00000136 	andeq	r0, r0, r6, lsr r1
 434:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 438:	86048505 	strhi	r8, [r4], -r5, lsl #10
 43c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 440:	300e4101 	andcc	r4, lr, r1, lsl #2
 444:	00070d41 	andeq	r0, r7, r1, asr #26
 448:	00000020 	andeq	r0, r0, r0, lsr #32
 44c:	000003d4 	ldrdeq	r0, [r0], -r4
 450:	20000a3a 	andcs	r0, r0, sl, lsr sl
 454:	00000080 	andeq	r0, r0, r0, lsl #1
 458:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 45c:	86048505 	strhi	r8, [r4], -r5, lsl #10
 460:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 464:	300e4101 	andcc	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000000c 	andeq	r0, r0, ip
 470:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 474:	7c020001 	stcvc	0, cr0, [r2], {1}
 478:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 47c:	0000001c 	andeq	r0, r0, ip, lsl r0
 480:	0000046c 	andeq	r0, r0, ip, ror #8
 484:	20000abc 			; <UNDEFINED> instruction: 0x20000abc
 488:	00000064 	andeq	r0, r0, r4, rrx
 48c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 490:	41018e02 	tstmi	r1, r2, lsl #28
 494:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 498:	00000007 	andeq	r0, r0, r7
 49c:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a0:	0000046c 	andeq	r0, r0, ip, ror #8
 4a4:	20000b20 	andcs	r0, r0, r0, lsr #22
 4a8:	00000064 	andeq	r0, r0, r4, rrx
 4ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b0:	41018e02 	tstmi	r1, r2, lsl #28
 4b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4b8:	00000007 	andeq	r0, r0, r7
 4bc:	00000018 	andeq	r0, r0, r8, lsl r0
 4c0:	0000046c 	andeq	r0, r0, ip, ror #8
 4c4:	20000b84 	andcs	r0, r0, r4, lsl #23
 4c8:	00000044 	andeq	r0, r0, r4, asr #32
 4cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d0:	41018e02 	tstmi	r1, r2, lsl #28
 4d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4dc:	0000046c 	andeq	r0, r0, ip, ror #8
 4e0:	20000bc8 	andcs	r0, r0, r8, asr #23
 4e4:	0000007c 	andeq	r0, r0, ip, ror r0
 4e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 4ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 4f0:	300e4101 	andcc	r4, lr, r1, lsl #2
 4f4:	00070d41 	andeq	r0, r7, r1, asr #26
 4f8:	00000020 	andeq	r0, r0, r0, lsr #32
 4fc:	0000046c 	andeq	r0, r0, ip, ror #8
 500:	20000c44 	andcs	r0, r0, r4, asr #24
 504:	00000048 	andeq	r0, r0, r8, asr #32
 508:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 50c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 510:	41018e02 	tstmi	r1, r2, lsl #28
 514:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 518:	00000007 	andeq	r0, r0, r7
 51c:	0000000c 	andeq	r0, r0, ip
 520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 524:	7c020001 	stcvc	0, cr0, [r2], {1}
 528:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	0000051c 	andeq	r0, r0, ip, lsl r5
 534:	20000c8c 	andcs	r0, r0, ip, lsl #25
 538:	00000098 	muleq	r0, r8, r0
 53c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 540:	41018e02 	tstmi	r1, r2, lsl #28
 544:	0000070d 	andeq	r0, r0, sp, lsl #14
 548:	00000020 	andeq	r0, r0, r0, lsr #32
 54c:	0000051c 	andeq	r0, r0, ip, lsl r5
 550:	20000d24 	andcs	r0, r0, r4, lsr #26
 554:	00000062 	andeq	r0, r0, r2, rrx
 558:	41100e41 	tstmi	r0, r1, asr #28
 55c:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 560:	06870785 	streq	r0, [r7], r5, lsl #15
 564:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 568:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	0000051c 	andeq	r0, r0, ip, lsl r5
 574:	20000d86 	andcs	r0, r0, r6, lsl #27
 578:	00000072 	andeq	r0, r0, r2, ror r0
 57c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 580:	41018e02 	tstmi	r1, r2, lsl #28
 584:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 588:	00000007 	andeq	r0, r0, r7
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	0000051c 	andeq	r0, r0, ip, lsl r5
 594:	20000df8 	strdcs	r0, [r0], -r8
 598:	00000088 	andeq	r0, r0, r8, lsl #1
 59c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5a0:	41018e02 	tstmi	r1, r2, lsl #28
 5a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5a8:	00000007 	andeq	r0, r0, r7
 5ac:	00000018 	andeq	r0, r0, r8, lsl r0
 5b0:	0000051c 	andeq	r0, r0, ip, lsl r5
 5b4:	20000e80 	andcs	r0, r0, r0, lsl #29
 5b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5c0:	41018e02 	tstmi	r1, r2, lsl #28
 5c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 5c8:	00000024 	andeq	r0, r0, r4, lsr #32
 5cc:	0000051c 	andeq	r0, r0, ip, lsl r5
 5d0:	20000ebc 			; <UNDEFINED> instruction: 0x20000ebc
 5d4:	000002c0 	andeq	r0, r0, r0, asr #5
 5d8:	41100e41 	tstmi	r0, r1, asr #28
 5dc:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 5e0:	06870785 	streq	r0, [r7], r5, lsl #15
 5e4:	0e41058e 	cdpeq	5, 4, cr0, cr1, cr14, {4}
 5e8:	0c410180 	stfeqe	f0, [r1], {128}	; 0x80
 5ec:	00004807 	andeq	r4, r0, r7, lsl #16
 5f0:	00000020 	andeq	r0, r0, r0, lsr #32
 5f4:	0000051c 	andeq	r0, r0, ip, lsl r5
 5f8:	2000117c 	andcs	r1, r0, ip, ror r1
 5fc:	00000080 	andeq	r0, r0, r0, lsl #1
 600:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 604:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 608:	41018e02 	tstmi	r1, r2, lsl #28
 60c:	4101b80e 	tstmi	r1, lr, lsl #16
 610:	0180070c 	orreq	r0, r0, ip, lsl #14
 614:	0000000c 	andeq	r0, r0, ip
 618:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 61c:	7c020001 	stcvc	0, cr0, [r2], {1}
 620:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 624:	0000001c 	andeq	r0, r0, ip, lsl r0
 628:	00000614 	andeq	r0, r0, r4, lsl r6
 62c:	200011fc 	strdcs	r1, [r0], -ip
 630:	0000001e 	andeq	r0, r0, lr, lsl r0
 634:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 638:	41018e02 	tstmi	r1, r2, lsl #28
 63c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 640:	00000007 	andeq	r0, r0, r7
 644:	0000000c 	andeq	r0, r0, ip
 648:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 64c:	7c020001 	stcvc	0, cr0, [r2], {1}
 650:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 654:	0000000c 	andeq	r0, r0, ip
 658:	00000644 	andeq	r0, r0, r4, asr #12
 65c:	20000000 	andcs	r0, r0, r0
 660:	0000000c 	andeq	r0, r0, ip
 664:	0000000c 	andeq	r0, r0, ip
 668:	00000644 	andeq	r0, r0, r4, asr #12
 66c:	2000121a 	andcs	r1, r0, sl, lsl r2
 670:	00000006 	andeq	r0, r0, r6
 674:	0000000c 	andeq	r0, r0, ip
 678:	00000644 	andeq	r0, r0, r4, asr #12
 67c:	20001220 	andcs	r1, r0, r0, lsr #4
 680:	00000006 	andeq	r0, r0, r6
 684:	0000000c 	andeq	r0, r0, ip
 688:	00000644 	andeq	r0, r0, r4, asr #12
 68c:	20001226 	andcs	r1, r0, r6, lsr #4
 690:	00000006 	andeq	r0, r0, r6
 694:	0000000c 	andeq	r0, r0, ip
 698:	00000644 	andeq	r0, r0, r4, asr #12
 69c:	2000122c 	andcs	r1, r0, ip, lsr #4
 6a0:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	2000121a 	andcs	r1, r0, sl, lsl r2
   4:	20001232 	andcs	r1, r0, r2, lsr r2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
